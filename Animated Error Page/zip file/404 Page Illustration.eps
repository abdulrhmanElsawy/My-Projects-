%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Untitled-1.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Sasa
%%CreationDate: 7/13/2018
%%BoundingBox: 0 0 2400 1800
%%HiResBoundingBox: 0 0 2400 1800
%%CropBox: 0 0 2400 1800
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 26658 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFFD04A7A8
%A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7
%A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8
%A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7
%A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8
%A7A7A7A8A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7
%CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7
%A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7
%CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7
%A8A7CFA7A8A7CFA7A8A7CFFD04A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A8A7CFA7A8A7CFA8CF
%A7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CF
%A8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CF
%A7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CF
%A8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA7A8A7CFFD04
%A7A8A7A75258525852585258525852585258525852585258525852585258
%525852585258525852585258525852585258525852585258525852585258
%525852585258525852585258525852585258525852585258525852585258
%52585258525852585258525852585258525852585258525852585258527D
%A7A8A7A7A7A8A8A7CFA7CFA72E0005002700050027000500270005002700
%050027000500270005002700050027000500270005002700050027000500
%270005002700050027000500270005002700050027000500270005002700
%050027000500270005002700050027000500270005002700050027000500
%2700050027000527CFA7A8A7CFFD04A7A8A7A72727052700270005002705
%270027002700270527002705270027052700270527002705270027052700
%270527002705270027052700270527002705270027052700270527002705
%270027052700270527002705270027052700270527002705270027052700
%270527002705270027052700270028A7A8A7A7A7A8CFA7A8A7CFA72E0028
%052805282E52052805270528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%0528052805280528052805280528052805280528052828A8A7CFA7A8A7A7
%A8A7A7A7A827050027000527FFA827F80500A85205002700270027002700
%270027002700270027002700270027002700270027002700270027002700
%270027002700270027002700270027002700270027002700270027002700
%2700270027002700270027002700050005F8270005F80500050027002700
%28A7A7A7A8A7A7CFA7A8A7CFA72E0028052805A8FF7D2E53287DA8590528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%0528052805280528052805280528052805280527527E7D7D597E28527D7D
%7D7E7D7D0528052828A8A7CFA7A8A7A7A8A7A7A7A8270500270052CBA87E
%FFFD04A85227052700270527002705270027052700270527002705270027
%052700270527002705270027052700270527002705270027052700270527
%0027052700270527002705270027052700270527002705270027005253FD
%047D52277D59597D7D28270527002EA7A8A7A8A7A7A8A7CFA7A8A72E0528
%05282859282E282E2E2F2E28052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%0528052805270027000500280505002700270528052727A8A7A8A7CFFD04
%A7A8A7A7272700270027FD05050605060027002700270027002700270027
%002700270027002700270027002700270027002700270027002700270027
%002700270027002700270027002700270027002700270027002700270027
%00270027002700270027002700270027002700270027002700270028A7A8
%A7A7A7A8A8A7CFA7CFA75205280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052727CFA7A8A7CFFD04A7A8A7A727270527002705270027052700
%270527002705270027052700270527002705270027052700270527002705
%270027052700270527002705270027052700270527002705270027052700
%270527002705270027052700270527002705270027052700270527002705
%27002705270027052700270028A7A8A7A7A7A8CFA7A8A7CFA72E00280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052828A8A7CFA7A8A7A7A8A7
%A7A7A8270500270027002700270027002700270027002700270027002700
%270027002700270027002700270027002700270027002700270027002700
%270027002700270027002700270027002700270027002700270027002700
%2700270027002700270027002700270027002700270027002700270028A7
%A7A7A8A7A7CFA7A8A7CFA72E002805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%05280528052828A8A7CFA7A8A7A7A8A7A7A7A82705002705270027052700
%270527002705270027052700270527002705270027052700270527002705
%270027052700270527002705270027052700270527002705270027052700
%270527002705270027052700270527002705270027052700270527002705
%27002705270027052700270527002EA7A8A7A8A7A7A8A7CFA7A8A72E0528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%0528052805280528052805280528052805280528052727A8A7A8A7CFFD04
%A7A8A7A72727002700270027002700270027002700270027002700270027
%002700270027002700270027002700270027002700270027002700270027
%002700270027002700270027002700270027002700270027002700270027
%002700270027002700270027002700270027002700270027002700270028
%A7A8A7A7A7A8A8A7CFA7CFA7520528052805280528052805280528052805
%280528052805280528052805280528052805280528052E282E2852282E27
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%2805280528052727CFA7A8A7CFFD04A7A8A7A72727052700270527002705
%270027052700270527002705270027052700270527002705270028272E28
%5228522852282E2728002700270527002705270027052700270527002705
%270027052700270527002705270027052700270527002705270027052700
%270527002705270027052700270028A7A8A7A7A7A8CFA7A8A7CFA72E0028
%052805280528052805280528052805280528052805280528052805280528
%0528052828522E5228522E5228522E52282E052705280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%0528052805280528052805280528052805280528052828A8A7CFA7A8A7A7
%A8A7A7A7A827050027002700270027002700270027002700270027002700
%270027002700270027002E282E285228282752282E272E282E282E050500
%270027002700270027002700270027002700270027002700270027002700
%270027002700270027002700270027002700270027002700270027002700
%28A7A7A7A8A7A7CFA7A8A7CFA72E00280528052805280528052805280528
%0528052805280528052805280528052805522E5228522E7D7DA8A7A77D7D
%2E5228522E52052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052828A8A7CFA7A8A7A7A8A7A7A7A8270500270527002705
%270027052700270527002705270027052700270527002700282852282E2E
%A7A7A8A7A8A7A8A7A7522E28522828002705270027052700270527002705
%270027052700270527002705270027052700270527002705270027052700
%270527002705270027052700270527002EA7A8A7A8A7A7A8A7CFA7A8A72E
%052805280528052805280528052805280528052805280528052805280527
%05282E52285252A8A7CFA7A8A7CFA7A8A7CF7D2E28522E28052805280528
%052805280528052805280528052805280528052805280528052805280528
%05280528052805280528052805280528052805280528052727A8A7A8A7CF
%FD04A7A8A7A7272700270027002700270027002700270027002700270027
%00270027002E5984598459592EFD04A7A8A7A7A7A8A7A7A7CA5228285228
%270027002700270027002700270027002700270027002700270027002700
%270027002700270027002700270027002700270027002700270027002700
%28A7A8A7A7A7A8A8A7CFA7CFA75205280528052805280528052805280528
%05280528052805280528005984AF84A98485848484A8A7CFA7A8A7CFA7A8
%A7CFA7A82E522E5227280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052727CFA7A8A7CFFD04A7A8A7A727270527002705270027
%052700270527002705270027052700270053FD0B84A8A7A8A7A7A7A8A7A7
%A7A8A77D2752282800270527002705270027052700270527002705270027
%052700270527002705270027052700270527002705270027052700270527
%0027052700270028A7A8A7A7A7A8CFA7A8A7CFA72E002805280528052805
%2805280528052805280528052805280053FD0D84A8A7CFA7A8A7CFA7A8A7
%CF7D52285228270528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052828A8A7CFA7A8A7A7A8A7A7A7A8270500270027002700270027
%00270027002700270027002700287E8484847E8484847E8484847E848484
%A7A8A7A7A7A8FD04A7282E282E0027002700270027002700270027002700
%270027002700270027002700270027002700270027002700270027002700
%27002700270027002700270028A7A7A7A8A7A7CFA7A8A7CFA72E00280528
%05280528052805282728052805280528052805287DAFFD0F84A8A7CAA7CF
%A7A8A7CFA752285328280528052805280528052805280528052805280528
%052805280528052800270027002805280528052805280528052805280528
%052805280528052828A8A7CFA7A8A7A7A8A7A7A7A8270500270527002700
%27002727280027052700270027002759FD138483A7A7A8FD04A7282E282E
%05270027052700270527002700050027002700270527002705270027002E
%2E592E2E052700270027052700270527002705270027052700270527002E
%A7A8A7A8A7A7A8A7CFA7A8A72E05280528052E282E052705522828052805
%270028272859AFFD1584A8A7CFA7CF7D522E522828052805280528052805
%27002E2E5328280027052805280528052728FD0484AF8484595305270528
%05280528052805280528052805270027052727A8A7A8A7CFFD04A7A8A7A7
%2705000500535959352F0027272E27050027002E35FD04598459847E8484
%847E8484847D8484847E8484847E84848483A8A77D275228280027002700
%270027000527597E848484595905050027002700272EFD05847EFD05842E
%050027002700270027002700050027272E28280028A7A8A7A7A7A8A8A7CF
%A7CFA7520527055959605960595927522E2E052705595960596059605959
%5984608484A9848484AF7EFD0C84A82E522E522728052805280528002853
%848485848484AF8484532E0028002859AFFD0B84AF592E00280528052805
%28052727597D8484AF842E27CFA7A8A7CFFD04A7A8A7A7597E52FD055935
%5A352E272E272E2E5959592E2E59593559595935FD0459FD04845352FD0C
%845928522727002705270027002859FD0B845953002859FD108459000500
%27052700272EFD0784592EA7A8A7A7A7A8CFA7A8A7CFA784848459595960
%59595953272E272E52845960595227FD0459605959595A59595984848427
%52FD0E84595205270027002705598485FD0D847E7EFD1384282700280028
%59AFFD07848559A7A7CFA7A8A7A7A8FD04A77D843559595935595959272E
%272E272E3559355927272E595959355959593559595935592E2E27848484
%7E8484847E8484847E8484847E845352272E53FD05847E8484847E848484
%7EFD07847E848484598484847E8484847EFD05845328F82E59847E848484
%7E8484847E84A7A7A7A8A7A7CFA7A8A7CFA7845960595A596059602E522E
%522752275959602E52275259605960596059605960596059592E525985FD
%0D848584AF84A9FD0B84A9848484A9FD0B845259AFFD0B84AF7E598485FD
%09848584A8A7CFA7A8A7A7A8A7A7A7A85959355959593559592E272E272E
%272E2759352E272E2753FD06592E592E522E522E52272E52FD138427FD05
%847E8459605984596059FD0A847D2752FD0A847EFD1184A7A7A7A8A7A7A8
%A7CFA7A8A7FD045960FD0459272E2752282E275259592E522E522E595359
%2E522E5227522E522E52272E272E2E597EAFFD0E84532E59AF8484FD0B59
%FD0884AF522E277EFD0884595959FD07845385FD04845A5A59A8A7A8A7CF
%FD04A7A8A7A735595959355959592F593559272E35592F5959592E522E52
%27522752275227522752272E272E272E272E272E528484847E8484847E84
%84847E84842E27525959355935593559595935595959355959FD0584592E
%27272E8484847E8484593559355935607E84848452275984595A35593559
%A7A8A7A7A7A8A8A7CFA7CFA759595A5960595A5960596059522E59535952
%522E5252522E5252522E5252522E522E522752275227522752272E285959
%A9FD0A84275227595960595A5960595A5960595A5960595959FD04847D27
%5227527EFD05845960595A5960595A5A858453278460605960595A59A8A7
%A8A7CFFD04A7A8A7A7FD05595A595935592E5227522E5227522E5227522E
%5227522E5227522E52272E272E272E272E272E272E272E27272E597DFD07
%842E28272E2E5935FD07593559595935FD04598484842E2E272E2759FD04
%84595935595959355959592E52272E2E592E5935595959A7A8A7A7A7A8CF
%A7A8A7CFA759596059592E5952522E522E522E522E522E522E522E522E52
%2E522E522E52272E2752272E2752272E2752272E2752272E2752527D8485
%84842E2E272E2752595A596059595960595959605959596059595984592E
%2752282E2E848484FD05596059605959272E2752272E272E272E2E5952A8
%A7CFA7A8A7A7A8A7A7A7A82E532E52275227522752275227522752275227
%5227522752275227522E2E272E272E272E272E272E272E272E272E272E27
%2E2727272E2E5935592E5227522E59595935592E59355959593559595935
%5959593552272E272E2727598459593559595935592E2E272E272E272E27
%2E272E2727272EA7A7A7A8A7A7CFA7A8A7CFA752285252522E5252522E52
%52522E5252522E5252522E5252522E525252275227522752275227522752
%27522752275227522752272E275227522E592E525984596059602E525960
%595A5960595A5960595A59592E5227522E5227598460596059605959282E
%27522752275227522752275227522EA8A7CFA7A8A7A7A8A7A7A7A82E5227
%522E5227522E5227522E5227522E5227522E5227522E522752272E272E27
%2E272E272E272E272E272E272E272E272E272E272E272E2728272E272E2E
%5959592F2E2752FD045935595959355959592E2E272E272E272E27595959
%35592E2E272E272E272E272E272E272E272E272E2752A7A8A7A8A7A7A8A7
%CFA7A8A7522E522E522E522E522E522E522E522E522E522E522E522E5252
%522752272E2752272E2752272E2752272E2752272E2752272E2752272E27
%52272E2752272E27522E5227522E5959605960596059595960FD04592E2E
%2E84FD04592E2E272E272E2752272E2752272E2752272E2752272E27A8A7
%A8A7CFFD04A7A8A7A7275227522752275227522752275227522752275227
%522752272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E272E2E522E592E59355935
%5959593559272E35592E2E272E272E272E272E272E272E272E272E272E27
%2E272E272EA1A8A7A7A7A8A8A7CFA7CFA7522E522E5252522E5252522E52
%52522E5252522E5252522E52275227522752275227522752275227522752
%2752275227522752275227522752275227522752275227522752272E2752
%272E27522E5227522E522E522E2E2752272E275227522752275227522752
%27522752275227522752272E2DA8A7A8A7CFFD04A7A8A7A72E522E522752
%2E5227522E5227522E5227522E5227522E2E272E272E272E272E272E272E
%272E272E272E272E272E272E272E272E272E272E272E272E272E272E272E
%272E272E272E272E272E272E272E272E272E272E272E272E272E272E272E
%272E272E272E272E272E272E272E272E272E272EA7A8A7A7A7A8CFA7A8A7
%CFA7522E522E522E522E522E522E522E522E522E522E522E52272E275227
%2E2752272E2752272E2752272E2752272E2752272E2752272E2752272E27
%52272E2752272E2752272E2752272E2752272E2752272E2752272E275227
%2E2752272E2752272E2752272E2752272E2752272E2752272E272E2EA8A7
%CFA7A8A7A7A8FD04A72E522752275227522752275227522752275227522E
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272705
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272EA7A7A7A8A7A7CFA7A8A7CFA7522E5252522E5252522E525252
%2E5252522E52525227522752275227522752275227522752275227522752
%275227522752597D2E2E272E272E2752272E272E272E2752275227522752
%275227522752275227522752275227522752275227522752275227522752
%2752275227522752275227522EA8A7CFA7A8A7A7A8A7A7A7A82E5227522E
%5227522E5227522E5227522E522752272E272E272E272E272E272E272E27
%2E272E272E272E272E272E27527D522E7D2E7D522E527D277D59522E7D2E
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E2752A7A8A7A8A7A7A8A7CF
%A7A8A7522E522E522E522E522E522E522E522E522E522752272E2752272E
%2752272E2752272E2752272E2752272E2752272E527D272759A82E7D7D59
%52847D52597D5952272E2752272E2752272E2752272E2752272E2752272E
%2752272E2752272E2752272E2752272E2752272E2752272E2752272E27A8
%A7A8A7CFFD04A7A8A7A7275227522752275227522752275227522752272E
%272E272E272E272E272E272E272E272E272E272E272E272E272E272E5952
%2E7D5252527D2E527D7D277D527D522E2E2E272E272E272E272E272E272E
%272E272E272E272E272E272E272E272E272E272E272E272E272E272E272E
%272E272E272EA1A8A7A7A7A8A8A7CFA7CFA7522E522E5252522E5252522E
%5252522E522E522752275227522752275227522752275227522752275227
%522752275227597D7D2E527D59277D5952847D5259537D527D2E52275227
%522752275227522752275227522752275227522752275227522752275227
%5227522752275227522752272E2DA8A7A8A7CFFD04A7A8A7A72E522E5227
%522E5227522E5227522E52272E272E272E272E272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E272E272E2752052E272727
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E272EA7A8A7A7A7A8CFA7A8
%A7CFA7522E522E522E522E522E522E522E5252522752272E2752272E2752
%272E2752272E2752272E2752272E2752272E27522E2E272E272E272E272E
%272E272E272E272E272E272E2752272E2752272E2752272E2752272E2752
%272E2752272E2752272E2752272E2752272E2752272E2752272E272E2EA8
%A7CFA7A8A7A7A8FD04A72E522752275227522752275227522752272E272E
%272E272E272E272E272E272E272E272E272E272E272E272E27287DA87D7D
%7DA87D7D527D52527DA8597D52FD057D592E272E272E272E272E272E272E
%272E272E272E272E272E272E272E272E272E272E272E272E272E272E272E
%272E272EA7A7A7A8A7A7CFA7A8A7CFA7522E5252522E5252522E5252522E
%522E2E275227522752275227522752275227522752275227522752275227
%2E277D7D7D52847D7D597D7D7D52A87D7D527D597D597DA87D2752275227
%522752275227522752275227522752275227522752275227522752275227
%52275227522752275227522EA8A7CFA7A8A7A7A8A7A7A7A82E5227522E52
%27522E5227522E52272E272E272E272E272E272E272E272E272E272E272E
%272E272E272E272E272E272E2727272E2727272E2727052E2727272E2727
%0552272E272E272E272E272E272E272E272E272E272E272E272E272E272E
%272E272E272E272E272E272E272E272E272E2752A7A8A7A8A7A7A8A7CFA7
%A8A7522E522E522E522E522E522E522E2E2752272E2752272E2752272E27
%52272E2752272E2752272E2752272E2752272E2752272E2752272E275227
%2E2752272E2752272E2752272E2752272E2752272E2752272E2752272E27
%52272E2752272E2752272E2752272E2752272E2752272E2752272E27A8A7
%A8A7CFFD04A7A8A7A7275227522752275227522752272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272EA1A8A7A7A7A8A8A7CFA7CFA7522E522E5252522E5252522E52
%275227522752275227522752275227522752275227522752275227522752
%27522752275227522752272E275227522752275227522752275227522752
%275227522752275227522752275227522752275227522752275227522752
%27522752275227522752272E2DA8A7A8A7CFFD04A7A8A7A72E522E522752
%2E5227522E52272E272E272E272E272E272E272E272E272E272E272E272E
%272E272E272E272E272E272E272E272E272E2727272E2727052E272E272E
%272E272E272E272E272E272E272E272E272E272E272E272E272E272E272E
%272E272E272E272E272E272E272E272E272E272EA7A8A7A7A7A8CFA7A8A7
%CFA7522E522E522E522E522E522E2E2752272E2752272E2752272E275227
%2E2752272E2752272E2752272E2752272E2752272E27522752527D7D7D84
%847D842E2E272E2752272E2752272E2752272E2752272E2752272E275227
%2E2752272E2752272E2752272E2752272E2752272E2752272E272E2EA8A7
%CFA7A8A7A7A8FD04A72E522752275227522752272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E2E5252A852597D7D7D52272E272E272E272E272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272EA7A7A7A8A7A7CFA7A8A7CFA7522E5252522E5252522E522752
%275227522752275227522752275227522752275227522752275227522752
%2752275227522752272E2752272E272E272E275227522752275227522752
%275227522752275227522752275227522752275227522752275227522752
%2752275227522752275227522EA8A7CFA7A8A7A7A8A7A7A7A82E5227522E
%5227522E52272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E272E272E272E272E272E27
%2E272E272E272E272E272E272E272E272E272E2752A7A8A7A8A7A7A8A7CF
%A7A8A7522E522E522E522E522E2E2752272E2752272E2752272E2752272E
%2752272E2752272E2752272E2752272E2752272E2752272E2752272E2752
%272E2752272E2752272E2752272E2752272E2752272E2752272E2752272E
%2752272E2752272E2752272E2752272E2752272E2752272E2752272E27A8
%A7A8A7CFFD04A7A8A7A7272E272E272E272E272827270527272705272727
%052727270527272705272727052727270527272705272727052727270527
%272705272727052727270527272705272727052727270527272705272727
%052727270527272705272727052727270527272705272727052727270527
%2727052705287DA8A7A7A7A8A8A7CFA7CFA77D7D7D7C7D7D7D7C7D7C7D7C
%7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C
%7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C
%7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C7D7C
%7D7C7D7C7D7C7D7C7D7C7D7C7D7CCFA7A8A7CFFD04A7A8A7A7A7CFA7A8A7
%CFA7A8A7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7
%CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7
%CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7
%CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7CFA7CAA7A8A7A7A7A8CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFFD04A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8
%A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7
%A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8
%A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7
%A7A8A7A7A7A8A7A7A7A8A7A7A7A8A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7
%A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7
%CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7
%A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7
%CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFFD04A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8
%A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CFA7A8A7CF
%A7A8A7CFA7A8A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7
%A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7A7
%A8A7A7A7A8A7A7A7A8A7A7A7A8A7A7
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2018-07-13T22:19:30+02:00</xap:CreateDate>
         <xap:ModifyDate>2018-07-13T22:19:30+02:00</xap:ModifyDate>
         <xap:MetadataDate>2018-07-13T22:19:30+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7RmqbHYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUFqet6L&#xA;pSxtqd/bWCykiI3M0cIYr148ytaVyUYSlyFoJAQH+OvJH/Uw6Z/0mW//ADXk/Bn/ADT8kcY73f46&#xA;8kf9TDpn/SZb/wDNePgz/mn5Lxjvd/jryR/1MOmf9Jlv/wA14+DP+afkvGO93+OvJH/Uw6Z/0mW/&#xA;/NePgz/mn5Lxjvd/jryR/wBTDpn/AEmW/wDzXj4M/wCafkvGO93+OvJH/Uw6Z/0mW/8AzXj4M/5p&#xA;+S8Y73f468kf9TDpn/SZb/8ANePgz/mn5Lxjvd/jryR/1MOmf9Jlv/zXj4M/5p+S8Y73f468kf8A&#xA;Uw6Z/wBJlv8A814+DP8Amn5Lxjvd/jryR/1MOmf9Jlv/AM14+DP+afkvGO93+OvJH/Uw6Z/0mW//&#xA;ADXj4M/5p+S8Y73f468kf9TDpn/SZb/814+DP+afkvGO93+OvJH/AFMOmf8ASZb/APNePgz/AJp+&#xA;S8Y73f468kf9TDpn/SZb/wDNePgz/mn5Lxjvd/jryR/1MOmf9Jlv/wA14+DP+afkvGO93+OvJH/U&#xA;w6Z/0mW//NePgz/mn5Lxjvd/jryR/wBTDpn/AEmW/wDzXj4M/wCafkvGO93+OvJH/Uw6Z/0mW/8A&#xA;zXj4M/5p+S8Y73f468kf9TDpn/SZb/8ANePgz/mn5Lxjvd/jryR/1MOmf9Jlv/zXj4M/5p+S8Y73&#xA;f468kf8AUw6Z/wBJlv8A814+DP8Amn5Lxjvd/jryR/1MOmf9Jlv/AM14+DP+afkvGO93+OvJH/Uw&#xA;6Z/0mW//ADXj4M/5p+S8Y73f468kf9TDpn/SZb/814+DP+afkvGO93+OvJH/AFMOmf8ASZb/APNe&#xA;Pgz/AJp+S8Y73f468kf9TDpn/SZb/wDNePgz/mn5Lxjvd/jryR/1MOmf9Jlv/wA14+DP+afkvGO9&#xA;3+OvJH/Uw6Z/0mW//NePgz/mn5LxjvR+ma3ouqrI2mX9tfrEQJTbTRzBS3TlwLUrTIShKPMUkEFG&#xA;5FLsVeL/APOSv+8Og/8AGW4/4jHmx7P5lozdHhObRx2UN+W/mhfKI81tHCukNCLgFpVWXgbg2w/d&#xA;n4t3Wq/zDpXfI8YumXCatJdD0TVNd1a10nSrdrrULx/Tt4FpUmlTUmgAABJJ2A3wk0gC0NeWk1ne&#xA;T2k4Amt5HilCsGXkjFWoykgio6jCqlih2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2Kvdv+cav94de/wCMtv8A8RkzV9ocw5GHq9ozXN7sVeL/APOSv+8Og/8AGW4/4jHm&#xA;x7P5lozdHh1m1ql5A12jSWqyIbiNDRmjDDmoPYkZtHHez+Zvzs8p64noXnlr67pNnbvHp2nTXSxR&#xA;25mWKKMQpDEo/dxxsasWZWY8WAAyoYiOqnPZAo9fs/Gynp/5qeQNMvri90rydb6fcTyfU5Jre/Cs&#xA;IOYZ/SrA3BJY+aM6/FuKEbUJxE9Wv80P5kvpvl9nv8nkes6idT1a81Bg6m7meYrLI0zjmxajSv8A&#xA;E533Y9cmA2lB4UOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KonS79tP1K2vlijna2&#xA;lWUQzDlGxQ14sNtjgISGaQ/mtAixrL5O8vXIjRV5zWZMjsOXKSSQOHdn571PYZHg8yy4vJK18+U8&#xA;wrrQ0LSk/wBGS2lsIrf0rV+FOUhjjZaNJxo/GnJSR3w8O1ItMl/NYenLC/lLy88DnlEn1BQYzQgl&#xA;SG6mo6jsO22Dg8yniYdq2oy6nql3qM0ccUt5M88kUK8IlaRixCLvRRXYZICmJe2f841f7w69/wAZ&#xA;bf8A4jJms7Q5hvw9XtGa5vdirxf/AJyV/wB4dB/4y3H/ABGPNj2fzLRm6PCc2jjuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV7t/zjV/vDr3/GW3/4jJmr&#xA;7Q5hyMPV7Rmub3Yq8X/5yV/3h0H/AIy3H/EY82PZ/MtGbo8JzaOO7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXu3/ONX+8Ovf8Zbf/AIjJmr7Q5hyMPV7R&#xA;mub3Yq8X/wCclf8AeHQf+Mtx/wARjzY9n8y0ZujwnNo47sVdirsVdirsVdirsVTDTdHmu/jY+nB/&#xA;N3P+rgJTSe2+k6fCPhiDH+Z/iP45G00iDb25FDElPDiMVQlzolhMDxT0n7Mmw/4HphtaY/f6dcWc&#xA;lJBVD9iQdD/bhBQhcKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXu3/ONX+8Ovf8Zbf/iMmavt&#xA;DmHIw9XtGa5vdirxf/nJX/eHQf8AjLcf8RjzY9n8y0ZujwnNo47sVdirsVdirsVXRQyzSpFCjSSy&#xA;EKkaAszMdgABuTirL9M/KjzxclJpdKkitvtN6jxRvQb04M4ff5YDJh4se9kFn5O8wTalBpa2MkM0&#xA;myeopWMKvVuXTio8MqnkERZbYES5PYvLv5beXNIhQzQLf3lAXuLhQwr/AJCGqqPx981OXVTl5Byo&#xA;4wGRPpmmvH6T2kLR9ODRoV+4jKOI97KmF+bfyq0q/t5LnRo1sr9QWWFdoZP8nj0Q+BG2ZeHVyBqW&#xA;4a5YweTxbUNPNZrK7jKSIxSRGFGV1ND9IObQG9w0EMLuYHt53hf7SGnz8DljBTxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2Kvdv+cav94de/4y2//EZM1faHMORh6vaM1ze7FXi//OSv+8Og/wDGW4/4&#xA;jHmx7P5lozdHhObRx3Yq7FXYq7FV0UUksqRRKXlkYKiKKszE0AAHc4q+ifyz/Lq28t2CXl7GsmuX&#xA;C8pJCAfRUj+6Q+P8xHX5ZWS4eTJfuZ1gand6jYjocBF80gkckZb31PhmO3Z/6/1zX59J1j8nYYNX&#xA;e0vmjcwHPdirxn849Jjtdet7+NeIv4j6ngZIiFJ/4Erm10U7jXc4+UbvHvMkQW6jkH7aUPzU/wBu&#xA;Z4aSlGFDsVdirsVdirsVdirsVdirsVdirsVdirsVe7f841f7w69/xlt/+IyZq+0OYcjD1e0Zrm92&#xA;KvF/+clf94dB/wCMtx/xGPNj2fzLRm6PD7Ozury4S2tYmmnkNEjQVJzaOMZACynt1+X3mm2tzO1q&#xA;JABVkidXcf7EdforgtqGogTzS/SLATCZpBtQxivZj1P0ZXklTclsiMjsjbMpII9xloKprpPlTXtW&#xA;iM1lal4Rt6rFUUn2LEV+jG2ueWMeZepflb5CsdJu/wBLa5LGdST/AHjtiapF2MjMRxL/AMtDt8+k&#xA;SXHyZwdg9bR0dQyMGU7hgag5BqXYq7FXYqrW908W32k/l8PlmNm0wnuNi5WHUmGx3CPiuIpfsnfu&#xA;p2Oa3JilDmHZY8sZ8i8o/Oy9jk1HTbJSC9vFJK9Oo9ZlAB/5FZnaCOxLDKXivmZwZ4U7qpJ+k/2Z&#xA;sQ0FJsKHYqyjy9+Wnm/XoVuLSz9K0b7FzcMIkYeK1+Jh7gUwEsJZAERq/wCUvnnTIzKbH63Eu7Pa&#xA;MJSP9htJ9y48QQMsSxBlZGKOCrKaMp2II6gjC2NYq9F8n/kvrWswJe6pKdLs3AaNGXlO6nvwJHAH&#xA;/K39siZNM8wHJmD/AJA+WzFRNRvFl7u3pMvt8IQH8cHE1+OWKa/+RfmOxR5tLuI9TiUV9KnozU9l&#xA;Ysp/4L6MIk2Rzg83nNzbXNrO9vcxPBPGeMkUilXU+BU0IyTdanirsVdiqIOnagsHrtayiClfVKNw&#xA;p48qUxW3t3/ONX+8Ovf8Zbf/AIjJmr7Q5hyMPV7Rmub3YqxXz35V0HzFHawaxEXigWWSORXaMoTw&#xA;BaoIHTxzYaDr8HC1kzGqefaP5T0LQp7g6YJHWVqLNOVaQIP2QQqUWu/T55s7dTlymaaEgAkmgHU4&#xA;Gp5lql0l1qNxcooVJXJUAUqBsCfcgb5jyNl22OPDEBH+W/J/lfWI7q5v3uDfRuvC2jZUiZGH2m+E&#xA;tsVNaEdstxy2prz5TDkn/mXUBpdhbWtlSJiy+mq7BY4qGm3vQffjOVONp8fGSSndpcx3NtFcR/Yl&#xA;UMPao6fRkwXHlGjSIimmiblE7RsepUkH8MUAplbeY72PaYLOvv8AC33jb8MFMxMqfmnzjbWvl26k&#xA;gZo72VfRgU1BDPsWDCo+EVI+WRlsG/DUpJn5R1r9MeX7S8Zqz8fTuOlfVT4WJp05fa+nEGwnJGjS&#xA;c4WDvfw3GAi0g0wzzh+X7azdvqNpdFL1wBJHOS0bBQFFGFSuw98YxERQciOoP8W7x3zN+X3ni2vJ&#xA;ZptKmlhrRJLYCccR3pHyYfSMtBDaMsT1SnS/JfmvVJhFZaVcuSaF2jMcY/1pH4oPpONpMwOr17yN&#xA;+TGn6W0d/rxS+v1o0dsN7eM+9R+8b57ex65Eyceea+T0zItDeKsa82fl95b8yxMby3EN6R8F9CAs&#xA;oNNuR/bHs34YQWyGQxY55I/JvTtEvDf6tKmo3kTk2iBSIUAPwuVP2np47L79cJkynmJ5PSMi0qVv&#xA;dW9yrNBIJFR3icjs8bFWU/IjFJCrihj3mzyL5f8AM9vxv4eN0opDexUWZPav7S+zYQWcJmLwnzj+&#xA;WXmLy0zzPH9c0wE8b6EEgD/i1dyh/D3yYLlQyCSF8l+RNZ81Xnp2q+jZRn/Sb5wfTT2H8z+Cj6aY&#xA;k0mcxF7z5Y/Ljyr5ejRra0W4vAPivbgCSSvitRRP9iMgS4sshLJ2UMCrAFSKEHcEHA1pV5I8q22g&#xA;6xr0lmFSz1Fre4jhUUEbUkDqAP2a7j50zX6/+F2mjnYLL817mOxVinnqR1NlGGIRxKXA70MdK5sd&#xA;B/F8HWdpco/FimbF1SX66LxtMmis4zJNMPToKCit9o7kdtsEuTZhrissCu9Lv7MxrcwmMy1EYJBr&#xA;SlehPjlBiQ7OOSMuSdeX9L1uw1OOZ7ZhC/7uY1X7Ld+vY0OTiCC4+bJCUatb5ts7t7/6w7xmMlYo&#xA;Yw1XC0JqRTpWuMwnTSFUEboeqw6bYtbXMgm4OTF6VTQHcj4gg6++MZAMcuCUzYFIiXzagJENuSOz&#xA;O1PwAP68TlQNGepQUvmfUnFE9OP3Van/AIYtkTkLaNJAJZf69dyqY5p2kqKFBRRvtvxAwcRLbHDC&#xA;PII7y3+YWsaNJwYC6sTSts5IK02+B9+P4jCJUxniBeoaB538v62FS3n9K6O31WaiSV/yd6N/sTlg&#xA;kC40sZCf4Wt2KuxVgXmnzodO856baLJxtLX/AI6AqQD64p8Q7+mlHGQMt2+GO4lllzr2nQ7K5mbw&#xA;j3H/AARoPuyynGMwEtl8z3JI9KFEHfkS36uONMTkUh5k1D+WM/7E/wBcaRxlG2fmWFyFuk9I/wC/&#xA;F3X6R1H440yE05R0dQ6MGVtwwNQcDNL/ADHq66Rol3qBpyhQ+kD3kb4UH/BEVwE0yhGzTAvym11/&#xA;rd5pU7ljcVuYSx3Mg2k9yWWh+jIQLfnj1en5Y4yWalrkNnIIlT1ZR9sV4hQfeh3w0xlKllrr9jcD&#xA;05x6JbYh90IPbl/UY0omEwtLW0tYFhtIY4IBUrHEqonxGpICgDfAzJQGj+YbPVL3UrWD7enTei/+&#xA;UKU5D/Zqw+j3wAspQIARF3q9hbVDycnH+60+Jqjt4D6cNNZkAr+WNTN9c3p9P01jWIKK1JqZOuYG&#xA;v/h+LsOz5XxfBP8ANc7F2KsO/MG4ghfT2mkWMETgFyFr/d+ObHQH6vg63tCJPDXmwebzFpcVaSGR&#xA;h+yik/iaD8czzMOBHTTPRBTebEBIhtyR2Z2p+Ar+vIHK3R0Z6lJtT1GfUXhedVX0KmMICPtU61J8&#xA;MgZkuTjwCHLqsmv72eolndweqljx+7pgMizjiiOQQ+Bm7FXEgCp2A74qgri8LVWPZe7dzhQShMUO&#xA;xV2Ksl0X8wvM2lARrcfWrcdIbmsgHyaocfKtMkJFqliiWc6R+beh3NE1GGSwk7uP30f3qA//AAuS&#xA;E2mWA9E6uPOelNA76dIt66KWPpmtNq04j4ifbJholYNPG9SGq3uqSz3NvL9cu3aX0+DcjUk/CpFa&#xA;DKSC50ZRA57M40Ga5k0uEXMbxTxj03EilSeOwPxeIpl8eTrcwAka5Ilr23W9SzLfv3QyBf8AJBp/&#xA;n8sNseE1fRXxYuxVF2GpXNk9YzWMmrxHof6H3xZCVMc/M/zNHexWem29QFrPdKezbqi1+XI/SMqm&#xA;52nF7sM0bU5dL1W11CKvK3kDlRtyXoy/7JajIAuRIWKe+y6lbLpy3yMHikQPCf5+YqlPnlwdfLZh&#xA;7u8js7mrsSzHxJ3OScdB32p2NinO6mWPuFO7H5KNzgJpnCBlyY5cfmRrURMWlP8AVrcdC6rIx+hg&#xA;yr9GVmbnY9PXNJtN8y6hp8s0sCx856iUlSKg0qPgK7bVyIlTZPEJJtB59lAAntFY92Ryv4EN+vJ+&#xA;I450ncXpH5V63a6qdUaBHT0hbhw4A+16vShPhmBrpXXxczRYjC7Z9mA57sVeZfnT10b/AKOf+ZWZ&#xA;mk6tOXo8yzMaXYq7FXYq7FXMwUFmNAOpxVLri5aU0GyDt44WJKhirsVdirsVdirsVbVmVgykqw3B&#xA;GxGKEZDrGoxXUV0ZmkmgqI2lPPYggjf54eIsDiiRSeW/ny6Xa4tUk942Kfr55MZHHlpB0KB/Taza&#xA;+motIYUVgQGBNEGxTavUVwcW9tnhVDhZfD5k0OY0S8Qf69U/4mFy3iDhHBMdEXFfWM391cRSf6jq&#xA;36jhtgYEcwr4sWK6v5WuJ5rq/e6BJ5ScOB+yo2WtewFMrlDq5mPUAARpKtE0C31C3knnvVs44241&#xA;ZQwOwPdk8cgI25GTNwmqZAvmmy03TINOlvPr/wBUDLCIV24kkirE8dq02OwyYkA40sUshuqCR3/n&#xA;TUriq2yraxnuPif/AII7fcMichbYaWI57pDJLJK5kkcu7bs7Ekn5k5ByQKWYpdirsVetfkN01z/o&#xA;1/5nZh6vo34er1jMJvdirzL86eujf9HP/MrMzSdWnL0eZZmNLsVdirsVcSAKnYDFUuubgytQbIOn&#xA;vhYkqGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kt1I74obMjkAFiQOgJxtaW4pdirsVdirsVdirsVe&#xA;tfkN01z/AKNf+Z2Yer6N+Hq9YzCb3Yq8y/Onro3/AEc/8yszNJ1acvR5lmY0uxV2KuxVBXlxyPpq&#xA;fhH2j4nCglCYodirsVdirsVdiqeaPxt9D1PUooIp7yCa2hQzRpOscMwmMknpSBkrzjjQMQacvEjF&#xA;ITOXTtOuvL8Wv6lbmOZUKPa2XpWvrqZfTiuaCN441BDxtxj+IqO5JwJWXvl7QdNggvLmO8uoL6SI&#xA;W1tDLHFNCj28NwRKxilDswuQsdFXlxLbVoFaROoeUNEsbm00pzdS6hcxXrG/Eka2ytaXVzArel6b&#xA;MU42vJz6u1a9sbWkn1zSNOtrCGewSWQKY4ry4kmWqTtGWaJ7YxRSxNyR6EsykDYmhwoISLFDsVdi&#xA;rsVdirsVdirsVdirsVdirsVetfkN01z/AKNf+Z2Yer6N+Hq9YzCb3Yq8y/Onro3/AEc/8yszNJ1a&#xA;cvR5lmY0uxV2KqF3P6acV+23T2GKCl2FDsVdirsVdirsVdirI7byz540+RLnTrW7WWRF4y2Jdn4S&#xA;qGpWElqEEV7YE0UUfLv5nx3I1I2uqR3c0PL60TKszQhli3YkPxHJRTw9sU0UKlr+YFi810g1O1nu&#xA;ZgtwytNHNJMEaUF1BEjHhzYMR4++KN0XdWX5krotjYtY6ja6TFaSCONEnjhlgMkty7yrXgSeZ7Cq&#xA;hfmVO6GtovzGmiHofpYw2YCA8rgJFyAVUBJCqWFFVe+wGKN0JrGiebER77Wba6Qoqq8l7yWUKpWN&#xA;QRKedBUBdvl0wqQUlxQ7FXYq7FXYq7FXYq7FXYq7FXYq9a/Ibprn/Rr/AMzsw9X0b8PV6xmE3uxV&#xA;5l+dPXRv+jn/AJlZmaTq05ejzLMxpdirTuEUsegxVK5JGkcsepwsVmKuxV2KuxV2KuxV2KpnJ5n8&#xA;xyQC3fU7owLxpH6rhfgIK7A9iK/PfritlzeZvMbMrHVLvkq8A3ryV41rSvLFbK7/ABT5i+qJa/pC&#xA;YRx3H1xHDUlE/Hhz9b+82UmnxUFT44psqc/mPzBcMzT6ldStIrLIzzSEuHNWDkmrcid64oty+YvM&#xA;A4U1K6pHGsEYM0hCxRghEUE7KnI8R27Yra6+8ya7f2MVje3slxbQszoshDNVqV5ORzYbbBiQO2K2&#xA;lmKuxV2KuxV2KuxV2KuxV2KuxV2KvWvyG6a5/wBGv/M7MPV9G/D1esZhN7sVeZfnT10b/o5/5lZm&#xA;aTq05ejzLMxpdiqCvpqsIx0G7fPCgoTFDsVdirsVdirsVdirsVdiqIsrQ3UrRiWOHjHJLzmbip9J&#xA;C/EHf4m40UdzirJYfIlnTTpbnzFp0FrfoGdxIHeFjGX4yR1FOnGtevbBbLhav/y8ns9Our39PaLc&#xA;fVE9R7aC85TsKgUjQoOR37HG0cLE8KHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXrX5DdNc/wCjX/md&#xA;mHq+jfh6vWMwm92KvMvzp66N/wBHP/MrMzSdWnL0eZZmNK2WQRxlz26fPFUqYliSdydzhYtYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq9a/Ibprn/Rr/wAzsw9X&#xA;0b8PV6xmE3uxVDXul6Zf8Pr1pDdenX0/XjSTjypXjyBpWgyQkRyKCAUL/hfyz/1aLL/pHi/5pw+J&#xA;LvKOEdzTeVfK7CjaPYkeBtoj/wAa4+JLvK8I7lv+EfKf/VlsP+kWH/mnHxJd5XhHc7/CPlP/AKst&#xA;h/0iw/8ANOPiS7yvCO53+EfKf/VlsP8ApFh/5px8SXeV4R3O/wAI+U/+rLYf9IsP/NOPiS7yvCO5&#xA;3+EfKf8A1ZbD/pFh/wCacfEl3leEdzv8I+U/+rLYf9IsP/NOPiS7yvCO53+EfKf/AFZbD/pFh/5p&#xA;x8SXeV4R3O/wj5T/AOrLYf8ASLD/AM04+JLvK8I7nf4R8p/9WWw/6RYf+acfEl3leEdzv8I+U/8A&#xA;qy2H/SLD/wA04+JLvK8I7nf4R8p/9WWw/wCkWH/mnHxJd5XhHc7/AAj5T/6sth/0iw/804+JLvK8&#xA;I7nf4R8p/wDVlsP+kWH/AJpx8SXeV4R3O/wj5T/6sth/0iw/804+JLvK8I7nf4R8p/8AVlsP+kWH&#xA;/mnHxJd5XhHc7/CPlP8A6sth/wBIsP8AzTj4ku8rwjud/hHyn/1ZbD/pFh/5px8SXeV4R3O/wj5T&#xA;/wCrLYf9IsP/ADTj4ku8rwjud/hHyn/1ZbD/AKRYf+acfEl3leEdzv8ACPlP/qy2H/SLD/zTj4ku&#xA;8rwjud/hHyn/ANWWw/6RYf8AmnHxJd5XhHc7/CPlP/qy2H/SLD/zTj4ku8rwjud/hHyn/wBWWw/6&#xA;RYf+acfEl3leEdzv8I+U/wDqy2H/AEiw/wDNOPiS7yvCO53+EfKf/VlsP+kWH/mnHxJd5XhHc7/C&#xA;PlP/AKsth/0iw/8ANOPiS7yvCO5F2GkaTp3P9H2UFn6tPV+rxJFy4148uAFaVNMBkTzKQAEXkUux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2Kv/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:838DB704DA86E811B7AE8383BB5A85D0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:848DB704DA86E811B7AE8383BB5A85D0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:a2b8dcac-7818-4055-b6a1-3efa106255e8</stRef:instanceID>
            <stRef:documentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2400.000000</stDim:w>
            <stDim:h>1800.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Quicksand-Medium</stFnt:fontName>
                  <stFnt:fontFamily>Quicksand</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 3.000</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Quicksand-Medium.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Quicksand-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Quicksand</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 3.000</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Quicksand-Regular.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Quicksand-Light</stFnt:fontName>
                  <stFnt:fontFamily>Quicksand</stFnt:fontFamily>
                  <stFnt:fontFace>Light</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 3.000</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Quicksand-Light.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1800 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1800 li
2400 1800 li
2400 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2400 1800 mo
0 1800 li
0 0 li
2400 0 li
2400 1800 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.172549 .109804 .337255 0 cmyk
f
2284 1584 mo
116.001 1584 li
116.001 216 li
2284 216 li
2284 1584 li
.92549 .784314 .482353 .513725 cmyk
f
1126.97 876.906 mo
1119.41 874.53 1112.17 872.109 1105.24 869.661 cv
1091.17 861.588 1076.91 852.498 1061.46 843.48 cv
1077.06 819.225 1086.14 790.38 1086.14 759.402 cv
1086.14 673.407 1016.43 603.702 930.438 603.702 cv
875.214 603.702 826.74 632.475 799.101 675.828 cv
770.202 663.768 746.055 658.197 725.346 657.594 cv
762.822 582.237 840.564 530.433 930.438 530.433 cv
1056.9 530.433 1159.41 632.943 1159.41 759.402 cv
1159.41 802.368 1147.55 842.553 1126.97 876.906 cv
.756863 .611765 .431373 .243137 cmyk
f
930.44 603.701 mo
875.217 603.701 826.744 632.476 799.103 675.824 cv
803.424 677.628 807.813 679.524 812.351 681.622 cv
850.809 699.414 922.653 779.541 1016.56 820.336 cv
1032.98 827.467 1047.69 835.445 1061.46 843.478 cv
1077.05 819.223 1086.14 790.38 1086.14 759.399 cv
1086.14 673.407 1016.43 603.701 930.44 603.701 cv
cp
.172549 .109804 .337255 0 cmyk
f
434.972 866.807 mo
438.716 860.948 442.441 855.37 446.222 850.123 cv
430.159 853.193 414.57 855.789 399.456 857.927 cv
413.275 891.997 li
422.249 883.647 429.582 875.239 434.972 866.807 cv
cp
.419608 .0588235 .196078 0 cmyk
f
160.569 875.672 mo
165.379 868.966 170.104 862.565 174.776 856.524 cv
153.637 852.689 134.093 847.914 116 842.532 cv
116 920.382 li
133.956 906.558 149.082 891.687 160.569 875.672 cv
cp
f
1789.9 1106.96 mo
1797.93 1100.82 1805.58 1094.57 1812.8 1088.23 cv
1755.7 1088.23 li
1766.85 1094.83 1778.23 1101.12 1789.9 1106.96 cv
cp
f
2264.97 850.263 mo
2235.4 787.905 2123.44 839.611 2083.66 874.093 cv
2074.74 881.819 2058.12 895.331 2036.68 912.688 cv
1955.06 869.412 1885.39 815.725 1848.62 801.431 cv
1693.11 740.962 1669.93 824.233 1588.68 873.581 cv
1548.71 840.651 1460.79 795.997 1419.86 800.828 cv
1343.98 809.781 1304.32 891.646 1210.34 897.265 cv
1178.79 891.589 1151.21 884.511 1126.97 876.903 cv
1119.41 874.533 1112.17 872.11 1105.25 869.661 cv
1091.17 861.592 1076.91 852.501 1061.46 843.478 cv
1047.69 835.445 1032.98 827.467 1016.56 820.336 cv
922.653 779.541 850.809 699.414 812.351 681.622 cv
807.813 679.524 803.424 677.628 799.103 675.824 cv
770.204 663.765 746.052 658.196 725.348 657.598 cv
634.851 654.988 610.003 747.132 540.965 805.911 cv
595.021 814.41 725.692 855.812 800.863 888.493 cv
823.173 833.5 li
842.169 880.328 li
850.902 901.854 li
829.313 901.854 li
839.881 907.333 847.839 912.294 852.35 916.478 cv
858.862 919.015 865.469 923.005 873.684 928.923 cv
889.475 940.296 985.363 992.11 1137.43 1039.91 cv
1160.06 1026.14 1183.76 1013.13 1207.85 1001.16 cv
1246.75 905.253 li
1273.59 971.423 li
1342.59 943.296 1409.26 925.813 1456.81 925.813 cv
1533.16 925.813 1601.66 981.335 1678.66 1036.82 cv
1740.95 883.249 li
1821.06 1080.75 li
1843.34 1059.94 1860.72 1038.17 1871.07 1015.6 cv
1893.86 965.874 1915.27 932.03 1953.6 939.282 cv
1967.24 941.862 1992.96 953.69 2023.36 970.31 cv
2039.27 979.009 2056.46 989.022 2073.87 999.71 cv
2085.51 995.79 2097.45 996.358 2118.29 998.827 cv
2118.29 988.802 li
2101.71 988.802 li
2123.16 935.944 li
2144.6 988.802 li
2126.62 988.802 li
2126.62 995.966 li
2154.61 985.788 2181.33 975.646 2206.18 965.644 cv
2234.97 954.044 2261.23 942.634 2284 931.56 cv
2284 879.153 li
2276.01 869.661 2269.6 860.028 2264.97 850.263 cv
cp
f
1657.8 1088.23 mo
1678.66 1036.82 li
1601.66 981.335 1533.16 925.813 1456.81 925.813 cv
1409.26 925.813 1342.59 943.296 1273.59 971.423 cv
1300.83 1038.57 li
1255.49 1038.57 li
1255.49 1072.81 li
1295.85 1082.67 1338.8 1091.76 1384.09 1099.58 cv
1384.09 1090.33 li
1362.59 1090.33 li
1390.42 1021.72 li
1418.25 1090.33 li
1394.92 1090.33 li
1394.92 1101.43 li
1399.47 1102.19 1404.04 1102.94 1408.63 1103.67 cv
1534.59 1124.66 1636.34 1133.29 1722.05 1128.53 cv
1722.05 1088.23 li
1657.8 1088.23 li
cp
.670588 .211765 .368627 .00392157 cmyk
f
1192.67 1038.57 mo
1207.85 1001.16 li
1183.76 1013.13 1160.06 1026.14 1137.43 1039.91 cv
1167.63 1049.4 1200.02 1058.73 1234.46 1067.56 cv
1234.46 1038.57 li
1192.67 1038.57 li
cp
f
413.275 891.997 mo
439.923 957.688 li
370.222 957.688 li
370.222 994.765 li
375.168 993.763 380.093 992.769 385.002 991.778 cv
385.302 991.718 385.604 991.655 385.904 991.597 cv
389.559 990.858 393.195 990.126 396.826 989.394 cv
398 989.157 399.174 988.923 400.345 988.685 cv
403.646 988.021 406.935 987.358 410.216 986.698 cv
411.75 986.392 413.281 986.083 414.81 985.776 cv
418.024 985.132 421.232 984.487 424.425 983.849 cv
425.733 983.585 427.033 983.323 428.336 983.063 cv
431.665 982.396 434.994 981.729 438.3 981.067 cv
438.883 980.95 439.459 980.837 440.041 980.72 cv
446.726 979.384 453.354 978.06 459.936 976.749 cv
461.542 976.431 463.156 976.108 464.755 975.788 cv
467.53 975.237 470.279 974.69 473.032 974.142 cv
474.721 973.808 476.413 973.472 478.094 973.138 cv
481.024 972.558 483.936 971.979 486.842 971.403 cv
488.43 971.089 490.015 970.776 491.597 970.462 cv
494.354 969.917 497.104 969.372 499.837 968.833 cv
500.298 968.743 500.766 968.649 501.226 968.558 cv
501.226 946.878 li
465.148 946.878 li
511.838 831.777 li
558.53 946.878 li
519.388 946.878 li
519.388 964.981 li
524.638 963.95 529.841 962.931 534.995 961.923 cv
535.894 961.747 536.802 961.567 537.699 961.392 cv
540.382 960.868 543.034 960.353 545.691 959.833 cv
547.277 959.522 548.868 959.212 550.446 958.905 cv
552.935 958.421 555.403 957.94 557.867 957.464 cv
559.632 957.12 561.39 956.778 563.14 956.438 cv
565.425 955.995 567.705 955.554 569.966 955.116 cv
571.838 954.753 573.696 954.396 575.553 954.038 cv
577.837 953.597 580.122 953.157 582.382 952.72 cv
583.969 952.415 585.532 952.114 587.105 951.812 cv
591.009 951.062 594.873 950.321 598.699 949.589 cv
600.822 949.185 602.955 948.774 605.055 948.376 cv
606.986 948.007 608.886 947.646 610.797 947.282 cv
612.724 946.917 614.653 946.55 616.557 946.187 cv
618.458 945.827 620.339 945.472 622.217 945.118 cv
624.148 944.751 626.07 944.388 627.975 944.03 cv
629.808 943.685 631.63 943.343 633.442 942.999 cv
635.336 942.646 637.214 942.294 639.083 941.942 cv
640.833 941.616 642.587 941.286 644.316 940.964 cv
646.381 940.579 648.415 940.202 650.448 939.823 cv
651.927 939.548 653.427 939.267 654.889 938.997 cv
658.198 938.386 661.463 937.782 664.684 937.19 cv
666.146 936.921 667.572 936.659 669.013 936.396 cv
670.912 936.05 672.808 935.702 674.673 935.362 cv
676.25 935.075 677.799 934.794 679.353 934.513 cv
681.104 934.192 682.845 933.876 684.567 933.565 cv
686.006 933.308 687.435 933.05 688.853 932.796 cv
690.628 932.476 692.378 932.163 694.119 931.853 cv
695.53 931.601 696.942 931.349 698.331 931.099 cv
700.112 930.782 701.856 930.476 703.599 930.167 cv
704.814 929.954 706.045 929.733 707.241 929.526 cv
710.068 929.028 712.847 928.542 715.57 928.069 cv
716.5 927.909 717.395 927.757 718.314 927.599 cv
720.193 927.272 722.065 926.95 723.893 926.64 cv
725.002 926.45 726.084 926.269 727.174 926.081 cv
728.778 925.812 730.369 925.542 731.931 925.278 cv
733.016 925.097 734.09 924.917 735.155 924.739 cv
736.684 924.483 738.188 924.235 739.674 923.991 cv
740.692 923.825 741.713 923.655 742.709 923.493 cv
744.241 923.241 745.732 923.001 747.215 922.765 cv
748.089 922.624 748.983 922.478 749.84 922.343 cv
752.096 921.981 754.299 921.634 756.433 921.306 cv
756.836 921.241 757.211 921.185 757.609 921.124 cv
759.37 920.851 761.099 920.587 762.773 920.335 cv
763.494 920.228 764.184 920.128 764.888 920.022 cv
766.202 919.829 767.497 919.638 768.754 919.456 cv
769.492 919.349 770.213 919.245 770.932 919.144 cv
772.111 918.976 773.26 918.815 774.385 918.663 cv
775.064 918.569 775.743 918.476 776.402 918.388 cv
777.566 918.229 778.686 918.083 779.786 917.942 cv
780.323 917.872 780.88 917.798 781.403 917.731 cv
782.988 917.532 784.519 917.345 785.963 917.177 cv
788.545 916.853 791.002 916.542 793.378 916.243 cv
795.367 915.991 797.31 915.747 799.164 915.517 cv
799.308 915.499 799.444 915.481 799.586 915.464 cv
801.306 915.253 802.957 915.05 804.566 914.856 cv
804.908 914.815 805.255 914.774 805.59 914.733 cv
807.348 914.526 809.055 914.329 810.691 914.151 cv
810.739 914.146 li
812.371 913.966 813.934 913.806 815.456 913.659 cv
815.626 913.642 815.802 913.624 815.972 913.606 cv
816.268 913.579 816.578 913.548 816.871 913.521 cv
816.871 901.854 li
795.443 901.854 li
800.863 888.493 li
725.692 855.812 595.021 814.41 540.965 805.911 cv
536.243 805.167 532.077 804.663 528.612 804.452 cv
490.176 802.099 467.301 820.875 446.222 850.123 cv
442.441 855.37 438.716 860.948 434.972 866.807 cv
429.582 875.239 422.249 883.647 413.275 891.997 cv
cp
f
827.658 901.854 mo
827.658 912.823 li
829.441 912.774 831.15 912.765 832.797 912.804 cv
832.853 912.804 li
840.115 912.976 846.194 914.075 852.35 916.478 cv
847.839 912.294 839.881 907.333 829.313 901.854 cv
827.658 901.854 li
cp
f
310.273 957.688 mo
273.624 957.688 li
322.16 838.035 li
301.447 822.056 284.098 810.531 273.057 806.127 cv
235.894 791.303 206.547 815.444 174.776 856.524 cv
170.104 862.565 165.379 868.966 160.569 875.672 cv
149.082 891.687 133.956 906.558 116 920.382 cv
116 1035.86 li
116 1046.91 li
183.236 1032.96 250.942 1019.02 316.314 1005.71 cv
317.076 1005.55 317.84 1005.39 318.602 1005.24 cv
322.513 1004.44 326.413 1003.65 330.305 1002.86 cv
331.223 1002.67 332.14 1002.49 333.059 1002.3 cv
334.663 1001.97 336.272 1001.65 337.874 1001.32 cv
337.874 957.688 li
310.273 957.688 li
cp
f
2126.62 995.966 mo
2126.62 999.847 li
2130.15 1000.29 2133.88 1000.76 2137.9 1001.27 cv
2164.76 1004.38 2216.36 1013.23 2284 1025.89 cv
2284 931.56 li
2261.23 942.634 2234.97 954.044 2206.18 965.644 cv
2181.33 975.646 2154.61 985.788 2126.62 995.966 cv
cp
f
2023.36 970.31 mo
1992.96 953.69 1967.24 941.862 1953.6 939.282 cv
1915.27 932.03 1893.86 965.874 1871.07 1015.6 cv
1860.72 1038.17 1843.34 1059.94 1821.06 1080.75 cv
1824.1 1088.23 li
1812.8 1088.23 li
1805.58 1094.57 1797.93 1100.82 1789.9 1106.96 cv
1778.23 1101.12 1766.85 1094.83 1755.7 1088.23 cv
1754.4 1088.23 li
1754.4 1118.44 li
1754.4 1126.02 li
1757.98 1125.66 1761.54 1125.28 1765.06 1124.86 cv
1776.87 1123.48 1788.36 1121.79 1799.57 1119.82 cv
1944.02 1073.22 2034.85 1024.06 2050.18 1013.01 cv
2059.39 1006.38 2066.57 1002.17 2073.87 999.71 cv
2056.46 989.022 2039.27 979.009 2023.36 970.31 cv
cp
f
413.275 891.997 mo
399.456 857.927 li
356.773 752.705 li
322.16 838.035 li
273.624 957.688 li
310.273 957.688 li
337.874 957.688 li
337.874 1001.32 li
340.217 1000.84 342.554 1000.37 344.89 999.897 cv
345.274 999.817 345.658 999.741 346.043 999.663 cv
354.148 998.019 362.21 996.384 370.222 994.765 cv
370.222 957.688 li
439.923 957.688 li
413.275 891.997 li
cp
.74902 .537255 .564706 .345098 cmyk
f
1821.06 1080.75 mo
1740.95 883.249 li
1678.66 1036.82 li
1657.8 1088.23 li
1722.05 1088.23 li
1722.05 1128.53 li
1733.1 1127.92 1743.87 1127.08 1754.4 1126.02 cv
1754.4 1118.44 li
1754.4 1088.23 li
1755.7 1088.23 li
1812.8 1088.23 li
1824.1 1088.23 li
1821.06 1080.75 li
cp
f
1273.59 971.423 mo
1246.75 905.253 li
1207.85 1001.16 li
1192.67 1038.57 li
1234.46 1038.57 li
1234.46 1067.56 li
1241.38 1069.33 1248.4 1071.08 1255.49 1072.81 cv
1255.49 1038.57 li
1300.83 1038.57 li
1273.59 971.423 li
cp
f
1390.42 1021.72 mo
1362.59 1090.33 li
1384.09 1090.33 li
1384.09 1099.58 li
1387.69 1100.21 1391.29 1100.83 1394.92 1101.43 cv
1394.92 1090.33 li
1418.25 1090.33 li
1390.42 1021.72 li
cp
f
511.838 831.777 mo
465.148 946.878 li
501.226 946.878 li
501.226 968.558 li
502.513 968.304 503.785 968.054 505.066 967.802 cv
507.79 967.267 510.511 966.728 513.209 966.196 cv
514.43 965.956 515.634 965.72 516.848 965.481 cv
517.696 965.315 518.543 965.147 519.388 964.981 cv
519.388 946.878 li
558.53 946.878 li
511.838 831.777 li
cp
f
842.169 880.328 mo
823.173 833.5 li
800.863 888.493 li
795.443 901.854 li
816.871 901.854 li
816.871 913.521 li
819.666 913.263 822.271 913.069 824.737 912.944 cv
824.964 912.933 li
825.881 912.886 826.779 912.851 827.658 912.823 cv
827.658 901.854 li
829.313 901.854 li
850.902 901.854 li
842.169 880.328 li
cp
f
2123.16 935.944 mo
2101.71 988.802 li
2118.29 988.802 li
2118.29 998.827 li
2120.91 999.138 2123.69 999.481 2126.62 999.847 cv
2126.62 995.966 li
2126.62 988.802 li
2144.6 988.802 li
2123.16 935.944 li
cp
f
762.773 920.335 mo
761.099 920.587 759.37 920.851 757.609 921.124 cv
759.37 920.851 761.099 920.587 762.773 920.335 cv
cp
.756863 .545098 .568627 .368627 cmyk
f
491.597 970.462 mo
490.015 970.776 488.43 971.089 486.842 971.403 cv
488.43 971.089 490.015 970.776 491.597 970.462 cv
cp
f
747.215 922.765 mo
745.732 923.001 744.241 923.241 742.709 923.493 cv
744.241 923.241 745.732 923.001 747.215 922.765 cv
cp
f
756.433 921.306 mo
754.299 921.634 752.096 921.981 749.84 922.343 cv
752.094 921.981 754.299 921.634 756.433 921.306 cv
cp
f
537.699 961.392 mo
536.802 961.567 535.894 961.747 534.995 961.923 cv
535.894 961.747 536.802 961.567 537.699 961.392 cv
cp
f
587.105 951.812 mo
585.532 952.114 583.969 952.415 582.382 952.72 cv
583.969 952.415 585.532 952.114 587.105 951.812 cv
cp
f
627.975 944.03 mo
626.07 944.388 624.148 944.751 622.217 945.118 cv
624.148 944.751 626.07 944.388 627.975 944.03 cv
cp
f
550.446 958.905 mo
548.868 959.212 547.277 959.522 545.691 959.833 cv
547.277 959.522 548.868 959.212 550.446 958.905 cv
cp
f
650.448 939.823 mo
648.415 940.202 646.381 940.579 644.316 940.964 cv
646.381 940.579 648.415 940.202 650.448 939.823 cv
cp
f
616.557 946.187 mo
614.653 946.55 612.724 946.917 610.797 947.282 cv
612.724 946.917 614.653 946.55 616.557 946.187 cv
cp
f
764.888 920.022 mo
766.202 919.829 767.497 919.638 768.754 919.456 cv
767.497 919.638 766.202 919.829 764.888 920.022 cv
cp
f
639.083 941.942 mo
637.214 942.294 635.336 942.646 633.442 942.999 cv
635.336 942.646 637.214 942.294 639.083 941.942 cv
cp
f
739.674 923.991 mo
738.188 924.235 736.684 924.483 735.155 924.739 cv
736.684 924.483 738.188 924.235 739.674 923.991 cv
cp
f
605.055 948.376 mo
602.955 948.774 600.822 949.185 598.699 949.589 cv
600.822 949.185 602.955 948.774 605.055 948.376 cv
cp
f
499.837 968.833 mo
501.587 968.487 503.325 968.146 505.066 967.802 cv
503.785 968.054 502.513 968.304 501.226 968.558 cv
500.766 968.649 500.298 968.743 499.837 968.833 cv
cp
f
694.119 931.853 mo
692.378 932.163 690.628 932.476 688.853 932.796 cv
690.628 932.476 692.378 932.163 694.119 931.853 cv
cp
f
478.094 973.138 mo
476.413 973.472 474.721 973.808 473.032 974.142 cv
474.722 973.808 476.413 973.472 478.094 973.138 cv
cp
f
703.599 930.167 mo
701.856 930.476 700.112 930.782 698.331 931.099 cv
700.112 930.782 701.856 930.476 703.599 930.167 cv
cp
f
684.567 933.565 mo
682.845 933.876 681.104 934.192 679.353 934.513 cv
681.104 934.192 682.847 933.876 684.567 933.565 cv
cp
f
664.684 937.19 mo
661.463 937.782 658.198 938.386 654.889 938.997 cv
658.198 938.386 661.463 937.782 664.684 937.19 cv
cp
f
674.673 935.362 mo
672.808 935.702 670.912 936.05 669.013 936.396 cv
670.912 936.05 672.808 935.702 674.673 935.362 cv
cp
f
575.553 954.038 mo
573.696 954.396 571.838 954.753 569.966 955.116 cv
571.84 954.753 573.696 954.396 575.553 954.038 cv
cp
f
563.14 956.438 mo
561.39 956.778 559.632 957.12 557.867 957.464 cv
559.63 957.12 561.39 956.778 563.14 956.438 cv
cp
f
723.893 926.64 mo
722.065 926.95 720.193 927.272 718.314 927.599 cv
720.193 927.272 722.065 926.95 723.893 926.64 cv
cp
f
731.931 925.278 mo
730.369 925.542 728.778 925.812 727.174 926.081 cv
728.778 925.812 730.369 925.542 731.931 925.278 cv
cp
f
715.57 928.069 mo
712.847 928.542 710.068 929.028 707.241 929.526 cv
710.067 929.028 712.847 928.544 715.57 928.069 cv
cp
f
779.786 917.942 mo
778.686 918.083 777.566 918.229 776.402 918.388 cv
777.566 918.229 778.686 918.083 779.786 917.942 cv
cp
f
785.963 917.177 mo
784.519 917.345 782.988 917.532 781.403 917.731 cv
782.988 917.532 784.519 917.345 785.963 917.177 cv
cp
f
799.586 915.464 mo
801.306 915.253 802.957 915.05 804.566 914.856 cv
802.957 915.05 801.306 915.253 799.586 915.464 cv
cp
f
799.164 915.517 mo
797.31 915.747 795.367 915.991 793.378 916.243 cv
795.37 915.991 797.307 915.747 799.164 915.517 cv
cp
f
774.385 918.663 mo
773.26 918.815 772.111 918.976 770.932 919.144 cv
772.111 918.976 773.26 918.815 774.385 918.663 cv
cp
f
815.972 913.606 mo
819.102 913.31 822.01 913.085 824.737 912.944 cv
822.271 913.069 819.666 913.263 816.871 913.521 cv
816.578 913.548 816.268 913.579 815.972 913.606 cv
cp
f
827.658 912.823 mo
826.779 912.851 825.881 912.886 824.964 912.933 cv
827.743 912.794 830.339 912.745 832.797 912.804 cv
831.15 912.765 829.441 912.774 827.658 912.823 cv
cp
f
810.691 914.151 mo
809.055 914.329 807.348 914.526 805.59 914.733 cv
807.348 914.526 809.055 914.329 810.691 914.151 cv
cp
f
815.456 913.659 mo
813.934 913.806 812.371 913.966 810.739 914.146 cv
812.371 913.966 813.936 913.806 815.456 913.659 cv
cp
f
400.345 988.685 mo
399.174 988.923 398 989.157 396.826 989.394 cv
398 989.157 399.174 988.923 400.345 988.685 cv
cp
f
318.602 1005.24 mo
317.84 1005.39 317.076 1005.55 316.314 1005.71 cv
317.076 1005.55 317.84 1005.4 318.602 1005.24 cv
cp
f
385.904 991.597 mo
385.604 991.655 385.302 991.718 385.002 991.778 cv
385.302 991.718 385.604 991.655 385.904 991.597 cv
cp
f
440.041 980.72 mo
439.459 980.837 438.883 980.95 438.3 981.067 cv
438.883 980.95 439.459 980.837 440.041 980.72 cv
cp
f
333.059 1002.3 mo
332.14 1002.49 331.223 1002.67 330.305 1002.86 cv
331.223 1002.67 332.14 1002.49 333.059 1002.3 cv
cp
f
464.755 975.788 mo
463.156 976.108 461.542 976.431 459.936 976.749 cv
461.542 976.431 463.156 976.108 464.755 975.788 cv
cp
f
428.336 983.063 mo
427.033 983.323 425.733 983.585 424.425 983.849 cv
425.732 983.585 427.033 983.323 428.336 983.063 cv
cp
f
414.81 985.776 mo
413.281 986.083 411.75 986.392 410.216 986.698 cv
411.75 986.392 413.281 986.083 414.81 985.776 cv
cp
f
346.043 999.663 mo
345.658 999.741 345.274 999.817 344.89 999.897 cv
345.274 999.817 345.658 999.741 346.043 999.663 cv
cp
f
516.848 965.481 mo
515.634 965.72 514.43 965.956 513.209 966.196 cv
514.43 965.956 515.632 965.72 516.848 965.481 cv
cp
f
837.565 913.081 mo
836.04 912.944 834.484 912.841 832.853 912.804 cv
834.484 912.841 836.039 912.944 837.565 913.081 cv
cp
f
851.916 916.331 mo
852.221 916.448 852.525 916.556 852.832 916.677 cv
852.672 916.614 852.509 916.538 852.35 916.478 cv
852.205 916.421 852.06 916.386 851.916 916.331 cv
cp
f
838.416 913.157 mo
838.136 913.128 837.848 913.104 837.565 913.081 cv
837.848 913.108 838.135 913.128 838.416 913.157 cv
cp
f
843.47 913.911 mo
843.212 913.86 842.951 913.806 842.692 913.759 cv
842.953 913.806 843.21 913.86 843.47 913.911 cv
cp
f
855.558 917.854 mo
855.714 917.925 855.871 918.001 856.029 918.073 cv
856.044 918.067 li
855.881 917.991 855.72 917.927 855.558 917.854 cv
cp
f
842.692 913.759 mo
841.299 913.507 839.876 913.308 838.416 913.157 cv
839.878 913.308 841.299 913.507 842.692 913.759 cv
cp
f
855.558 917.854 mo
855.007 917.599 854.456 917.358 853.908 917.128 cv
854.456 917.358 855.005 917.599 855.558 917.854 cv
cp
f
853.908 917.128 mo
853.549 916.976 853.189 916.819 852.832 916.677 cv
853.189 916.819 853.548 916.976 853.908 917.128 cv
cp
f
851.916 916.331 mo
849.131 915.271 846.35 914.474 843.47 913.911 cv
846.35 914.476 849.131 915.271 851.916 916.331 cv
cp
f
2137.9 1001.27 mo
2133.88 1000.76 2130.15 1000.29 2126.62 999.847 cv
2123.69 999.481 2120.91 999.138 2118.29 998.827 cv
2097.45 996.358 2085.51 995.79 2073.87 999.71 cv
2066.57 1002.17 2059.39 1006.38 2050.18 1013.01 cv
2034.85 1024.06 1944.02 1073.22 1799.57 1119.82 cv
1788.36 1121.79 1776.87 1123.48 1765.06 1124.86 cv
1761.54 1125.28 1757.98 1125.66 1754.4 1126.02 cv
1743.87 1127.08 1733.1 1127.92 1722.05 1128.53 cv
1636.34 1133.29 1534.59 1124.66 1408.63 1103.67 cv
1404.04 1102.94 1399.47 1102.19 1394.92 1101.43 cv
1391.29 1100.83 1387.69 1100.21 1384.09 1099.58 cv
1338.8 1091.76 1295.85 1082.67 1255.49 1072.81 cv
1248.4 1071.08 1241.38 1069.33 1234.46 1067.56 cv
1200.02 1058.73 1167.63 1049.4 1137.43 1039.91 cv
985.363 992.11 889.475 940.296 873.684 928.923 cv
867.005 924.112 861.395 920.593 856.029 918.073 cv
825.524 930.956 507.738 1075.17 270.546 1584 cv
1005.37 1584 li
2284 1584 li
2284 1025.89 li
2216.36 1013.23 2164.76 1004.38 2137.9 1001.27 cv
cp
f
856.044 918.067 mo
848.562 914.546 841.565 913.011 832.853 912.804 cv
832.797 912.804 li
830.339 912.745 827.743 912.794 824.964 912.933 cv
824.737 912.944 li
822.01 913.085 819.102 913.31 815.972 913.606 cv
815.802 913.624 815.626 913.642 815.456 913.659 cv
813.936 913.806 812.371 913.966 810.739 914.146 cv
810.691 914.151 li
809.055 914.329 807.348 914.526 805.59 914.733 cv
805.255 914.774 804.908 914.815 804.566 914.856 cv
802.957 915.05 801.306 915.253 799.586 915.464 cv
799.444 915.481 799.308 915.499 799.164 915.517 cv
797.307 915.747 795.37 915.991 793.378 916.243 cv
791.002 916.542 788.545 916.853 785.963 917.177 cv
784.519 917.345 782.988 917.532 781.403 917.731 cv
780.88 917.798 780.323 917.872 779.786 917.942 cv
778.686 918.083 777.566 918.229 776.402 918.388 cv
775.743 918.476 775.064 918.569 774.385 918.663 cv
773.26 918.815 772.111 918.976 770.932 919.144 cv
770.213 919.245 769.492 919.349 768.754 919.456 cv
767.497 919.638 766.202 919.829 764.888 920.022 cv
764.184 920.128 763.494 920.228 762.773 920.335 cv
761.099 920.587 759.37 920.851 757.609 921.124 cv
757.211 921.185 756.836 921.241 756.433 921.306 cv
754.299 921.634 752.094 921.981 749.84 922.343 cv
748.983 922.478 748.089 922.624 747.215 922.765 cv
745.732 923.001 744.241 923.241 742.709 923.493 cv
741.713 923.655 740.692 923.825 739.674 923.991 cv
738.188 924.235 736.684 924.483 735.155 924.739 cv
734.09 924.917 733.016 925.097 731.931 925.278 cv
730.369 925.542 728.778 925.812 727.174 926.081 cv
726.084 926.269 725.002 926.45 723.893 926.64 cv
722.065 926.95 720.193 927.272 718.314 927.599 cv
717.395 927.757 716.5 927.909 715.57 928.069 cv
712.847 928.544 710.067 929.028 707.241 929.526 cv
706.045 929.733 704.814 929.954 703.599 930.167 cv
701.856 930.476 700.112 930.782 698.331 931.099 cv
696.942 931.349 695.53 931.601 694.119 931.853 cv
692.378 932.163 690.628 932.476 688.853 932.796 cv
687.435 933.05 686.006 933.308 684.567 933.565 cv
682.847 933.876 681.104 934.192 679.353 934.513 cv
677.799 934.794 676.25 935.075 674.673 935.362 cv
672.808 935.702 670.912 936.05 669.013 936.396 cv
667.572 936.659 666.146 936.921 664.684 937.19 cv
661.463 937.782 658.198 938.386 654.889 938.997 cv
653.427 939.267 651.927 939.548 650.448 939.823 cv
648.415 940.202 646.381 940.579 644.316 940.964 cv
642.587 941.286 640.833 941.616 639.083 941.942 cv
637.214 942.294 635.336 942.646 633.442 942.999 cv
631.63 943.343 629.808 943.685 627.975 944.03 cv
626.07 944.388 624.148 944.751 622.217 945.118 cv
620.339 945.472 618.458 945.827 616.557 946.187 cv
614.653 946.55 612.724 946.917 610.797 947.282 cv
608.886 947.646 606.986 948.007 605.055 948.376 cv
602.955 948.774 600.822 949.185 598.699 949.589 cv
594.873 950.321 591.009 951.062 587.105 951.812 cv
585.532 952.114 583.969 952.415 582.382 952.72 cv
580.122 953.157 577.837 953.597 575.553 954.038 cv
573.696 954.396 571.84 954.753 569.966 955.116 cv
567.705 955.554 565.425 955.995 563.14 956.438 cv
561.39 956.778 559.63 957.12 557.867 957.464 cv
555.403 957.94 552.935 958.421 550.446 958.905 cv
548.868 959.212 547.277 959.522 545.691 959.833 cv
543.034 960.353 540.382 960.868 537.699 961.392 cv
536.802 961.567 535.894 961.747 534.995 961.923 cv
529.841 962.931 524.638 963.95 519.388 964.981 cv
518.543 965.147 517.696 965.315 516.848 965.481 cv
515.632 965.72 514.43 965.956 513.209 966.196 cv
510.511 966.728 507.79 967.267 505.066 967.802 cv
503.325 968.146 501.587 968.487 499.837 968.833 cv
497.104 969.372 494.354 969.917 491.597 970.462 cv
490.015 970.776 488.43 971.089 486.842 971.403 cv
483.936 971.979 481.024 972.558 478.094 973.138 cv
476.413 973.472 474.722 973.808 473.032 974.142 cv
470.279 974.69 467.53 975.237 464.755 975.788 cv
463.156 976.108 461.542 976.431 459.936 976.749 cv
453.354 978.06 446.726 979.384 440.041 980.72 cv
439.459 980.837 438.883 980.95 438.3 981.067 cv
434.994 981.729 431.665 982.396 428.336 983.063 cv
427.033 983.323 425.732 983.585 424.425 983.849 cv
421.232 984.487 418.024 985.132 414.81 985.776 cv
413.281 986.083 411.75 986.392 410.216 986.698 cv
406.935 987.358 403.646 988.021 400.345 988.685 cv
399.174 988.923 398 989.157 396.826 989.394 cv
393.195 990.126 389.559 990.858 385.904 991.597 cv
385.604 991.655 385.302 991.718 385.002 991.778 cv
380.093 992.769 375.168 993.763 370.222 994.765 cv
362.21 996.384 354.148 998.019 346.043 999.663 cv
345.658 999.741 345.274 999.817 344.89 999.897 cv
342.554 1000.37 340.217 1000.84 337.874 1001.32 cv
336.272 1001.65 334.663 1001.97 333.059 1002.3 cv
332.14 1002.49 331.223 1002.67 330.305 1002.86 cv
326.413 1003.65 322.513 1004.44 318.602 1005.24 cv
317.84 1005.4 317.076 1005.55 316.314 1005.71 cv
250.942 1019.02 183.236 1032.96 116 1046.91 cv
116 1584 li
270.546 1584 li
507.773 1075.1 825.619 930.911 856.044 918.067 cv
cp
.690196 .505882 .533333 .254902 cmyk
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: Quicksand-Medium Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Quicksand-Medium def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 71 /G put
dup 72 /H put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
def
/FontBBox {-436 -267 1324 1163} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
14 dict dup begin
/.notdef <1C60D8A8C9B7F374CD81EF2D6097105F03DA8A90C49539AD0B815F
AEFAA31B2605877643A6FDC17AC98D18119EDF5F6EE717135EC1521FBAA4BA47
4702A0F12BEE8E9FC70A4FEAF07CDDCAE38717FDA6CFCB90521B90436AC48DEA
993FC53F57BEB87D3A8C4CE59A6B9C6CD5019A91FDEAD41AD79E3E54B0F2D7A3
3E0073419F7BD2118A7A8AF7757D88B3E1D3> |-
/space <1C60D8A8C9B85744E1> |-
/C <1C60D8A8C9B673A56866A6DCB88D64877423315FF0EDE9BB7963EC0FA00D
1C16310EABE284B3E89B7282D2CC72136519284A16B01A7E396BCFDB3FFF757B
5D973CFC86BF5D55CF0E128916FA7C7E540C881BB29D81026C2F87EE04AC16FD
7BAFC4F23079368DFD5D4B3BBB9BD3CA4BEF31EB61616C654887CED2B33F71BB
7857894FA7EC225A57464677128E266C76F324D191219EBA05931EE89CA988C0
B7F5B2971B21AD4AE8255422530FCA2BC91CF156203C9B9C3E7F4A74EB9FE18E
03899383430693> |-
/G <1C60D8A8C9B62AC6DC34653605EFD5BD4693382977B4A97C67895F71D67E
5B7D7235AD4617127380C6E13565477E4D684D4E5C9E39B5676F53EC051BA309
8249C582A9DF8BB8E34D418E388E3E802EEA3BE7F5B44CB407265A6CFE7A5066
0CBFBEF603BD635DC8C37D918B61A1604683BC47A6E974E5020EB61E230F84DF
99F32752C69B27A90ED185B1D70165C95A48D3937F6907B27B281EAD7E6E9A4E
44883FA7E2FBCE487D89FCBAB9B907B50F162617E59B5ABA013D167A00D65FAA
131ECBBD997ED0FFA7C3217B5CFE70201982F15427C620658DFD0EA76E669207
91F8525BCDF64356AF503FD33FDFA77050326F441535> |-
/H <1C60D8A8C9B60287CF3A28AD39FC42B10E0B6EE7565FB54D460B76AFD8BB
34A8A253CADAB32A1A9E5B13F9A2A4CE70146B4F0700CF539F21EE90298643C7
4D2A70370D7C364E39E6892998429567130D0EB77554826EA561B65E1C314524
388BA81D4085545947F09CAD2142978EF1A88C23FB2BA9C54A4FD2BF4AC7CDDB
CF2AC2287C82FD78CC831231B340C2E484E10173293BB56D8B> |-
/a <1C60D8A8C9B7D54578FC5BB931BDB177D27BFF5D465B9968CDFA0BFDBC15
37EA49DB2D446428846A34C373FFAE9D28AE425C27388E7C2859E8771EB08D0D
77899D808990DA5A77A15BA254F763A9F74C92E5F6AEE210E94CC22B698204A6
04232CD4D10A2E1C7E7D1C8652A94B6E227F4215F729FEFD352CE564E9805363
50A069764548CA965E66915558D59A7BC27BDE583532AD4F67365E514705588D
24E94A7961DA9C474F84E87C219AF00F2978CC2C6AA9B6D3060A2DEBECDEFA44
CF906609DCEAA78F6C9EA0FD068C849B131328C245D0CAE342A99562CAAC3F34
8681DE1AB4B3B476495B31FE7CDA25F1> |-
/c <1C60D8A8C9B7B9B9D13097903B2C2A0F6EA72DA59BAFA7F65C064E9CD49D
1307D6C632AF32DF8D028F639F7BE7E3DE1AA4C31B9E9EEC4CCF4D697A042BB2
88D17080A645073C83F284D5F15CDBB3DD9545C8D7300BEE4C14513CB94525A9
8906E5A9D614B39C5F14BDC94B98B16DF931D790BF09AFCD9A22D0E803950C0E
D3BEAF0D10893A69D052E50DD27C97E07DBDD936AFC1CAF3B9320B3761EA3C4A
1C9249DFF53A6D37774C3C705A082674EA0DB8BFF905BE482155BBC0985C4B28
A96CB6D3A4007232275FE1C872243925A98A7548290E42A4B06ED2E57D06E686
0419DE> |-
/e <1C60D8A8C9B7E1F8EBA5B7FB7AE30991DA47B080A768E27658CD10D2E773
442009EBDCC005E102BF75998D53000AF0969E7482B0825DB67A22A9B7BB6E3C
EC94DE695C673E87E4845140FB15974BFBA395FB99DBC55F78E7F1CC75096BFA
D18FD3044D7CFA16EA1CBF3239606D056161E71D832F8A273C47DC30B5924FFB
223D8B9FC6EC49657E40013AD99B8AF0959F5B584BD961406D5B15B49DE99F38
8C341366AB103A014542ADBA27CB43D6A726C007A687976DF4ADA1572D4517CE
4A1AB04ADA27E73797CE4685940D> |-
/m <1C60D8A8C9B5B8BC84391DA4EB516B5D25A93440BA07781E90CD311C9ECF
47FBD0BF2F3B78FBCE8B22DF9FC9657E1A62E45C895FF7688281C728BF0375FC
9F84E217C63F1D886FEC97DCA104A48F11CE7AC34DB2AB1A9197BF523FEC663E
3C1311EBE722F1EA0E11C24830051C06F7590FE941F2E00FC3768C273ECD5CE0
C398999A0758685BDBA9468CC58828E77DFE21907A7A80B09232F0E31A13D81D
9472333F653A9B2F1D14A8A208D3349A54DDA099A46FC19511BC847DE9D7C9AE
8C56E7BE265DF9EC34D53620436FE0CC1A571E95EF960DE4B21284EBF7563248
0DB342F4BBEC00643B216F5F3221045C69B247FEE9> |-
/n <1C60D8A8C9B7CEAE058F364500AAACDB2C5C5E9044C7DC02652407B73E9D
259F5C13A7166B15B2311684E65D047678F234337C919B5B14E9C33A000EC249
B8636DEBA34168DF5959F78180DC3150BA2717BF6357316D250FAF3D6F653122
9993EB3672367987F78A84E9E87C2ADF132B73CC591A69F22603353B7C6376BB
45B1E39C08E85C0761C70DDCA1EA55C0CA9B976284D6DDBFADE2265A9B70D7CF
5349920DBF4C067F2FB239> |-
/o <1C60D8A8C9B7DDB689F00C14393DACB636EA42B0D3A8BADA0608870F5A10
2CBBA034CF4079DBBF4B482171270511BA270A43B26C9903C15C18BCC2E4F979
3CC003317C96F7A9943806807F9A0334E2F8016DAF9368345CE4D50874AF7953
9E965BC1A64284FF834489FC198DFD94D7EFC0464D0945938B81D42109E0A18E
99353C22E99C47015BDF8EE06ADE4828B6F87D3943A92AE149C8D0FE93FCEAA3
3DF307733A175EF1906713D3F669F41FA3F3839DA6689F7F1FE28CFB> |-
/r <1C60D8A8C9B71EB5988E0F2B441F202B165B685C5989AB0B26572689495A
869010C3B21CF577F956CACB55E7D693581A19EEE6F8CC23D297B0B768A87F73
FED90CF97EE69F17FFC2DF9E07C02760188B58EFDE5168462B3FDCE710317744
BF3952588FB26DDD1B65E77D4FDFA7511C4C52CFEE63572DC71AD33FA187DCFE
0C04B73EF2958D88F4873326F97CB9D72717CB2B6F28DF3BA631124B514F> |-
/s <1C60D8A8C9B75E5E5634AD44F6B527801285D7B8CB534D282E6AE2F05508
FA9030AA7417FF34C6FA64DF63A293F47BC45A7C8189D95A23C9EB86CBFEE3FC
E68D5E697FD1D891E22B48639529AA0549C08F49C873EC4B1C629D63894447CF
7306CE2F3BA290BACAE89CF208E26CC2DD7EA0F0A01A7AD30F381B0967A35FF7
3921B6090DA4EA88C556C1D46097CEA75FF6C2FC14AA582DDA0FD5BCB7B83030
E067AB4E0BB9E31E459F64F8A6B83E02D30066E388E91FCA2BE4E80549BEA2D3
65AFD7E20B75594843E00FCEC5E9B8F0BA5A4DB0C82E6D5720444E560600BD4A
6F9A672D2B5256FD0F8B8438B6F7FB096AA8D0184B1F92DB8EA0D87BFBC03A4E
40038DEC7D3A1526533CBE> |-
/t <1C60D8A8C9B73F59D0570D687BA36CF8136EF9499E7442E4220E9B3DA901
00C42E8BF9F9E60AE62E7BBAAA0F7C3CC24409CB33454B96706C4E784AD25251
E469B4FD48EDD4572380125B7F9DBEF1C976B3690AACE6DF7EC824478124D850
25945B85DB649CD238C26CFEEE201AB9C4B039449AFB3CE0EA8CB617312D9E73
5E52676EFD9CCC30DD93025E73F34F167A2613909D44B26341B7D544AB7D32D1
24834DD5584E4F268861E065A9D64B8AE5D91391CDC5127102> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PVFIRL+Quicksand-Medium-Identity-H /Quicksand-Medium findfont ct_VMDictPut
/PVFIRL+Quicksand-Medium-Identity-H*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 3{/.notdef}rp /G /H 24{/.notdef}rp 
/a /.notdef /c /.notdef /e 7{/.notdef}rp /m /n 
/o 2{/.notdef}rp /r /s /t 139{/.notdef}rp]
PVFIRL+Quicksand-Medium-Identity-H nf
PVFIRL+Quicksand-Medium-Identity-H*1 [30 0 0 -30 0 0 ]msf
2074.37 326.649 mo
(Contact)
[19.1396 18.1797 17.6699 11.3994 18.4199 15.4199 0 ]xsh
1939.3 326.647 mo
(Careers)
[19.1396 18.4199 11.7305 17.0996 17.0996 12.3896 0 ]xsh
1130.93 1493.27 mo
(Go Home)
[20.8496 18.1797 8.31006 21.5698 18.1797 27.54 0 ]xsh
252.432 295.609 mo
251.984 297.227 251.496 298.917 250.961 300.678 cv
250.428 302.441 249.845 304.261 249.218 306.142 cv
251.568 304.237 254.093 302.438 256.799 300.739 cv
259.499 299.04 262.185 297.312 264.847 295.548 cv
267.508 293.784 270.029 291.906 272.405 289.911 cv
274.781 287.913 276.819 285.646 278.515 283.114 cv
278.619 282.985 278.665 282.827 278.651 282.646 cv
278.635 282.461 278.58 282.288 278.474 282.115 cv
278.372 281.948 278.234 281.802 278.064 281.685 cv
277.894 281.567 277.692 281.506 277.458 281.506 cv
275.993 281.506 274.318 281.854 272.424 282.546 cv
270.532 283.237 268.5 284.204 266.333 285.446 cv
264.166 286.686 261.901 288.174 259.542 289.911 cv
257.177 291.646 254.805 293.544 252.432 295.609 cv
cp
246.322 314.21 mo
244.935 317.761 243.456 321.2 241.876 324.531 cv
240.297 327.859 238.646 330.868 236.922 333.558 cv
239.899 333.297 242.665 332.86 245.222 332.245 cv
247.783 331.633 250.093 330.815 252.157 329.799 cv
254.219 328.779 256.027 327.528 257.583 326.037 cv
259.135 324.549 260.407 322.8 261.4 320.79 cv
260.875 320.503 260.31 320.239 259.698 320.005 cv
259.083 319.771 258.435 319.565 257.758 319.381 cv
257.079 319.196 256.393 319.038 255.702 318.892 cv
255.01 318.745 254.336 318.607 253.683 318.481 cv
252.168 318.218 250.604 318.01 248.985 317.854 cv
248.618 317.802 248.194 317.409 247.712 316.677 cv
247.226 315.947 246.763 315.124 246.322 314.21 cv
cp
225.564 335.673 mo
225.798 335.673 226.146 335.38 226.601 334.791 cv
227.058 334.202 227.594 333.382 228.208 332.327 cv
228.822 331.267 229.499 329.989 230.246 328.483 cv
230.988 326.983 231.766 325.325 232.575 323.515 cv
233.383 321.698 234.212 319.747 235.059 317.655 cv
235.91 315.569 236.752 313.401 237.587 311.157 cv
236.046 313.114 234.598 315.095 233.24 317.09 cv
231.883 319.088 230.663 321.077 229.578 323.063 cv
228.497 325.047 227.568 327.013 226.799 328.958 cv
226.027 330.9 225.458 332.79 225.092 334.612 cv
225.016 334.981 225.034 335.251 225.154 335.421 cv
225.271 335.588 225.406 335.673 225.564 335.673 cv
cp
283.411 286.012 mo
283.411 287.266 282.913 288.657 281.922 290.184 cv
280.929 291.71 279.656 293.251 278.104 294.804 cv
276.549 296.359 274.819 297.871 272.914 299.348 cv
271.008 300.821 269.128 302.146 267.274 303.323 cv
265.733 304.29 264.253 305.169 262.83 305.966 cv
261.407 306.763 260.074 307.513 258.833 308.219 cv
257.594 308.922 256.466 309.599 255.447 310.237 cv
254.427 310.876 253.54 311.521 252.784 312.177 cv
254.662 312.517 256.334 312.848 257.796 313.173 cv
259.258 313.501 260.421 313.888 261.283 314.327 cv
261.91 314.772 262.548 315.432 263.202 316.302 cv
263.852 317.181 264.441 318.077 264.965 318.988 cv
265.484 319.905 265.91 320.731 266.237 321.476 cv
266.563 322.22 266.726 322.671 266.726 322.829 cv
266.726 323.978 266.43 325.19 265.844 326.468 cv
265.258 327.748 264.45 329.022 263.417 330.288 cv
262.386 331.554 261.157 332.775 259.733 333.95 cv
258.312 335.125 256.758 336.188 255.075 337.141 cv
253.387 338.096 251.606 338.904 249.728 339.569 cv
247.85 340.237 245.941 340.674 244.009 340.882 cv
243.149 340.176 242.313 339.429 241.504 338.632 cv
240.693 337.835 239.963 337.091 239.31 336.399 cv
238.657 335.708 238.11 335.104 237.667 334.598 cv
237.221 334.085 236.946 333.769 236.843 333.634 cv
235.903 335.099 234.949 336.429 233.985 337.633 cv
233.017 338.831 232.059 339.845 231.107 340.665 cv
230.152 341.488 229.2 342.115 228.248 342.546 cv
227.292 342.977 226.346 343.167 225.406 343.114 cv
225.016 343.088 224.612 342.936 224.193 342.663 cv
223.777 342.388 223.37 342.042 222.98 341.626 cv
222.586 341.207 222.215 340.753 221.864 340.255 cv
221.511 339.763 221.197 339.282 220.92 338.825 cv
220.648 338.368 220.434 337.949 220.277 337.571 cv
220.122 337.193 220.042 336.927 220.042 336.769 cv
220.042 334.029 220.625 330.974 221.785 327.604 cv
222.946 324.235 224.533 320.752 226.542 317.146 cv
228.552 313.545 230.928 309.936 233.67 306.32 cv
236.413 302.702 239.363 299.277 242.521 296.04 cv
243.565 292.278 244.415 288.625 245.068 285.071 cv
245.72 281.521 246.072 278.269 246.126 275.321 cv
247.85 276.235 249.233 277.129 250.276 278.002 cv
251.32 278.878 252.144 279.657 252.744 280.331 cv
253.422 281.143 253.919 281.913 254.232 282.646 cv
254.389 283.114 254.468 283.779 254.468 284.644 cv
254.468 284.799 254.461 284.963 254.448 285.13 cv
254.435 285.3 254.416 285.479 254.389 285.657 cv
258.044 283.047 261.681 280.964 265.296 279.411 cv
268.915 277.858 272.379 277.082 275.694 277.082 cv
276.113 277.082 276.596 277.237 277.144 277.554 cv
277.692 277.864 278.247 278.286 278.81 278.805 cv
279.368 279.329 279.932 279.909 280.491 280.548 cv
281.052 281.187 281.55 281.843 281.981 282.505 cv
282.413 283.173 282.757 283.812 283.017 284.427 cv
283.279 285.042 283.411 285.569 283.411 286.012 cv
cp
f
278.279 332.462 mo
278.279 333.247 278.568 333.634 279.141 333.634 cv
279.741 333.634 280.537 333.159 281.531 332.207 cv
282.521 331.255 283.553 330.048 284.625 328.583 cv
284.571 328.296 284.54 328.044 284.527 327.821 cv
284.514 327.599 284.509 327.396 284.509 327.212 cv
284.509 326.69 284.566 326.069 284.685 325.352 cv
284.799 324.634 285.095 323.819 285.564 322.905 cv
285.877 322.199 286.255 321.508 286.699 320.831 cv
287.067 320.228 287.509 319.583 288.031 318.892 cv
288.552 318.2 289.129 317.55 289.753 316.952 cv
289.991 316.718 li
290.251 317.034 290.597 317.456 291.028 317.989 cv
291.457 318.525 291.891 319.073 292.32 319.636 cv
292.75 320.195 293.128 320.714 293.459 321.183 cv
293.785 321.651 293.987 321.979 294.063 322.158 cv
294.063 323.286 293.861 324.405 293.459 325.53 cv
293.052 326.652 292.507 327.763 291.831 328.858 cv
293.398 328.753 294.854 328.357 296.199 327.663 cv
297.541 326.972 298.944 325.841 300.407 324.276 cv
300.643 324.511 300.951 324.833 301.327 325.237 cv
301.707 325.642 302.014 325.987 302.249 326.274 cv
301.153 327.423 300.073 328.372 299.017 329.134 cv
297.959 329.89 296.902 330.487 295.844 330.936 cv
294.79 331.378 293.711 331.697 292.614 331.894 cv
291.517 332.087 290.395 332.187 289.247 332.187 cv
288.357 333.127 287.405 333.988 286.387 334.773 cv
285.368 335.556 284.331 336.235 283.273 336.81 cv
282.215 337.384 281.164 337.826 280.122 338.14 cv
279.075 338.453 278.084 338.611 277.144 338.611 cv
276.359 338.611 275.55 338.374 274.715 337.905 cv
273.88 337.437 273.125 336.856 272.445 336.159 cv
271.767 335.471 271.206 334.732 270.76 333.95 cv
270.316 333.165 270.092 332.474 270.092 331.873 cv
270.092 329.89 270.362 327.918 270.898 325.958 cv
271.431 324.001 272.266 322.167 273.406 320.456 cv
274.54 318.745 275.99 317.239 277.749 315.933 cv
279.514 314.629 281.607 313.636 284.035 312.956 cv
284.114 312.903 284.251 312.868 284.449 312.842 cv
284.644 312.815 284.805 312.801 284.938 312.801 cv
285.303 312.801 285.687 312.938 286.094 313.211 cv
286.499 313.483 286.879 313.794 287.228 314.131 cv
287.583 314.474 287.875 314.808 288.11 315.13 cv
288.347 315.458 288.461 315.675 288.461 315.777 cv
288.409 315.909 288.212 316.07 287.875 316.267 cv
287.536 316.46 287.079 316.794 286.504 317.266 cv
285.93 317.737 285.25 318.408 284.468 319.284 cv
283.683 320.157 282.823 321.312 281.883 322.75 cv
280.472 324.862 279.519 326.778 279.023 328.483 cv
278.527 330.197 278.279 331.521 278.279 332.462 cv
cp
f
310.944 317.538 mo
310.63 318.376 310.317 319.226 310.003 320.087 cv
309.69 320.948 309.378 321.836 309.063 322.75 cv
310.709 320.869 312.126 319.337 313.314 318.147 cv
314.5 316.958 315.505 316.026 316.33 315.347 cv
317.152 314.667 317.817 314.204 318.324 313.958 cv
318.833 313.712 319.232 313.583 319.521 313.583 cv
319.859 313.583 320.367 313.753 321.048 314.093 cv
321.727 314.433 322.414 314.852 323.102 315.347 cv
323.796 315.845 324.397 316.354 324.905 316.873 cv
325.415 317.397 325.668 317.854 325.668 318.244 cv
325.668 318.323 325.654 318.42 325.63 318.54 cv
325.604 318.657 325.566 318.807 325.513 318.988 cv
325.304 319.642 325.037 320.412 324.71 321.3 cv
324.384 322.188 324.038 323.107 323.673 324.06 cv
323.307 325.015 322.939 325.967 322.575 326.919 cv
322.208 327.874 321.883 328.768 321.596 329.603 cv
321.309 330.44 321.072 331.167 320.893 331.794 cv
320.708 332.421 320.618 332.878 320.618 333.165 cv
320.618 333.323 320.695 333.402 320.852 333.402 cv
321.139 333.402 321.57 333.229 322.144 332.893 cv
322.718 332.553 323.38 332.11 324.122 331.56 cv
324.869 331.012 325.642 330.411 326.454 329.758 cv
327.261 329.104 328.037 328.46 328.784 327.821 cv
329.527 327.183 330.198 326.6 330.801 326.078 cv
331.399 325.554 331.859 325.164 332.172 324.903 cv
332.43 325.138 332.717 325.437 333.034 325.806 cv
333.344 326.169 333.643 326.509 333.933 326.819 cv
333.359 327.396 332.641 328.097 331.778 328.917 cv
330.918 329.74 329.984 330.581 328.976 331.442 cv
327.974 332.304 326.928 333.165 325.844 334.029 cv
324.762 334.888 323.713 335.661 322.692 336.341 cv
321.677 337.018 320.72 337.565 319.834 337.984 cv
318.945 338.403 318.202 338.611 317.602 338.611 cv
317.21 338.611 316.714 338.474 316.112 338.198 cv
315.513 337.923 314.931 337.583 314.372 337.179 cv
313.808 336.774 313.332 336.326 312.942 335.831 cv
312.549 335.333 312.353 334.853 312.353 334.381 cv
312.587 333.309 312.908 332.096 313.314 330.739 cv
313.718 329.38 314.155 327.991 314.625 326.567 cv
315.095 325.146 315.584 323.734 316.094 322.337 cv
316.603 320.942 317.093 319.653 317.562 318.481 cv
317.483 318.558 li
316.988 319.161 316.276 319.949 315.347 320.928 cv
314.423 321.906 313.373 323.157 312.196 324.687 cv
311.023 326.216 309.781 328.056 308.477 330.212 cv
307.17 332.362 305.892 334.917 304.639 337.864 cv
304.481 338.233 304.337 338.518 304.207 338.726 cv
304.077 338.937 303.829 339.042 303.463 339.042 cv
303.019 339.042 302.515 338.916 301.953 338.667 cv
301.393 338.421 300.822 338.096 300.23 337.691 cv
299.646 337.284 299.057 336.833 298.469 336.341 cv
297.88 335.843 297.35 335.345 296.883 334.853 cv
296.883 334.694 296.955 334.249 297.098 333.522 cv
297.242 332.79 297.447 331.87 297.705 330.757 cv
297.967 329.649 298.292 328.384 298.683 326.96 cv
299.076 325.536 299.521 324.042 300.016 322.475 cv
300.513 320.907 301.056 319.308 301.642 317.679 cv
302.231 316.047 302.861 314.474 303.541 312.956 cv
304.639 313.48 305.859 314.119 307.203 314.878 cv
308.549 315.634 309.794 316.521 310.944 317.538 cv
cp
f
375.174 284.172 mo
374.73 284.172 374.188 284.497 373.548 285.15 cv
372.91 285.804 372.189 286.709 371.395 287.872 cv
370.598 289.035 369.754 290.409 368.868 292.003 cv
367.979 293.597 367.081 295.334 366.166 297.212 cv
365.25 299.093 364.337 301.091 363.423 303.206 cv
362.509 305.321 361.648 307.46 360.839 309.628 cv
362.796 307.226 364.658 304.817 366.417 302.403 cv
368.184 299.989 369.731 297.695 371.061 295.527 cv
372.391 293.362 373.45 291.376 374.234 289.577 cv
375.016 287.772 375.41 286.287 375.41 285.112 cv
375.41 284.954 375.403 284.758 375.391 284.523 cv
375.376 284.289 375.303 284.172 375.174 284.172 cv
cp
338.007 330.777 mo
338.868 330.777 340.147 330.171 341.845 328.958 cv
343.542 327.739 345.46 326.116 347.602 324.083 cv
347.836 322.879 348.125 321.657 348.464 320.421 cv
348.801 319.179 349.182 317.919 349.6 316.639 cv
348.083 317.655 346.603 318.821 345.154 320.125 cv
343.704 321.429 342.417 322.724 341.295 324.001 cv
340.172 325.281 339.265 326.474 338.575 327.587 cv
337.882 328.694 337.537 329.538 337.537 330.112 cv
337.537 330.558 337.693 330.777 338.007 330.777 cv
cp
355.513 332.11 mo
355.513 332.761 355.721 333.089 356.139 333.089 cv
356.634 333.089 357.23 332.931 357.921 332.617 cv
358.614 332.304 359.338 331.894 360.095 331.384 cv
360.851 330.874 361.622 330.306 362.407 329.679 cv
363.188 329.052 363.927 328.442 364.619 327.839 cv
365.31 327.241 365.93 326.679 366.479 326.157 cv
367.028 325.633 367.458 325.214 367.772 324.903 cv
368.032 325.138 368.344 325.437 368.711 325.806 cv
369.078 326.169 369.403 326.509 369.69 326.819 cv
369.01 327.502 368.24 328.255 367.381 329.093 cv
366.517 329.931 365.6 330.786 364.619 331.659 cv
363.64 332.532 362.624 333.382 361.563 334.202 cv
360.508 335.028 359.454 335.758 358.411 336.399 cv
357.366 337.038 356.348 337.554 355.356 337.946 cv
354.362 338.336 353.423 338.532 352.535 338.532 cv
352.066 338.532 351.491 338.315 350.811 337.885 cv
350.134 337.454 349.481 336.927 348.857 336.3 cv
348.227 335.673 347.7 335.017 347.269 334.322 cv
346.838 333.634 346.623 333.01 346.623 332.462 cv
346.623 331.261 346.699 330.007 346.859 328.7 cv
345.684 329.749 344.547 330.739 343.45 331.677 cv
342.353 332.617 341.251 333.499 340.14 334.322 cv
339.031 335.146 337.896 335.901 336.734 336.593 cv
335.571 337.284 334.339 337.879 333.034 338.374 cv
332.641 338.532 332.301 338.611 332.014 338.611 cv
331.755 338.611 331.415 338.479 330.995 338.219 cv
330.579 337.958 330.174 337.624 329.782 337.22 cv
329.391 336.815 329.052 336.358 328.762 335.849 cv
328.477 335.339 328.332 334.853 328.332 334.381 cv
328.332 333.309 328.535 332.116 328.939 330.798 cv
329.344 329.479 329.931 328.12 330.702 326.726 cv
331.472 325.325 332.413 323.931 333.521 322.533 cv
334.633 321.136 335.893 319.817 337.302 318.575 cv
338.711 317.339 340.264 316.214 341.962 315.209 cv
343.66 314.204 345.47 313.401 347.407 312.801 cv
347.77 312.851 348.242 313.015 348.816 313.29 cv
349.39 313.565 349.926 313.847 350.42 314.131 cv
351.362 311.444 352.44 308.746 353.653 306.048 cv
354.867 303.341 356.158 300.745 357.53 298.252 cv
358.9 295.759 360.33 293.421 361.819 291.238 cv
363.306 289.062 364.794 287.128 366.283 285.446 cv
367.772 283.759 369.239 282.396 370.692 281.351 cv
372.136 280.308 373.513 279.669 374.823 279.432 cv
375.394 279.432 376.002 279.622 376.644 280 cv
377.281 280.378 377.889 280.835 378.464 281.368 cv
379.039 281.907 379.528 282.461 379.934 283.038 cv
380.336 283.612 380.591 284.093 380.695 284.485 cv
380.695 285.687 380.395 287.081 379.794 288.675 cv
379.194 290.269 378.368 291.985 377.307 293.825 cv
376.252 295.665 374.999 297.593 373.548 299.603 cv
372.101 301.612 370.538 303.657 368.868 305.731 cv
367.197 307.806 365.442 309.874 363.599 311.937 cv
361.761 314.002 359.911 316.003 358.059 317.931 cv
357.275 320.594 356.654 323.134 356.199 325.548 cv
355.742 327.965 355.513 330.153 355.513 332.11 cv
cp
f
385.827 301.639 mo
385.8 301.744 385.704 301.999 385.534 302.403 cv
385.362 302.808 385.162 303.276 384.926 303.813 cv
384.69 304.349 384.423 304.908 384.122 305.497 cv
383.823 306.083 383.53 306.628 383.243 307.123 cv
382.953 307.618 382.68 308.028 382.418 308.356 cv
382.157 308.682 381.948 308.843 381.792 308.843 cv
381.324 308.819 380.755 308.679 380.089 308.415 cv
379.422 308.154 378.784 307.858 378.168 307.533 cv
377.556 307.208 377.035 306.886 376.604 306.575 cv
376.173 306.259 375.957 306.036 375.957 305.907 cv
375.957 305.359 376.115 304.647 376.427 303.771 cv
376.742 302.901 377.105 302.052 377.524 301.226 cv
377.94 300.405 378.368 299.693 378.797 299.093 cv
379.228 298.492 379.56 298.19 379.794 298.19 cv
380.266 298.19 380.837 298.343 381.517 298.642 cv
382.197 298.943 382.856 299.286 383.495 299.679 cv
384.138 300.071 384.687 300.458 385.141 300.833 cv
385.598 301.214 385.827 301.483 385.827 301.639 cv
cp
370.317 338.611 mo
369.924 338.611 369.432 338.474 368.83 338.198 cv
368.231 337.923 367.654 337.583 367.106 337.179 cv
366.558 336.774 366.089 336.326 365.697 335.831 cv
365.304 335.333 365.108 334.853 365.108 334.381 cv
365.372 333.229 365.722 331.914 366.166 330.423 cv
366.611 328.935 367.085 327.423 367.595 325.882 cv
368.105 324.341 368.64 322.835 369.201 321.358 cv
369.763 319.882 370.273 318.569 370.727 317.421 cv
371.184 316.272 371.584 315.347 371.922 314.641 cv
372.262 313.935 372.485 313.583 372.59 313.583 cv
372.746 313.583 373.138 313.753 373.765 314.093 cv
374.391 314.433 375.05 314.843 375.74 315.326 cv
376.434 315.81 377.054 316.319 377.602 316.855 cv
378.151 317.389 378.423 317.854 378.423 318.244 cv
378.423 318.323 378.409 318.42 378.385 318.54 cv
378.359 318.657 378.321 318.807 378.268 318.988 cv
378.057 319.642 377.791 320.412 377.464 321.3 cv
377.139 322.188 376.793 323.107 376.427 324.06 cv
376.062 325.015 375.694 325.967 375.33 326.919 cv
374.963 327.874 374.637 328.768 374.351 329.603 cv
374.061 330.44 373.827 331.167 373.646 331.794 cv
373.463 332.421 373.371 332.878 373.371 333.165 cv
373.371 333.323 373.45 333.402 373.607 333.402 cv
373.894 333.402 374.325 333.229 374.899 332.893 cv
375.473 332.553 376.132 332.11 376.876 331.56 cv
377.621 331.012 378.397 330.411 379.208 329.758 cv
380.017 329.104 380.793 328.46 381.538 327.821 cv
382.283 327.183 382.953 326.6 383.553 326.078 cv
384.155 325.554 384.611 325.164 384.926 324.903 cv
385.162 325.138 385.441 325.437 385.767 325.806 cv
386.096 326.169 386.398 326.509 386.688 326.819 cv
386.114 327.396 385.393 328.097 384.535 328.917 cv
383.672 329.74 382.739 330.581 381.734 331.442 cv
380.729 332.304 379.683 333.165 378.601 334.029 cv
377.517 334.888 376.468 335.661 375.448 336.341 cv
374.43 337.018 373.475 337.565 372.59 337.984 cv
371.7 338.403 370.944 338.611 370.317 338.611 cv
cp
f
246.186 351.089 mo
242.477 351.089 li
242.477 361.313 li
240.429 361.313 li
240.429 351.089 li
236.755 351.089 li
236.755 349.422 li
246.186 349.422 li
246.186 351.089 li
cp
.752941 0 .341176 0 cmyk
f
277.487 361.313 mo
275.43 361.313 li
275.43 356.037 li
270.114 356.037 li
270.114 361.313 li
268.047 361.313 li
268.047 349.422 li
270.114 349.422 li
270.114 354.37 li
275.43 354.37 li
275.43 349.422 li
277.487 349.422 li
277.487 361.313 li
cp
f
307.55 356.005 mo
302.665 356.005 li
302.665 359.646 li
308.375 359.646 li
308.375 361.313 li
300.599 361.313 li
300.599 349.422 li
308.316 349.422 li
308.316 351.089 li
302.665 351.089 li
302.665 354.37 li
307.55 354.37 li
307.55 356.005 li
cp
f
335.077 349.422 mo
338.506 358.536 li
341.928 349.422 li
344.597 349.422 li
344.597 361.313 li
342.541 361.313 li
342.541 357.394 li
342.746 352.149 li
339.233 361.313 li
337.753 361.313 li
334.25 352.158 li
334.455 357.394 li
334.455 361.313 li
332.395 361.313 li
332.395 349.422 li
335.077 349.422 li
cp
f
371.369 356.005 mo
366.485 356.005 li
366.485 359.646 li
372.193 359.646 li
372.193 361.313 li
364.418 361.313 li
364.418 349.422 li
372.136 349.422 li
372.136 351.089 li
366.485 351.089 li
366.485 354.37 li
371.369 354.37 li
371.369 356.005 li
cp
f
1108.57 1482.87 mo
1115.72 1475.72 li
1113.5 1473.5 li
1104.13 1482.87 li
1113.5 1492.25 li
1115.72 1490.03 li
1108.57 1482.87 li
cp
0 0 0 0 cmyk
f
%ADOBeginSubsetFont: Quicksand-Light Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Quicksand-Light def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 79 /O put
dup 111 /o put
dup 112 /p put
dup 115 /s put
def
/FontBBox {-363 -211 1313 1130} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/.notdef <1C60D8A8C9B7F374CD81EF2D6097105F03DA8A90C49539AD0B815F
AEFAA31B2605877643A6FDC17AC98D18119EDF5F6EE717135EC1521FBAA4BA47
4702A0F12BEE8E9FC70A4FEAF07CDDCAE38717FDA6CFCB90521B90436AC48DEA
993FC53F57BEB87D3A8C4CE59A6B9C6CD5019A91FDEAD41AD79E3E54B0F2D7A3
3E0073419F7BD2118A7A8AF7757D88B3E1D3> |-
/period <1C60D8A8C9B8CCADF3ABF21B298B7A4737F0E182F0E74E3BD032BAB
E7F2E37E5BEE083237B527AE855AA23F50B941118A898B7EE8EF45236E66D29D
57D427424B0AB7825503FBDEFC862EFDA> |-
/O <1C60D8A8C9B6F576EA6830CAF3C19A855D486C4E6CCFD401B65113D23C0A
8FC5B1911A2330CD79774CC1DDAC6C7232F502A8CA4CE45898604212F5D55FE7
293BE909FDA360580CB9C9BDA62789AA46C6683E7B96829540A0923FADDDD389
D3B2013D7F8546A949AB38D4CE5A86764F9FC956BEFA4013573C25C100E1C54B
CC0868A32936DD69D3516A0D51DCD4D9FF6AC66336186429F7CC0B27BF266730
DC2368DCD100B6594C50B7563E2B97865F526FCB4E76A9C6DE00716C> |-
/o <1C60D8A8C9B7CEAE0AC0A22DECE71ABE566123ECF7BF38DA0A49CFD2C762
DB72FE4BACDFA77892B3C7F573F5FDD40BF26D566F70923D708F670B9C5ED599
4814C8FAC6555C86D98C520C7E82D9DCBB37D14CB4069997F4CB24EA0BC2AA9D
50F54903D478DFC3784CDB9BA322C6EBDB62DA6265AAB6A556388D615BEE1B39
875B4BDABA2F6B1CA87503167FA3D2F240F352A3DA0D482F0D66831272DDB5D9
8104897AAA4FC63DB746911D8E6698408BE5D9DD5CE29C0A29467AFE> |-
/p <1C60D8A8C9B7C8C152461186F643D97F4B99B9F812C6D7693281DCED9E32
A73FCCE61CE20CA7B0FA1A0B5E5BE6ED23D8B02012DEDD7F3C045D897C93FF62
BEE9BAD2BCCB66B7CFEFABC8F8E3F82804C307E549B8ECAEDAE9807D6E6F4A82
D5D468B7B6877E4C9835AC93625E51609BF45EA68DA81590ABB591AF98F868BD
0C59197E9AC0FA916E35DF293C4B3CBC4F6362B25B2A066FE3EDEBB53C2F95B0
1A800AAF15DA007A6F65B8F916F9FC336BE55FF9B8F3F525E273AF88B6F9E42E
86CB033BEBC3D7C0027BE8E946A9E13853D03F910D2739CD4726894CA9A610B9
7073C71709DAD7A1807F0700414050B3> |-
/s <1C60D8A8C9B74A3EC6F57644A92F46704EA5C0D2FA1A80E04140BDE3F434
8356DEBBA035516C40773F5D8AAB130E09362ADB5C4756693D5D7D4F69331C66
00A3FAA6B03B749D60CE49F94F5DC9A4C3203949FF8FF515A61CDB094E5FE2D8
A4683AFF97E58126B42DB85FBDEF704B83EF27E78DB8003B7147231C9B7C3F49
17320C625937943C089994441EA10C658676AAEF405EA7F58DE83E7A2D48C14F
CCB15A578246DA351448B7A42D6734E0DF8C698210498F0FA93FEC59F72E2EC8
D0DCBF51588204A6C7707BED97549AD567434566A444E35BBC520440815B5922
2F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PVFIRM+Quicksand-Light /Quicksand-Light findfont ct_VMDictPut
/PVFIRM+Quicksand-Light*1 
[46{/.notdef}rp /period 32{/.notdef}rp /O 31{/.notdef}rp /o /p 2{/.notdef}rp 
/s 140{/.notdef}rp]
PVFIRM+Quicksand-Light nf
PVFIRM+Quicksand-Light*1 [105 0 0 -105 0 0 ]msf
1006.86 1285.48 mo
(Ooops...)
[81.4785 61.8438 61.8438 62.4736 48.8242 16.5889 16.5889 0 ]xsh
%ADOBeginSubsetFont: Quicksand-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Quicksand-Regular def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 33 /exclam put
dup 83 /S put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 119 /w put
def
/FontBBox {-377 -216 1317 1133} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
14 dict dup begin
/.notdef <1C60D8A8C9B7F374CD81EF2D6097105F03DA8A90C49539AD0B815F
AEFAA31B2605877643A6FDC17AC98D18119EDF5F6EE717135EC1521FBAA4BA47
4702A0F12BEE8E9FC70A4FEAF07CDDCAE38717FDA6CFCB90521B90436AC48DEA
993FC53F57BEB87D3A8C4CE59A6B9C6CD5019A91FDEAD41AD79E3E54B0F2D7A3
3E0073419F7BD2118A7A8AF7757D88B3E1D3> |-
/space <1C60D8A8C9B85B8FDC> |-
/exclam <1C60D8A8C9B8B375074B53A548E49D4CB0E27E29A4698FB542B3793
E9C5739A83573945C6FDE9BEA61D21B925F71FC6852F1F06E08CF23F2A80412E
45A8CA871CC1E34CA552293E50130731DE7D9A9588BD03EE0C64462752C6395C
074C21624B5802CDABCC0029EE70A60595FF2E4E171691C693F1D9F19FC879F7
C86BF90D83C34423894> |-
/S <1C60D8A8C9B7E965A9A94650E173ACFE9C6B98761C9271CAC809D11D5C2E
FF246636272811BCBAC8130E08B0EA89382DB80DC09E7DCA65924D639A4A14F6
1C1DB56ED9BF2ADF3F6C75DFC6BBA2659751D8DEF6ECABC6A0CA7ED4AC3FEC03
641F9CCB66D733B0B7B32AAD076C64F1A06DE89BEB27C2E901AA47E5372CE6DB
76D290BDF9653A6D25FD738FACD2A8100BFF98D555356D37E64391F68B17DBE7
698F83ADBF242E0D2C5B991A6CA86D8106C4D18F99BFAAD3F14EC73940268C8A
425CB921AC45D05053A02633FA2C8E4B45698B1C08D449B37B8957F43AC156CE
5D2B7A1028E32ACF6758C30C35FDC50BDA31F5AA4C7E3C06D513E606F7C1D941
678660F62555AE9A545CC300> |-
/e <1C60D8A8C9B7EF3224E3C1F709559B348C038A4FE21FFBD2F3657D155131
57229B6C1F0EB931A84BF3B573D6CBDC8E7BE8D53CBDC1AA8E0EDFD3D35BDF7B
2A4EEB9F70D8E7AE00DE3E1CE6A7EEBD56AE9DFC1302CEA91BD2C3A5CECF71A4
ECDF818C86B1B3352EDC22A5F1F9BBFB6C6944D3C44AD4F60143CB822AC88281
D5C32D592C973FC751D777679748B8ECFD7FF927D0BE6D2176DB7D054CFF0746
776BD057159175D9EBAF5E7BEF7A3CF6107EB93909D92E43E95574C589904FB3
2E8FC89A3288484C97AF4B3113DE378847BD4BD09D17672B2B305D00> |-
/g <1C60D8A8C9B6612940F85A3686A1B5028794136229470B77661B68DE9020
C3061CAE1DD53ADAA443BFBC504B31BD61993BC06A47B246E5F0FD4AF31D551D
262A28D0731FFA12822A88571A44C9A963B486861E1DA4E0C8B643E90F439030
9F6B3026C3504402A1BC99FA1601E39941A7FAA0272154DFFFF00BBCC2AA2CBD
39E39392B7259B19961BE4E346ADD687D75E5CF1F0D00D5C8D4979EEBFC71AD5
23F36F26868BD44946EEE0FA2D45416695CCE9139D35BC0B860DCCB9FDAC07F6
5D080EF8468BB659821E9EC1E6822E14E50E73CF0D415E90CE80B911A384099B
A26ED42B464849E63919887CFCB2BB3DF43E870CD184E12192045C6585C5FDD5
E736BF7D7B0FD8E31A146E17701BF27E730FCA0414B8AD2C634347A1E94A88F3
5E26F357F925FC4E515D1F68557DDB2804B9> |-
/h <1C60D8A8C9B7E39F73C6A6E1981216355A5BC216D607F5CDA18DBBA9A730
6A90548858D78429E74C68E80ACF1856B1689D4C06AE1F2A876BAA6EF7E0FDAE
A76C1097D402D3FA93786FC15E444AC7D4B57C6FF95278384F4BA9CCA9148BC7
7B271C83C15DB491D24CDDC99308705B1AFB84B99935A7A1DF93EF6998388422
7D63073162CA2A53CB3DFD30362718700F260BC48FBDCEF60698A27AB9FA4CFA
F1A748B52EC618BE8921DE7BE11E5EB727A90D> |-
/i <1C60D8A8C9B89474999F9EA00044AA73A53F6B3EFDF0C6667BA6618B5846
A2BDAFCECD6F5F0578528234155996D265DDEAA84529CE4E3839AA7AEDBDF986
33FA16AD92FA7D10C2979F60AB95083FDEC5E552006C615155479ADC023580F6
F793DD1189C6583AAA29993BD9D15A26656C8A4EEB087A3DBAC0D326AA754980
B78C44B3ED6D> |-
/m <1C60D8A8C9B5B61920872C958A30BB286C8258CE607D00AB099E13541DB3
969958DB58949C588B7902BB0D744AB830B0025460D9FD2895D41DDC32068F27
B3D9A0E88B61FD2C611CAC798AA25EA4381EDC13A811FBF9791F99CEFB5AC72B
A9BAFFA37BCB1B833D3A26F84FE783316F8A2F44D220066F94FF40853EE4C8EA
0C15246959BD3369ECF61D96BE29D852CFA117042A67C348949BFA3AB054FF54
2640334FB61068505ED6FB90D8CF18C51DF3078DDC19500D5DF907D711A36F67
514FF8B1036B8EC2692347A3F45257A8DFAE451441AFF8B32DFF135070DA7056
E68FA5CA0936C422DB0E09C72AFE919294B453D1A454012FE6CBCEF038C09A52
1E8809833E7C6306F9F5DD602568401506C0E3> |-
/n <1C60D8A8C9B7F9423C0459C2B5AA72D3457BC1B9AD2171F4BDB3EAD1B5C7
39B6BAF7FF1C148C1EA48DFED330C57C8AF2B0497AF72DBB5B74C592F626087A
FA795ABD58A411098A9645EA2C54AAAC9FDDD5445BD7E2C82BE268553520D145
1248065DB20366C54A947E575A5644A4DEF6C266C05D17B27F56AAEA0529164F
5792CF4A25A15467D4A71861E3B997707A4ED56E188A3D12C97E239D0946528D
ED798C7133559CF39905E37BFBF055604BF7> |-
/o <1C60D8A8C9B7C8C15DD3C98432920478200C742A7A779F317DE5E83A5CCD
E8C6484C7F3618FA1D6FE902F8812B6FB4797B6F7242D530092B503283D9BE07
01EA777EC99FC1B5E49CDEAA14849B5ABDA46F2E8BDBEB1A0093DFACFE2EEA11
063CC5FABBCF8D3ED37F4A183B79A1FBDE06E65FDCF777C493D55A0ABF78FC75
C3916A8077716E64819A4F321F16ACA57FEE7483B4EA2F91BC0ADF7191E098DB
75AEE944107A255D3F0385325608A547564EF0B415C156F3FB3F2D81> |-
/r <1C60D8A8C9B73A413E5ADCEC6F4F89D3C37DD88A680572CCEED4DF04BAA7
EF1FA7E12C8C10BF22CD57022E8ED45E8B5E7049C051ECC0B07D27196F75043C
E467D34BD161DC4FAC174A3669AEB1D658B8FC93C37F2669380E153DFD4B418A
205A7A58F93527187A12E7C46C194446A0340124C5A686D80F1FBCCCF418CA2F
2D4557DDEB506EA9E549BCC0777A5F54E44E826A474654910EF4949B34BD> |-
/t <1C60D8A8C9B819470394DEC90E20A95F1E5354E7E3E663C3C69A81162BCA
BAE8FF1D7FDBCA6C732EECAC780D7895076C5F5E8989DC9C26AAAEE60EDB495E
872A52DE7D2760CD5886EFB7CB003DCEAB1BD2DC254E176702EB38DE238D59B6
98BAC7A53E214705B5B0F3B18FC4DA298D653AFFEF8F48FFFE633643012C5E4E
FF26DA9F9A692C66EE05EAAAEB1692A459D07E2A0DAB0426319E01CE5CA8537C
A53F62ECA3CC1F0C40263E39741F402F0F2C73BE3783FA4820EBDC31AC02C075
2E375F99> |-
/w <1C60D8A8C9B6E5995F0451F660E6B931A9810B3455D3B1B76350FB4A313C
70FC12BF245E30683F3D6E37CABC93F4CC4A76B91365653661BF971BC995DDB5
0AB9C5E49C9759889BEC8A9099DC3FCD4C5D013364784E69034BAC75284F365A
1EAE326D7272B609FB3DB5E128949DB46AD507A99F37DED31DCCF43F94DC3B1F
D571D4E6410880703A86A68BF6F7E5B386B2446DBCC8968420509575B810D14C
2D71128003A90D3ED556071AE2604815EF8D6A778B59D928B3F2FBCA6E8B> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PVFIRN+Quicksand-Regular /Quicksand-Regular findfont ct_VMDictPut
/PVFIRN+Quicksand-Regular*1 
[32{/.notdef}rp /space /exclam 49{/.notdef}rp /S 17{/.notdef}rp /e /.notdef 
/g /h /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp 
/r /.notdef /t 2{/.notdef}rp /w 136{/.notdef}rp]
PVFIRN+Quicksand-Regular nf
PVFIRN+Quicksand-Regular*1 [39 0 0 -39 0 0 ]msf
979.222 1354.82 mo
(Something went wrong!)
[21.918 23.2041 35.5679 21.6836 13.2207 22.1519 8.3457 22.5415 24.1797 10.6465 29.3286 21.6836 
22.541 13.2207 10.6475 29.3271 14.1572 23.2051 22.541 24.1797 0 ]xsh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/PVFIRN+Quicksand-Regular*1 uf
/PVFIRN+Quicksand-Regular uf
/Quicksand-Regular uf
/PVFIRM+Quicksand-Light*1 uf
/PVFIRM+Quicksand-Light uf
/Quicksand-Light uf
/PVFIRL+Quicksand-Medium-Identity-H*1 uf
/PVFIRL+Quicksand-Medium-Identity-H uf
/Quicksand-Medium uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 13.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Sasa) ()
%%Title: (Untitled-1.eps)
%%CreationDate: 7/13/2018 10:19 PM
%AI9_DataStream
%Gb",KB6W>rfBE0\f#iJmoRm4A6Rk6I;BWXk0S./M@a(>uc\M8(?POC1\B)Go+letZ$!,eb]1Z@3>075*DPQ$9b7">eqA<Qnieteo
%`YV3&bhPEU9*aiWY&>l/KG]HcUf)6\<$i:$A2:B6;5b!d>ZWs&Kf[iS(Be%UqjY=:0=L1.A`(9:ep#1)]^W*Xca39TZ;+Qd8tbOi
%TO%T]Ze\+?V#Al-@#4mRj!FFXi*"J&o-r:)%m"6BPsMUo\%0LhR`uj"?HR,V.gogAQ$eu2K78bI?h/h-htSqie2VHs(MAoppXfiT
%rMgB9#2mDfo'_@i3^7:sk5]h2ES(<<qrgW:"oV<W,RIis$oe=/;E2?O-?0@=+%jL.9GDk$;sANXK"`pqF;fPK0Tf$ai`gg2d'W\5
%a@^<Cqm7^E>ie"0Ss;8lMifF*KG)!UR(@t=&#Ct1'bsDTik>O/pI,]g&erP<n7a]'rG6QTDYai&[_[eUWcFh5C&\]o:(e4fE&li:
%nZ(>u;hCL]?rW[(%?AJ*b70\](?0m2s!-70>b]AuDk$s/;r@ll:,#YT(GHjWln8j3?;0eJXN,Ia_DN6H0G93i6h(F)i$ad!`?MPi
%^g7HI"%,c`0UYlYHp_2Zj$)r?mQ?(*TF;F@#hr:(8u5F)b0IgSSr)jDG'?k&D!GS=Cc@0LAUFg[%CR6K'<dAcP/e$9+A#g>_$hHr
%_Pu*!R((O#\W:J5&7LoB6S(^U^.ctAL?$AX>3H`)M$9**9IA1qUAjcGIn>Ia!$=#%(jo++iHlmRh[9VL=,7Ob%\LaMn7aG.T9d[!
%3j+cB_ICV4r%"1g`KEep/=A&UPt!PI==05_AMR@m^b;oo-3K1BDt"b_.hlBr631+=']>0A!L>1$iR;g-R7,TKAQYU1`g-%dnW<9s
%E1cnSXK"CD6)oGWYS`$$^;FCk/d5GV$j$Ui@2T=bHq1CkkeNH,>jrd5"bD9oYUPM^gb]-@^*D:h(\fe>$hfHtMFRZ)6."OO/5n1=
%hiq81K?'A!\AY=tn$jj%*WpqJO%5!&7tXm?8h#Al_.!sFp^We1'8[mQcfBq8?XPSoUGC:827PDp&\c/t+Foghi4D*rp_/%1`?:-/
%*D\"/(Q;T]!naD;$Y]#:,q2cJLPTp\MdbZq\A?O%!79Zocu@=@D.VF?&`k)c!s)A7'EX)jA'"1M#U=_P`A"D](bo?9AbZbY5QF)m
%Kut-*_W\mc?qOMA=Wn];ma0lHa^Ci>Qpd?HN.!fPN-j>97NNJ\1,0,`GkeM1dQ_Uj2h7O\J+DMPULMBcF,podRjb%]R$9Jra)sXi
%KmP[@;imjG!N'sm#;f%@eMV)>3+&.l"kVIE^bI;%7+F/Z.)T&>XRqGj``45q#5s1HZD``'s+&fgs0PT"0-8/`CS1ADW1HQ<T<qDl
%09sD(CS1B/3fX/7Vq'YQo"SE>5LMac^O.+&XaT2YTR*l!J'pON^JYC<XaT2YN;?>9o5G2u4.]gW\+1@7KJ5mUKm9=gcD>RG>ftkM
%<+7J\OIrKJBN9Opn*7OP-a$3EeEdiL+0k)Qm<t9Im^Mmr/i%FSqWPFj#<uB*?`3W1n.1f3aKr#^mANbWY20o1YXdQOnG@IDIj9Ca
%]D%_^\DQ3@?Sh-b^&LgumeEd%:Kkb#r]81L)Z48KVpr<e4&dJYJke]IBt#a+cb$CS'rn0h7cQl`%/>]Hk6<nSd?O;OFEnj`fR8A:
%UK7=6]gjY*N%"H3TB_k9aOQ,K_TaI2m]$WiWV&GQ'DB*qd54E0UaUpr&PXLo8(6rB/L@.^pQY6<du1.gb3RASO6Z(LK:mrQCZJDH
%_dCQ#pff?[nY2ch7`5/Nca9n5>9+3@8X.^!3sL?@!`moeP$ueSBZm6qj\ui=7P(!''`fpBZS_,9&#;gs@]Gg:Ue4K0.$:G2+6[>f
%dP.GS7'r'%V,JZS=@5si[-+#tn_cq"GSHVcTdoi#Lm9.M9H9]-$lgGpTES^HRT9f^ACu[=$U>@DjoHeb:gfqt.9_J`^=9eo<%!q2
%A.OY[jQBAT'1:=SdN`dPn-E&iU6c>4.MFc#CMMB3%SU=Jn>.TCLDQ+3UJK^tWLfii/7uma(o):FbMoSmqsUV(VERsD/t+Q%*h6PD
%g:D59(m_E7d^&WT'DMC);cjfbK=Gl1?$qWgqn:NoXUEk7XBHE2@+`CMBIjS$qAl'-d!1><WNTf;aFrNl_AJQqJb4LQ5X?cV$3_GX
%'F\hW?RBqN-Gq%k9/79)T1CZ(L-r[cm"4qBV;Fkq842iKVMUJqm9rM!qSihAls^CIPB6e1ADE:e4Wm>W2pXQSFZ1(jH\Q*BmQd@-
%C"K?.$1X[MbS8$MUP1EDk#4n96_=0Ce9q'!`l]uP9N,1M"q(OQXGj`$AGoh,AC>Jq8n=YBo-O<$%T<LXru0m+7/Oh.o*iQ&XpeXp
%1S"M!nDAC<'9NcPV5>Xn>hKoMYt>4T'q%1=>u(X(>mH`@73`r1pMTS:N0I4//@:bM?&'RVRa&FV@0Qm=Z"Pu%+fo%7ZmodAgNNL4
%I&0af9^PlQ#(%CiR;,%c$%B?']!L'tVI;%n(758eKuu.SjG%hAT\5AL\fZR^M;aLlh1^-ITh]_4&pb6=1?Dsj#3ImW2RR]:b8;XE
%fZkmRb:3T'%:-_j4C?O8c6BnD^Ijqp0?YW+AIskFm"l.@fgnHiD4-ebA/-?0TjclU1)54`fo$DreHSpD0h1jhm,bkeV_MpO86S-F
%n<Jeq`>hN=bOSVu#X0o\'!S+)_D05cl3%n>c++b:q628+EZ?&E>\h5Wi&GgO.r[Vt?qA(FnY]&=jp[/tQQ;0p;1u!Y%ACu(XFacB
%%"84t_?Oahp_eMj?!r2=,_P`57b6U21qWm[InR2o5itP7,7FQ7ZS>US0FB6P"^-SuX_2-4:o=lYMFnP$b08Bm6nXk[+p91rX!_qm
%K^>J1&G9V==ba]1')6BVehR+L@]5+b)E_9I6dQ\g16%1SAO;[^N\Ks@Eo0<;R+E$eY*?9>ZPlh/lm'`Ls"S*[!%2c3@\ROM:&,1r
%cf%[T#Z=P+M@sYYWYZPO=9>Pd<!c;H'O+*=bO^=37oKMF"Y,T`6'H/):,F6=aMm"h1?_gA5Ji)R01p\f[F1;>,42`cS06<`9OX51
%%@`ONXmqjb)-dnKUN.7lmCMRdE@[lac:(K:(sE@IC6V&gN;>?cF/@nK4eKPG?jm@S#$o.uKC*<>4VZaOW%L]J:9(*`.BG.kgfBk\
%GQou7;'uj18GQnOk9LsV7cjB-49n`OGgK?l.Om/XasVFuK;'#g62h@./ttk=@:u?%htU+kM&^Ped-J]7JRVmk503LGLT,6BWe?I7
%_GUZ6&0_j`&QK'CdRY'<TpS/7P#b[_B&FM8*(Wsf3:iGBj:GO[<B`Z1!WOKt5aYUZLNjEjMi\$1Srb6Mr^fJ>_L6#9LHnI>R=s`D
%Zq[u&<_kJ#.j;c!=NN#<m:+Q_NC>[)5pB!o2?Z*2!rR!1WD9E)1MKu`j^]8Sq/3]LoeWAaH:X5L_l?&>==KTVU*9auTaH<4qfBpJ
%I<,%d$Go+I9/hGLFe>,4coi;=FlJ)XBrVFf'$WKn!+ZF,\h#_?gLS9";OKQj0<ARX*[4Zs'U\(6ht>,bDpN&%BpR.@S]-Lt=;>T6
%:G>^<6HV,\^_G>FZ.13fo1JK^UBaR6Bc`C"'1PC>+KT[V6OCjM'7qN;UmfY:-/3\m?3k\0'\%E[;&Q'/c+%,g/n,,-F:)ZMW+NBm
%eIbn48L5@TB4h@Z4ia<n$fouu8dtm.:5tJ&=gP2'7)KS*,0O%X%r%#>XBm2GO0YS+];7Kkpb]rPm45<$Xuc#b>8gP_EAR#A2M-D`
%e]eE;liicpi,R%VGuDr)_>$pX"GM@[s-0Q'*pHcr5MLka;3Dr=,U25;$omorW@$t#KS?pT4o_\,VPGu/XSk_1Tij(PKb\pq,$)Nl
%D5O;O"V($m(tS83Vbf1+LFp]4EOO[0X.jmPK!]b:'ko0DXDq#q@\^U8>]hj#=;D]*7>3c=1=]*">Yop1fK5TsK;^%^M3J]-$`al;
%9jW_tH.GJa;O6=Zg9Rq:)e>8.Yp:_7()kn(;e]&,4TT9W>i!6%86C3P`94'4#EA-S>475"g`Z6\cpi<VpHM/+_mTa-N6hn=4n#A;
%G@jb^3VY*,EK;n(&E_FiHN93;NmZ6q^5Lj'5BGO*Yu0kGZ/iRa^LO"R^)9D%9H5h@7/rX;Ebf%'eqK5?BO=4n%d/cn$p[_t;h@=P
%M&=6ger@3Z3-+K!=`q/+Cn-XF,j/#Q)LbIV<_YQeL@#@XA]3Hm(`!jdTVc6t'ABplH06O1oWJ(M,5YgtG!TnNN5MkJ6V^?1_dBZn
%JF>0E%DTdl$t>bl+>2I((5diH%K@"W(06-n6YN0$5l#WphZQt8p]Z/@iqMu]"bgfe)(2Qj"jOu^N1ZQ3^n59de6S+[Oc>cGU&+5$
%_SV?%VW1BET_B%-(Ij(,+`Ci6l6F8#7V>f6;!07Wa7"G@fYqc<fHHC9ZMKs%NtT)"%K)7:./^8b=XiXf7d*):>jUIZ0l./76H7:f
%eu;RZ(U!+_ho2gS.C'O+?Rg4R(?WAPFk<l+BAORXH8((40nJ1u@M_DQK*tiQ:-\,e%e$GTHURI^@3;K6A:'[;baR6%=G3LX`$]jS
%:J1N5mH[DH2rES,fL)g`<4p&7rY&=V=bZd<HQTX%Qb?VC/kDs6s#ESegMm2gKmG+D6h`V8D3)I/S*&Pko5C(Aa3RnW\DQ+(h3#;&
%Vh4^VEN]k$ZmL6CmgdE;_`jjSIr9GTA0.V*=m#JKHN.=L5'HD$1NC1EG>M\He8<"UKB03>T`]4]Jp.IYRt]-VJJ[2(VqN6V=bW%D
%]t&V6k5L3K_Ogoriqi'1)pe=8ambe@roE!+7H)Z['RZ#[6^4OSI4j=9"gQn&^G]j%2id(U]m^oB+)\<$Dk&5*JEPm;>HA>r9qM58
%guCf%,n/]H?K"MI'npQ#D:%EBgH=)P_Ik0%,bDeg_]M-jkdq,h##i-%7?p+,UY5_G.YYENKC-.b>R,[JD8*i?-'<%`*EN(<NV*aO
%ilV<=D?pm$p%rT5,`rDj2;4Q++R]-Dr>o/JkX`_2omnN3h>/eo7l"<_Kb(=jK,9_?P3K2K5$SnM^Z7;l7[*/F]Bq5LSr/7'rnDR]
%mg;t&orH^(\mZ1V"pQP8_B$&pLBZ$3-7Ra1#CTEicjreL$N0uj>$DQU;G6(1oe3a;OLT7Bi/=C@@J!d!%d"k@<p(B<Sd1Jl(:mZY
%0VAp1Y7Gk7U3%;;r#DpbVusfC=MBXhOFQWo,+3+(LZeaqQ,>cILtU!\r8puBEtEk@XqWM06O9#Tol(4;#-F,Gl6Wjp+YInn]/V(Y
%*3*RB;ChYIFU4Er_\LI9KeoI?)'77p>-Ba?V07q"'gCsTO=%+EJ?EkQ/#)U">3cY_XL86D:^\Xo!6*OaI[J(pZO/fG;4GO1ZYC^9
%63k\flO#[4>b/d7F'</%'W9Mtj&0`!W_IT_<m,F^*F7HoJ;XfXQis.8+;[o@2;1:Ln-=o2!NnK!4UlMn)5q\,iPuQt`\6H:\UUV-
%RIr7r3-qRt#9@^2pB(s>qCVDm"APk"(Z5INS%]]V4b(BDr]PpoA\uGJpr^/4r>b)'a>KfB?WA(beR(IWU]JS]%%?!5W#M!!CO!AO
%D]0J,jj<)B6f#!9O5ZdI["H3tGQB$M#6ZP#)>'\ZSu#f>q#P`M0+*?g@CI]0rNhr.#W9nOc:TZqSd4hp^ZL`0_ghN%(%CN\qks!p
%Li)n;*1Eu,lI5sNh=%9OP/!sQBpu&ZJ2%(tB=2rd/qMaI&)+M8TIk.?9qB1;rl"5-(IK_`qCQ&S&9r>ZEWPuu$@GU5E1JZ2M-AQ5
%"7YgG2I9dBGl^<5YLTeF[;YV@mDu"S9t+]Lg76_,q@e67i?o@+f?p[fNEH3Om:*TFfB<H7<3tCtJ1?@p1s?>u*k[0W=)"p&pbOI(
%-;)^F^W889YsZkBqR+iOamh]YQiQdq+QRo/XOs:W/Y;>2$&p")D'R/Ec2q]mOB1R(Xk<gkS"sR'"s%8eKY\0LfDFYf0>X\j_s2I'
%-MZp#o]1eSi6_4-]+-JcA]8!dO1'G:s)ikff\h?hm_j8XW+7#s2kXk3MQF'V]`f*7YZF\YW%WN(5ZJoC2sD-K0CWp<_D"Vu^@5.3
%%FbJ]OeC7!0Dgsp#BJc=#;rc7nLiS4V87D@nf+n8gqW62e=q^m/j:l6>QFI>4])1'"@0`c!W"Z:J9$Du3PO*S?R"!M[2Yd;'1f@S
%ZsXN.8O_Ds:(:A?8O.C<2#Ze*.W*N5p=0;I1_=F)?j>4CC0]`?Zq+*,RMpG#J-"76399_).HRH2>a-/4m\"W%Q[h0bK"B&b;j4d9
%-:&(d%/,rTmW/@Q@J"LWW_ElNY#(87;VaXX'B&R]nS4P;1T@rXPTn9XSqnCLk)+bT\6P:54UqS'T9ZT5>2!6eB%<kW=En"k=:kaH
%S_M1[W=/LVJ2]XTSAn-N"IqK7Pm!3j0Wi?Z3=C,HIH1c70\1.\"Yu+.#7q(\[Vs@\6Tm[+[ho[J+$(p$B\`2Hs'e4".C-bBi-u%"
%^?:?uS0pqT]<gg[d`9Hl8(;TJ^T(i7*)Y#ooc-i8!R-?E)ZS*CW#OZ,b7P1Q^RZn?$Da)07e>D2Nj#hBL@FYM=rNr#pC&Q^jJ[Pi
%<F"Ph%_D>:nBC`,UWECMZZ'#am!,hePg,29G0o]efkqkWkj4`.oX!(eTd(IS<"^f+EhOZq;q)D^`5Sh!5bZltF&MuJ8]#2aLbf1u
%9M1(Y8U3F?3T0>U]"e^5k.`M7/^ipc?bD:&YZuQZT_<_;rG:E-1,E`^cu7J!&&]f!k:1W*eb&*@:!H7@keRB8%WcS]s7M$tf6&g5
%__n=rY%q\Y6FSVQUHkm1S5D3o#k&<%DJjoVE<F^,3;UIi/"ll3&(LWVDW.)nmB1OT8,fA$Flb).;kM,<IO7dldGc4RZGbbR+INt6
%o",iEhVur7QQ5X@dmo@GEa[R7;'!?]r,;XB#>o"ICtfI:,5l#/'&CMH3CN"O&B/9PQHtTbrSAJ5ppPhgQG9O7B#V4.l>VoE\au'U
%CqB9a7)qf*dqMSG.4;iL&?dm(CUo`ghg0HplR9E*>i%q&$K*,cG9^1@*jQXin@G=3fa.'/%UTQp^un.Hq]GcOU6esRrUPgi+o5+M
%7(1Ja\A4/'I_$$MpY;"r!htDWLo/8+oFT99-erD,XG]dl1[G:;$=^1BO":2ePCCr((5C^B"M..hRLp/,I1p!O&ND!Z0_c)9,_&&#
%k;)R>(.96-8D_AO5<V$arpU4Q$oKOjK&2`_)&_DM3hJ/(Ljj.7llH^)5C;5f+l35CIrN7Ep6UmtjY@uh\sXCQ<5?`E$Mod_R[sLl
%7TIoi1i'*P8&#gABX-AGa&b6lX1O7$%+h!b[$UEC\KaI'>]\'aXOut8Gdbo6>PV%IhFoE,%L\`#?N?WCDiO99s*[7A,J().i1mJ.
%X=pFJ%*7%gd=Nt]31U4)8.X.-#.4dl.K*3X27"YVh%8DDn.C("@:o:j*i)rF-=*F.s1.`V^)E=rh<e-V[X$`[/hVSgk.`>P*>_PG
%daNf*SmNe[L".VG&L%J?OB`TE8qYJBN"2`Kgp-dlln<\#J?4u;d@G6q'rL+Bci[A0hV;dh\bNN3UK7X&M!>h++@'U+2,p%\aRJV=
%Q9N-`cLUX,U#?&JXi@_5lj@$E/]ZH.K?h8X>E*MMM)s)e;WLYjKc\N/UFim'\q*b]0id[umC#+CFH:U:r=^9*Bl?5aQZkIUhet`B
%$]nsWFQ;aYqRR8V2[hPo1?/2u7reXYb_;nWQVM.:6]uY;Y'$hngQ=<e"\3M'cIS"$2bIIiFsMK+Ac;RN,e3nhes*SO,KUp/Db&6B
%;JL^1Nhja'[j0"Sb*Wnqq#,@]\H$>5_cjC\,KUDBbmGP@^E#lu5ajQGnk8CARYCF>=km0AL,Id[Rq^17CnKAEAeV($0Akh)S_9Es
%h`?X/No4+^Tpe&j.ACm-?<i6V-nVW*<-U$iJ2;AafCqH]h`F*G'8.#1KLnrNb4*eg_@qTo+S5fqG7fKS&cCW+KUtIhj)U66FR4iM
%:CN7.#!I%S1C$&tk_[-j<Xb/W?S=%@4+(OP8<8VBE=LFX/bcoCnp!f^NuerUDgB!,_-?*is#C"JB7IV)9Ki?sRu.i;01!?='[Q$?
%Rm!K6Q"e(u?.%dQAKo_<S;oh$e^KRa*73[cX.t!jhQ],VM]R;/XXN4f,euM%"0X<G*IMaU#JP,gFhcaLE6WR8m:'3ijE_dr(#?)>
%;.Wp];Q@rZF(A1`#7jP'#1bjka_WH?,Eok(O\&p)9`*,Ec.7+e8O%hf*3Og\[4De@ate=L_u1M(X;mA\:4CEC:ok%qT$R^Co@^oF
%0[-a@ELMjTZ+*n4VK+#[#CQmM_dU"f3B=>1e,g'N&30`oK.&Loa9"Lm/qj)A'P4k63HA4seNjnA*^lc+n?\jA7oEEpW/L\sadple
%/;nAEe_qbi2PR+6B62I51kPFa:.H=Y[lFCL(?\tpq>-AO7Gd%:[lA;X12h.RQ1YpU#oh8rSH"!M(bX-)R4WX2fNXFrVc7S#hRg\H
%>EBpul['$1_H.8+HOKE$K)F5Wh0BD!ZQqWHjaqWMh/!R+gmBoKEl0J6ZR.`sj1d>r$:5OgTj8HW%TWH'Yi8fb\@_c/=(thlro/0/
%pm2mq^AZWG5_3;`*c4U^X0LO2r-!D22\;IoXEHV%qHB,Pn#In-mi4jim`tOcLgMQjLrJi6S&fU*/R[d^>O?='r?c@ZC^W?QD2DM-
%9+]eE)a-9/!Ch,CSpGq7NUHG5N*_arM_^:saPRqJN25^iU"KCQ3s3U`)G],d-l&UJJk::H3$/"Z/nROOR<$*CfLC>Y#uh^>h2G=O
%NqeI4[q:dL^1Hf8hrEue+,Jf7f`P?jIn`ldo#JW\?QMn/_Fsq%J9Bs#H8o/NC>dP+.qR)qK;HIC]qCQ*FRk#Y?I6ePiW;J@39VVX
%TMY!s$T`Q!-SO[O!N-`Unq'VCd-5HS3q75)k'QJnnNpq*bk8RP;N]eBR?"+ln!s#IJneW-nEU2c^!gE(^'&Fq:</<`%ccP"Po2S&
%`l/pCVo)17,1jH)B1<8Ymi.Gb[WKg'S`9N&XG"8c@:i"IHUkJlI:_aceb8[$nS!sCX=.W2.VmUWZ$/U*Vi59fLc5"GllFD1l6rMi
%K(!kF>G]:sKR^bc`G+2>AL%'LhVf;-B40(.WT]lt0mtsT^IYln+LH6;&HA4@rOIIBQOAUuc%rls'cADVRse%`Hm<Y@G@H"0M)\44
%EJ>V8)]b%qk5&;/,[YD[rn'9TlqEQ)1sU^%(l9t?eF_JSS@@sL1olk5QDTVZ>laV;]A[?PV-JCOTEQPHHI,pLT2RR2?%M(R!1fk_
%WJ+lsd;etg8B)%Zr%0([U_f2^+Y,\Rm6WQ\+S%iS?:`'DaaE?`rmq)J=.:Qj,Vq8G?:\ZD68Ho%PZTm!N'*HsqmhY[Of_8-s$LJ3
%85-hLC!i`"2AH5X^NFVJF?jjajdC\LAeuT7RW%ZS5cO1EEsB/EVjfJFa?%cOOU9F-&QWE=>Zp,O#@+b+_O!)YRhhf*Td$n@\jHI)
%(U&D/X)6_<SE_TKW+,SB-\JrQpSK?\>el%c:Cf)S.u#=cK`N;i%jp`V[oki3mB8P6bCqkHcM=2gdlZa946LB_kC!62fN32<ecn6u
%'!iQ(rN:ne\T,]',f\c5bO`c!qccLS,KtAgkiW/[g"PZQ!jLA1k2uf=RG$Z!)$)B#B7"m(2Kl@#R:!@a88I_lXk>u/^?p4HrEcPX
%>n18To`,A=s4DXJkD9+kNi4JEl+*O[.r&ZlH*/P!h0?*d=7G!-=7cm1U@bmckDF^Q=7k6c+T0g9./d:"Zg3Ru_s$ojShKC)U7O%'
%q4aH63am4anXY)*2o*\(0,fds4)`U`82K:eh?ZI.9k7PNB?qIoIa70O^5'_aR0GI1q=Ul9FeO"B]lRJV00QtCG.hs&VKg\4[hJ/c
%EA]Ntr0faPTS%B<(W=Q:cdk=hI/#(_a4B"nY>$s,e@tR5G7ic"Mbf7+&^]EqqqOIpUC:4Y,W_.e2V.\!ZP!@`a]UEoY5@Fae\\e[
%)Um*e?7c,7`:C[3Pl-j0^?^-=B1-pQKko6B#5q+k1+!>p[kG!][rCV;CLb>e%kF6:8tC*7n`qZ!$c[[#D@W&li?B3h&>V!p85P<=
%V?JRM2SK)TCpJ3/jco%G;/3eJVJdY5H8Mo,CNfu#ehYb_dinf\MVmml\0V"ZCE*laEYi45W_D*1/%1R<30ACi9PnDH(^SPf-aI:S
%/Bb5+=cRO%q5d_-T%<nC>5P@mOf=Fel+`h:jkSM>__o3CENP2Q]dGO>dkf+[W_)>UA=c4JhEWPG\'MEQp:^4<O(+T(G3@J^42'a-
%Y:i3*e]rrf!D;G6^p7>)<;^\`We2]T4c!@eOUKS90h'4P![<CO1cgHPdt>a7$J!@6iU=HIS8V'`Ctm'+S7*_fMJ]?CiS<3lj=0,m
%YI\=6)7pIP1STh6b`Sf^B?7WP*JNi`AU1l>e&AYpMe=aKmp/CE)^a1/&>lci425nP1J&\GriiQQQ4RZGTW#FdoR#._MSJ)P9^ce6
%95qT9aJQ!Y3\4s)rfiOJdL-X/,QB_"VZ&mk48S5o8sSs'UcW0W/ae8FIHO=CZ_-Q@&e7\P*h>IanssX(^ER+743_B'fIcmsNjB&?
%S'J?\T$<mbWD*Q+1[b=2fo[(\9\/R32Rta^B8+sqq?3>$l?>FphV3\Yp#X7cKK+lp7\<45CMXam\O\gR9`:rsh"TB7[nTUK\&C!6
%ht_#n0<mAN1I"N0gSg0^4U>KTg1=Ae=)#fTW'':p05"2\HsZp`V0n6jmioSrNs*35#tFnP+denejrWT2_;bQr,2;KDBs+-)K)@<;
%R`heNECR5AB?BAV'DSKL?8%]+"`mB##]4_.n\"%39pAYkD7?:#@[\N\GpD-CmP)MjPe%=sAifQg!rhi_6g1+o<mVFW62C7;pX\bq
%:ZhZPd2TVk#!^:f;?\,FhZngTg_KhUU;%hYXQI)BAG607*RbVYR@g#G4H)\[T\IhreQXW4fQPl%Mj.e#^n"D4\]feR[>MoR5MT>8
%kq16TgN?e'U@?"P=,N_:pbPc"]O?m=!%3A?ajgR"_)9S<>Ymm!Z$5R.fA&TLmg+;f#J^6'Mu-7t%o8.f0aF:U_Iqf5!Lnj$i<*&f
%8i3@W%-SX.N%]S(MNTDjH(O=[*)L&S!bt"36'MEP@cU]#ecWC:U*+OsK=5:oJ\L].#Qi<D3/@Z*o7FdT<j2@)kpP(GCWH`2_1jgp
%T&If2)[kX)>8I3):FHf"Tr@@.G;B!3+>KSRDZ^?r.K.<;#B2NpTlN;qM<sn(dRd76HLf[O^CudFTh$Z%Lh?^C8!lu=M1[Id)#,P2
%\3:p-`=ijU-'jA(;G$X8k"4jA.]In>88dO2b*1;GSG)%9UuZV[P"@EC+G#qK3ZWop)ZGgj,<;:tY>cEtAgj]Cl0LuS-g@/pUpDG>
%4m>'Xl'tF5YmgTl80jIR;E0t9-_i+=YF/K>)MPr%iAW0e'rsA%NU"#$Y!$dl,d&qp\G!kK-a"gCY#>WLSRXnd-fPFZ"6F\m&_F&<
%NagrUIR+`.qLTn:T"+L4[Cs)q0V5fJ`3gtq-Y?XsQq.G$3"h)s:;l'T.&@UI%"j3hYe/pdJ1CY;q26W'4`Tj3Xs9aPY-^8R?5(qS
%>Gam1%+5P3l=gc)H[+7S!nq,mMX[G@mfSDY8q+P)O*P3c'=49tou-3@'sh8b\;koFee>B]R.\DaG87G_[Uq$A[NYSGFbK*g+t^R7
%SG=(K)7bJuj*X9mkkPo*O6D.#,p%fnFq=)X3Bqb(G<lg9iJ(?<$fPi)i[O(a8UIN.?&YLk.$F4V00'eUmjBLBoZINX.).WAnH8_*
%=+7-BUQNd*)bS4LlXVIcO.iZuap&Iml;gbF0&lbN*Y3i/`=pD8KH=>>!idQ&s'(\D"G'nJMfg<L&5u;aD2Xu&[Lg=ei-0@[92D>$
%OtYY<7*Z697'*00.,hG\D%Prlc?YW:/C-m#LVYsR\JY)+_^/uh08\lqZ_o[6K%p;keEJ(!rGu:(6dt<p$g*,cO57#OQu&G)jI57W
%%8IWVGDW"@@'mKof@9:D>&iL51K#G+ITZErW<k\'lMluLZA)_gHB<nh'^C;\f9M5p"H]q]&lsI3ZjHc^AUoCTM"GYMa4BM*TWjkm
%rMQ*P:bPjpcq?%#=m\j8X39>ub>21*DcrktCMD1h0RV5kb)9:je(=U[o;Lp]?)t&K*L:rDrkUIjd%hB3p_!SXg>)rME.eEd5Vj-M
%qLP<5!0f#u8YR%D.CM_M/A9E(U('n!U>cTMR@ZG_\/,LA5O$,g/Gh:1*l;&%oHg4&"iT;:-.0t$$Z.r'6NJ:W;sL"5Ru6etl@4+B
%hi!csc%!J.IF!Ehn+5rCpCZGJ[-$RVK&#A>D_3I<;i?)2fc?&N!;CED+gn7VP=p?2d%''8]G:kKr^G`O_JGs&,>c.RJGSq-J5X9X
%QLNB,#oFF*>Z3ZsgMc9u0PBm0.t&9S!XVAE"Blj9Kti?S!Hd(_(e9@FfESR_-8:h2fRm=?a<;0GRNkGbl49dtUHRi90"J^3&*16e
%g/.2k'(MqU(gnm(HG2-FaHGk0U@2@JqOHUk4?YQP]?^jBQG;L,"2:to#(WKiAgGm/1)/V9(V%K%5k;UF_OtOK[LIu58t<'hK;2h5
%b+p@`8X_`bpeJAKbBM)%,u/:V%gD>+!9G[b7T\\f+SEM]*%E6JM-**91K]PMV4,2W%::.4j6)>NEN)kM--AgKgt<`!_TQ-aR-fX3
%hu4]fgZY-JW>(PP`hR86_GP=VNb)KR/?7)*`rTsE,J%SW'I3V<Hr]T!a]E5a-+;CegX7`ldcErRl0a5l^(&^Rc?Co5<%8b`"u182
%TZ8r/7U#)]r=@r(qE7,"Q=Ka!,'$W)1cB[IOSi<f=b%(E[0soW\O0_A+:0M(EPn$2nb(NUi1,8.1Z2DfXs01a1gpX/f2R#,YRTLX
%E]sdPe1`r9QHZFlR4eaq`3eudqoS@TZU;1T;s$[Hab`.tWpMmt:r^mQ99i8Kl[6;L^k6OiIt1YX!$YBiCP8Ob+sO)mIr]Z<O;JN]
%/@tT*S-f[NZGQ,:X9@bO7&[FSPZN94^g*q?V84iFnZ\rB90TOG%ha&f(dH.o(.=j_'0-g]F.;ouQI.Q2-J+=fJ.8V8l0t24FTlWn
%I-iQ'YC&kmV6#aS!"I])GB,lEi<#OjJio0^Q4o+t@_N+Tiu-),Al'kiEUeI>D6tJ`Ze^?ectu32Y&sf&0IPj`8BM@kU="7_o*R?!
%E+p7b$l;*k\YZ%\((t,e*'MG`H.P$neL6OA7#AM*7Dg:Y@EjfA".@/MW$OSb&_pp5^;PdF\4K*9S0A8@m5ojkj9gS)6W9u9k^^^$
%Q[W2Q#(?)&p8CtgB7VVdl\V<Y#:R+o&)75tP*2Id_^&UjgS,nNe>G&3Ks>u62hj@Er3%7#Np'<BALocnfls+o0\^N\F\0hk<>*Pr
%9m0:%9+&p%cd<G;qmEl^@=&JqE?W`N->(6_]GRXV?+;6ag)>.PKgeuZ?:.B&2MK+>8.ZrV45gR5C]aF.m[uh2\nNmp0m'OcbU;`o
%N07h#Tb_L]T/P`q]lcM*^f(:!P`he<%Eq_g`6qTdP:+0e2Tfu*d=`qj^p8L:TpR//7[Cs\!M4"LRt=R!Ok<7`<#-@%2-0(u8ci*-
%@#f"&%WdpT]$d&6TI<K+%uT@-q2r$8hdOKb^1$(:V$X-a>aQKk7<,*`)k*:/<sgh[T%Fag[d;f8LS,4`UdX*K[eh3j)kjOk"_C8"
%4]M'g?:Z%K43/0k/,D^]Tg1nH5S7meRI\f6@QWJE9sGl8%6PXc6TlosR/-]p:$;1E8F]@<SR8gg;(F(d/P`[j4A\aSNnEt4$ctHe
%=k/\`_FDZ4,4)AGGQNJoiN)qJ'h.%:Qs>MWCk/`gCp^NTFBRj?:=%Y3#_f*O%"h='64Kn9T;eiCp6MKQ&Dnn#$n.o"(h1[`Yo(&I
%;/OR_TUj6BV0[OfQQ=&>6M56R(:TrueE4/@QDHY+X*Xka$6f62W)uGfI%$$6b;]CdQknrtC+=$SF1K<V_[U3HC2N08fSdd&pVmik
%[&(,5Q<r1:&0HHiR8q:E:'ON?\(Cm4P/.RU@Ks*.1,H%_i7*N5XJ@B([^/(^$)(G0ZS>:5^)[DSM8m?f)7JL@:u?i3Yt,sYlZBuF
%'kb-a2%6DYi^:[)75YYT"Pp4eKdn8'%9EY'3@b.+qRB_>3BM^qoDLMV'Pg6nOA80m]JJbb[af?nQ5\q>0pnJ/dROFs>_b:o@P6fZ
%"3.?CF]bK@7?#VW`\LG#hMPRXfSib5^jL`r$O37/C?Ed$9jkO28%T$(UTU.&!6^3aqM9P0p2+FG^nNM<_5b=,rCe7=[6n?VPOh=7
%C^nkGA%Sb^$g67O)KM+[iF+cEj<2^@Vt%I,jbLYFc-FHIHb483><WGWZf6G3[JADH+-ldDX"/l^)sT('Y7=1HL!Au7rpFKJDtE%0
%jYSItlD\eQHCA/t`8_46dkAEOh_pk@m+-5k4hJDTlY$+8d4jc2]63*LPu:+MrpAY',eG)[.Y[TADS6koXh5,9Fjdc%*N"_UV9RNg
%^/TK0b/`t')nCuJda&q7UfLk^\M,EJj,5klGCJWXFAm!27lAcH(/pW5lMBN!0ior[Y-!$sbABFS[m/#2g!+uE'.@`L%EbaKN@*in
%iN)nQE],=(T5IPP50Mi$2Y/N"cq<+aF;T:/0%M6pT@rVFPoJKi(j*O^r:V[lDp+cl_oAB7+&'F&jsn3$/fqq_gDGHY1@M8pHE!LG
%==po>03d2AV:]f2s't(HO=dP=PmcATIJ<SOTs[n(ZQJ[@4&B[`ZuFV/-Hr@*p>YCMqt[1QkEkmCJn!YXO?9EmImO.dZ<Ki$)!E<W
%Fo@QLFmCQK^s;1F37W<0Br=kfIP[9'l\CV<a(@_VZ<fZY?N\NK<k-XRN+m+:$XjfEEo_=T27UKaq:'Zp_f0h*PV!km0AMdM1'tI+
%^3KF7>hDacK]g/EFlQmd>$H5<mI#.a!(a`Do`[<,&':=%72M\52ug.K%*A^!h)Jge:CF)>0Y>#'p':"SfM)uBGXeg.,+omP2LcQ6
%Ifsr<g[_i@S'j#D?e?d?imsiJd6g18[nL1R\$Q`!m_/#/%GgAeD`-C$4JUS/7h"*5b9rNl5cO[D3eSkt#a*Z.93@(0UYc^`I.7B6
%]?'[>ilV)YHTbF^^'BP?nF:.JAQKZ=akG96k'ZFe.X+q7T,3u^p1O*jC%DdUPE4U$?SFh8PE#If9-eJIO5K*Fb/O+EQU:R4);]+O
%QJTc<k'@0gE;)5T\nhXULZurok;[[/Z@6%2Xu24oFqe1k(4[YQog0IG]kd<TK=%+AZe;I\1nUfi8V:I0%*0_KThNJ.kZ=4Q!"M%?
%_!V)sqo7&goQ>MaaHRdQ0gl9$YM8._TTSo,5[MMo)s9kT>]OkMahZuDfBNkXSffj8WfBjJF"^#q6oWkOhUZIf[<Wb71#(7Ukh>%f
%2BI\r,K[c5L+BG[pXT\RjQ/l\E"XX9oEtBO:-c[n;JJH`bl[=u/-FfGed?>t;EqQh^UhXcm\;_\GrS%HYB>iNn!AVF[>`eGA3RN`
%!pCt44`(=PYh@88o-\`(B&c<KM/rK;W?u#E;O!%+a%qK47li<,Sb$(I@cBQif\M%2#nS"g!3UXS>Uh'uq.0!])TeRIjPY=doi_d=
%p=Aj(;PTH=]@TBPg:CPmD&`f1#(!*TiCC8f*)&NV/t8sX;!hsWT+%6sAC7qgCp"a'_0CYL(5\mRgB0m=K-$&FWj-U<D<D\Wqq#:/
%hR^g7/_0apEm)#:l3!Z-kC_M[\nQHkG,#c`NgT53a(he`hVO<p&u,C)Eh+N(!d"en\g'mc:g2]N][8Qsi@-&9<@RSF#09f!$D_#2
%>DN/(OPf_b6p<Ba+**XuUOrD#PC(Pl*u%&7aQk^F#:I^jaSk$C<uFutg/Crfau&T\-S*b,Qgp<&N#KFbhE*60;lO8MJN8l7ZHViR
%VZbipH0.*7aPh&-G<6]3m<0<D`b*?M,&_a+"*R$IA`]B$X)A0<ju`@HQ9!!NjQ]>J\09X2Y7/S@?%R"`79i55glo?I#7*tb%A@Z#
%7:R:TnC8FI+-!!W*'>Q-3n+KR"R61YMOK49>0C":DfTV!0%:?3DT%]!BOe4ngG3q;HPi3,4ehe8FLDWN?1!3PLE).FeGnfT<^Gg?
%"b?f8def:O8h84J%Cr\^rG7nJYM7/Qb_4PAeA&3F$Og#fs0/Ps8r"!`:AY\<%3cnHp$a**TV7bh"9\Y#1atZ>r<[0?c&DmPf[.XO
%s+H%uUR,D:Ta.M81ONVM&Mb&Z&5^9]VKbN469m-_:d^Z`E)9-o:i/Qa*.hBL^^n&g?=A2jf@sTT2qjM\V\Z$<2MoTZA=0W\baG[R
%j9(QE;.&e_gqWu/dHsI]#j\r:3.fT.g".]^IXEZ)7#Ye_A:QD_&5U4#f90dh2Zs`r"N.hAW4*)bF4KU:DE5>G<Il7=N0=#^PNr;;
%q0#Yb4h]T$qq"23XYF't1TaaZ_*qbX'L/l^$Wh8#p@Cqc<<)_u`k%/60bVpF[C\f[,(U]omQb\bn+!'E(>j^ZHe9Z-5?rQbPb-/B
%@huB%/$#()CN+Q+4?ibgP9Aso\D1Z)Ga>HoM`#2'o%?c+hb=*](7RN*rae1d=r*&m_t.XS^eqf5Q0K==E'CfE%2,gT,[YmKEpKP(
%c/_1qeBoD6iC:9$*n+bTG=PgP^jh%JE/$"R9l.6I2/jK>eUg-_o^X^A#6kVc@*9qca)PE64;VNnNTn)PGV4k6W"NhV!f%e3SVR.@
%Tm8>+4sV2jo5M,0+e)387sSY(C8fRLqK@l(o!]?pleo$mS56;<*nG*%MsS?-raP+`6DcMZZl_l-TSdhk&G>K=O$gn(pCsZ:%QYXB
%H1D[1\d,3MrhPuE]/g.,&(hTFW&>8=T*(j12jmoPq-ZG5-f5u,DZIArgk4RZEbEAiO!P;*fu5iXJ(2<D%;ER9?cus]>O`g3G#'Z:
%R-bVkf^.cNHo:u)^O8T:Q[<Amm$0d[]<g%1%cHXtmLU@ohL@'j>*&YW0]JE8K`mu6!8nEQ!r7o+!,to_RrO]j2PK$tSH"E5ppC>V
%bqkiK%aVqi3mr<%aaABGoGCJ18X5p?eecK*mJsP*F=G[1A,=n]$pUOdool0K`Hh/>\ou^$+V/^7\!4N";7VE6\an\@4XQq,=CtGQ
%KA&>,dL5UBrA.2*FKMdFU%_-&%D#CcZ^_cLel@+hoO\X,Yf5sG]g;t.^bdj$6_a+W?N)&h+68j2``:p"Rtld^>\<:]W'70"5==fX
%p=;hT=`OH)TY/"I&I5&r"unjeN@n%/Qf[e]R_K#7NFfS7ce[s47::DI'r\Kj2U&fYE[PDj:oNCs=?I5J?Y)hKVAk#!(Dg(3=k=Q4
%)b6+&AY]r9bf5L'@p5DNSrJSh5W/i'U<kHuqs>X956N'Y;,R0@(n.7V"q^0.pjk2%fJjZ"0-'S^aCZ^brrJt3g>0<(42-V0n6GB$
%s(E)cS]lgTJueLYS_mq7KnBQ1S:Z?B2hV8;38/P^PM"r&QT5p`#Nt&.+1dD]7OqbTMh#\aT0KL,:SjE@V$A^P2h1NWs1GA3Ya.n0
%5R&SPQN/crLJS5hQ"o:T[be;Uo(rHupp(5kH%Q<#lK5HTdHbjY1pn>SEM_j)g'b,e[\2u$Y*J8QjtRZZc!16GGa$/@J_Y`k+hPF3
%[9Pi\Zlejqle>8(@f?3VG?GB>+l=j<5GdomObQCF0Nc0XKStTr-gT+\\O8l:XPU+I%6n-(?EBAu(7+EH9n9N3T3g;$*j)TI,*PN\
%!m&$!>P\>aOdY*A/ll.&]uGV,^$M'elcCKQn)/Td?LlFqlU=BC]068Er8pdI-Y;KUjqH9A;"neFcQ#.8Dp*!r.Mp'H:Z%Ydc1]<!
%.BrJ'Eol<:_7CM'\oNW-k[s-PG^-SGFhOCC;;XDj'\VK;f03$dD=bg&<kG^^gdcm^9LNod7/:Q3,H\/bEpp$4)5<s]50tmZ/Ss;1
%-#`Mc576"h"p0q=5",DQ0W@8i_+\K+$+!KHM?s:lhnW_nd/&U@4G3^0*[d.5jj/SH,(Gd&$tOW-T,7FEB'!#@[-&5=JA1&V\aJmZ
%?q*\#DBS>;$2%WeZl+nbc8J>9fr]X_1s>!cD6IQj?tKBbF>fJ3CA]J<1U#cc4XVg#:muYG=/s%OGeV?-Xg</+1d/sZ<YYE%;&_\9
%f%qQ9._@daQl20"5'!K7/sWt8p>elOH-qC>)G:Nb]E\i+6LO*?>faWb*\?_I%We'-8'\b<DZ)_F>s2`AgI6r9%ZnjAo@_A-mOapr
%M(^9AC!o^)]!dX]$dd=IM\]?0s63b@hWIZrJ_eiT!Rs'#pKMk,CrLqS/G3G-rrUQgqf;DA=WJ'5mj=)"`R&0@R,.]1r]sZSi2rH<
%06[fpdZ)DYT=H@TMTC!l51E<C$6O/*c`[\e\N#G.K<ml6i47_uDUch*mBsp0.mT5@TD?dcDISuH0'7^Gqm]-#e5g)p#eg!GYi2V@
%@^@NcIunAf#Za(S5J?J<Q2Sa+ET(%M2?bgG6FRi*8)MnUim;PQd+jOnCo$hbcsfP^n1?Q3b)<atD'k_HBGL8cQT/AsA<Jom>JIo@
%X6jei<t?6/ciJQJdc.^VD*LBX@M$n67!4nG[_B>=:5E+5^f]<?c^dMq1#S&[I:Tg2HOD)t.b54,ed)qFAGR8>aka"B.@1;]?U0_c
%1$Jn-6:6/R8#rLZC;,)D/_(M?cuh%LAqI4O>cMgJ#4leXSeH.h<Jt_pp5d['D6*f6ML!r=%E*d7XY0LM=B7rjo%[>%J/Yn0,f%^U
%DN9SAPqN,O]eZG\SX:g;%sjj?i=,f+H:^e)qfc0a/O(^37ptNDreNfN:d\$(5*]DASqam#RY31)WV$9+*LE83k-h5*9#`>U&([+1
%chC`TIQg&3KIX0jC<ZAYC#@*.-Ll^.cZ3u!@f\4U0Y'j86n3)EI5VcAl=6Is>GlC92p8&oI.@Sg3e">=8m`VV/We;2b7ir3D`'W"
%bJ:`>:MM5>M,eL%jEE&+-6.2=@q]]7PQGJJ!J&)NTO#+a;o"I7MkKBVaK01(NS=8(G+1.gOTrD%[>HgD6=0XBr$Z,_Ob*o+p?sf+
%TS0$Q6FF.GZ$$@8Qlk;\_WJ:ClRJaR075_c"D3hCVJb9`\b(>XJd^hZo'0*A\e)F;oXD?TjUQh;EfKF3pToLr9-g5*lC;1&%W^f;
%mu>[*8Gq=OYQqrL'UZ#bJ.moo=BI52M&PXt1SPj+jnOdF._ln)Pfq`=5jXb%[Gag!8`Ua69L(8i'[Y3$'Gr:RVn'r>(<k%XH<8]-
%U<uke0`R;/#=J+0<(n3d%-XTAQ]HVQ)Th<GVsAG>YAd<O4Z);p$T=X5^5+ogO,pd5eTGM72/&nQg#Z+TlfeaYUoB7P'A`Gb"/15E
%!Ru(pQb2;l2`d)FhIcY#\+@T!UDT['KmZ\"AMBmXY!NaF$eiru?mU"]f8kg^!rGi"DhmXGnk0^'WmjoMet[,(_>/MZqRRe9O)-tk
%out&q5FHs>G4V:7V26$uoR&['P:JKja&d=@`OGWk#FHti9*@"iOgC=N;D=MR!ti"+O(0Jnga[/!)YNCXO6>5ir;&6`U"p6=_\FT7
%*eEQu[ugV<Y.U+hla;)'-3Z(,#JkHKdP&bt13DnM3F;s\F8lLP9^O:93`,oCp0.[rC:Du0rr%9>@))O>S7BO/7[UnAZ*1h@Qo&5-
%FnH`Q-p^[_YFA(S%n<SrpZ^rX'R$[a4kL3_=4][[gZ<b=*rG4*ojog1<[C9KgW?Mf7MmiJeV;r"#:^m!?:]qi#CFP2?.iG:@H83.
%Lm'B_q2<_]dsEK].%`[*)I-mQeGXg#SDLq<D`i=#b$X3FPPKI<RnTZY]nUgB4/qf!;mDaW"t88"P/,&s6@&5`T?`uJYM[-T3c.,L
%/!?SnN?dE;2"T^a6%P4/4Wg$5`S,aiWf:2*lhCl*<QrI"n]9TuFFj/o@(i(r=-2lR51iZ'*L7<F$HS&'B)?l6/QXOtf*Q@%W3m+W
%ES'khB?GpU/;>/_*-HtM4Z?$<Rr\3Jda7<bde:\R==^RUrMuoeG4c>""]-&P4)KNF97W.eA4YR1p*.&7fYGifd<]t4Hs:i#`(_6d
%?]LdQX!d3&Hnnn:Ol3+HA?,76fYIpWpnj,X6>9"bTABCrR-%'21jo/pR=HLW.,L!m^s%10hZ1R)#Qi@[#Ctso!_\YDliFb1i7nH-
%Vh#71bOb1Q4aR:((Y5bhDcb\I(PVbTHtPUPV6KD=U6?D_p.fu:ms2/hVeEs6*W_T`B"!js&?1Ga<%:K-MBn*[ZlEt]*K?q!-#`r0
%(u*4Ob'Y^t674-QrsIc+M3dE>NLF]#<b`CX!`2bh[u6=>3eW?8\XN#O1>rO+KEctP2Lt&9?0N?tC3@V3FJsI;n83%*]4phm"UN$!
%\8FQ^7p;\[[)3(b:qPC]GBLoB#B;58"WK:%@"9H9h6tp`Oo8hn\TrW73TPJocjXR97+)D3"YK]:\D;!ubd]dYLYY!UJCX9jm@li@
%]E,XO.n^)Gg865G6^<"Oq+.YX$KoBKTVgK<?(=@A%a[>+C1]D:jlDA*>nh%TFMe%:6ld#2F\6ih8t:bGbpgaYH%Q#\(&.M/b0[Mj
%/[4ScQ=uL1:q3"29-SN$?C:&t!Ncp='F)K,X?IWpJ6QG_.A4^9'(P>ldQ((&5@jkB&dOe,jNf<`Wa`RBX5#\2Qmk^We`Tb)<AGlC
%%QA.r_,q%u!WcjtaZ!Jl]$:1H!Cp.#HTa5"/"3[UeW;Nd]Gt@!3#+Ab7nVFqe'*;=c9.8rGqBKY/CR6B$WF+[\l4#$[Yh4CW'QFV
%]$_mh&agbjEdapHcO9O,O:S>_Q\Plf-b;-KbHWMGCR=,JHm"J%<rjahW(S(R)#:",(:LAfhC4^m.1Jh""OrIj0EU"b%uRY"RH?oL
%Zso6Pe1(">C(!RW+"IE"[Q'nLMX(@T"-8Q4qu1GP?!j6&$-@kfqFG$#D&FGMLHfS"Jo[;^a9SLMC_FDH)uCoiHp+.RI6_Fb:dT\u
%@Fr$"2g@&L>M%8W%s4[Lm/d^l,QTf#kBq,g*"VAqfjF651E[J6CfheQ#PAiPhI3mL:;5)D_7b!-ljghpKVm=K]C-\\5N(?-+_i@'
%Ms[+XEDmPU4!@nrKc$h&OCGY!(h=F`ii9+HVq,G6]E=@[9#!t<VabCiR6kFSN"q3:2H\B#]G;M\3#\n[6]Rh1&gjgagV]q_[8m5.
%pqNI3[VlMQ_PZrsbq^%8fCF>="?rP'igdi\.<Ja%-I`a?cN/T7ZUrTfa$T1-5"FM5ok90CV)g9LW7kk)JX`V_*K35k)j:6f7M:hR
%&m)b=-bQ\>2`4#\&k^gnO+i,=g)iNHcDkk)&m'Ws<X5AKG7%;==*OM:'eg,C\g4$2@i]AAE65!98N&to0BEU4-ik^_3Q`e/\/S#(
%&hc^8[OE1N+OOUC0iq<rFb>mF!@RT(+QA\[@]jYed>_D-@XR-o';<AbO1?+)"9kK2IP'6Y&S`\*O6W+g$"uK\&D(#e2*N9(*!D<t
%:cXD,!%T3ND,=.I#$kCe^_k%@3kKSUcO9b6:2cA'7)b)ni(28V1#&Ctl0/X&-uMFobeWLU$K$YgV]9fa]K9gI2,8f&E$?J(!T]7J
%e:jS-2)>q[#anS<1BnnE)GamW4SBOX/7`o`]=f\N)i;?!MsWQg5!tLIPN[kf7#t:2LgEo3;@]u[i_K3c$ue;Q6-Qb,B]NJ\\K>ra
%6;^ACMA`rt3?$n]qr*/dRusU8Cmir7`'nj(qorM)pu4)S]S>tghN&!bO?]-T*td."]VYaWf<m:G%\0[,p0(?&IZ)4T0/d>*K+%>k
%HE\.=X%N1s1UI+$Y]..j_@:1jlI0ESk;(`]YMHkZpc"pYQila5-sg6U"1oX/H"Q0[^D8n5"5d.;rnpZ9/egChJ;=%$j`j"uG_$&2
%h`H2@AI`%-p>?M2G_6VVjp.`ul,cZips<AFSeaOWiI1iGf\9U)GhL3RT&(.gq/GjR)jZk3DPJ.rb*:?INVj]%/XL[%48$[@DGs+$
%$YpQ!LG"+08CPI8"PdcKj:;YW/,kOW>6#gf)J-cIGA@I:\^tNp'TF)`)9\pfl/[8uF-$$`UOsHRgrKYdK,:[5MS!\KT>,iY!=1?!
%\IG5P.,>U"Do2gjqr?HtEj&<Bm_s)FeD#CJpS\0*FC%dj4i;>n?tIn)dkK;kDF,s4pE0@EZfgURH+Oc?=-.FM(WC'[KsPm^&+"f6
%qH"V0a<.MM?2K9=+QM?m]iY0Kr*:9D[n6]<hme?snc6pq3<TNLAiFe8phg)2mseLi7TXcrMs,^m"AEKT5J"=Cn-o<OkF'?\?'-,Z
%<rZ?NjO;.C3*ob<kQQ'\gJ.,ih8Z`:X/hn*Ue<r`B23h(XChRYV$Ad#.?f=/N=2)<Y#V[OimUO.AI[re<dNSI9mj,<(t2f`PP=6@
%]cJ`o[ICl'=4@]EGh`8F?b!g32t-EKB4Z:nn8MphCLF1ahmV`+d99o4Mk=HN1BBF`GKZ5=oi'=GkKAkG@d8"$LKUfS\U%12oVrHZ
%kW$,WFC*)NXEo;+p)!/#b^8.VAlfIXTj(G(5JFIC)jT4Kq9"S'C1CH\ha"jVb,gm#;gTlU7?;o5?Isqp2=qI;3@tA!YAkgHc9O<6
%5s9.Q/UL4]BCh9dYH7N3]QA#<CUjqd8Tn0u0s+r[f7*-:B%?35>^3alb^80;?gY%mQ:7q-3HU:C,%h+`OeoJ9]n[uA?3AqdQWC=;
%(D]1>pF5]?j*,J>+]CS]4uWXh^>-g]`IARTb^*jC6Mnj0fB(I;DI;]E;OXauNnM0L\2QqKNuM]q,CEbt]r$+1?Mc8M0+*I&JuaW4
%5rXYHO3/d:\FfPnf(F@(bFBPa@^+JW+]o7=5#_"L?JMV`k+pJeZsM_HkW;P3QC_km]fn5br)q"OfAi.nj%r8Xc$G(b;`Ti6/AXL&
%NuuCoH@:T*e\fOu7BZfmEjG_,6G5^])8NptUpaj<<UNAeA_$)iF8`bWCXt$"VE]Qn=h.l3s4B+rnkJV"fs95!h!3IB<Ng9%IUhOY
%onk0B!:Gn8mbM5W?T%6DWA]6@g$?[*^N*l9/*I1Zr4'd05Nh%g83RF*pXXo&2sp8qG.VMBlhoT1H5Q;^\etQng[>rto(`OW2))s2
%B@1O'5.t5,]l&9;`R>sX]p=$DaK00j64")_rd7:[7+<rq!*0VP87"@gC^O&Hp:<!&ZISHm=o7h(oU>.d@4hHA0rS0LDkt's5qXcE
%M_CHCU/05"O^:jh0W!2t)>4t(oEp92P(/0i:#1A,b6+kJ`>f<QKS)3#gqCdKd*V*+or*`O7;VGXj@!Wj8R6hQ+Oso(bRgl-Z,cUn
%i\mShd.*7ULh'@6"VaCPhD%.c7l,opl_h#a@F4LCVq(p]3s'>'*=1Y9dIJ_bg2:^T:Fen/%A>f(*]thSY(u*:a^t.ak%Wk`DZ04W
%cbF0>?reDa(p^;n2Y_O+ITj;-A.27V87O-O;Vo!2ohmcUHn%`-;+8[qhjI("l`8O5;W,sDEQn)[@:9'+B(:8rk%XC+PsCd0JV."N
%])$j7+^k9@l!sD1n5PIUkLK@0FnOq,B?p&s;#.`8Q;=2JMdH]llfpR*k*>VgHmToDIemP5-J0InEq[&SAQaG&\L5$l54pQ6$45hY
%M`?YPs5N;2LJjdW'SQH6;s`_?p'a,'PW5#0n%4OMme55?He;:^mE1$:^!,fTES97+W>7]B^s>3U.5#R0Q/Z,C;G@Dpb6.6Nru?9W
%.u!Q]A%A</GG'M@'eQ:JfP.5kiV$#`%F!p]#mg=>9:[1>kG'Ohk<WpJ5sL0UFa#";Jt-*lB;$DhVodfbBtCp.go-du!E:S2aI:jq
%]`J5L)6rNCq*>e0-5W<soVAhB:rc23GE8''!irdHZgJS)6&&_9grLL'=6NBCFe:%.h=e%7]uDR\,_jVY;52[^o'uj5@H\YlG$7QE
%DP@;_"5^]BptCpSYOc<`AEXbM6R!EC"r=lRQP&usY84h.^"Dtg^R3O*BmO`\Dd^sC0Gf85_-6MXC$6:RUEegZC[5<#TqS+47JLsl
%r>(X"W:c^cTq%(KiM*RY6d[1N]"XT--jPk=NA+(K^d(\cLa)'bK.@3n=pSb"Z[Z28Y3[lu&2u=R4E5S?["7'F6,Pno_=`EFf#rV)
%nCseZ<<04Z[6S'^s1j6ehhj,':dSG,A/+8-l5]`4$q!>`A?*g9?j#'nqR_:O9M[*8ac_c9+97h)`6shB[bG#'<+TiK(U6@?-r:rn
%2>`5'l%4h,d.qX=.k\ZI"Vj>hB$imE_a?/q0!61m3/eKD+ZS]AdZXO:E@P'#9,U[=D`ahMaMq4j"26oH*e><'dDle1iqHJHa%hF\
%DsV=<o=`Bk"Pq!3[uO5m5Rp'chjihJA_qG;+Z/Hm6:SX3SLkK\Tj?u5%V=%%"Hqa#\SF/!ZDIn^l[R\<@68hAGG]X/;L7Ws>G<0]
%6VUol+US]76bPZ9+CkF?S.#WWbsFrIkRm;qO@#eah0$CF.N,#njr50A/na6_6e('kSRK2Gim'p70WGWM2&"t$6)XUAW,<U#b?tL0
%qU5lgIB+.IH\V'tkgLZ(CbEb&fe[NS\cREjc<C@J@o!6"2/mo3(T01,@:!,A7_E7KM'b:P2L6jZftk(G]I]7s$-eeXMa9.\'Lb7r
%'(kriE``'68++Rim8BE'S^iR/MePZCmmb6TL)>R&-;AW]]CW'Yna)d#($KW?aLnqYIHJVf$m;#`PdISN!s>k#qZ/h^QAoL,/b`]I
%ZspgSFC<FF0U[=k]ufilCuH!?1`5N$]^r3WiE7Jdk!K8L*g2:N;fh/EQ[Y7ZUoX"3fP7ZK;n?Q':SX4`L0HuP7l/NuUtJEL[NTeB
%ZL;=p%8.k`<$)lDNW$qErk3-NWRRVFRZ^(tO0h;OR^o;iSRaGPkCKIuJf]K"?"ISHm2Mnq0YZ+07BDHi&;S9Cio[@tPuWT,2($l#
%1Y&(0QR`"r/!IuePG.1#&WkJ/)/B^>BJ@0'K+k#9CVgK8/EDl?>*rc,aS2KFNL;3C,*PAtFJ;<aNJTJp;p4711$m`1*AEHf[cHMV
%!,b5KR[rO[c/1F\Ko!Rr2.m,-cgN:2#j^684l6bAH@IL>PkGku]$k>(f:::[\'i^7#[0,*cENjOO!'0e?`kdtY=iYE?6"3YC*^S&
%1lOi])uIJ88)h>#Ag9$6SR=,UX-4/JqN2Ut<eiM1s,ik=p.]Y[!K)0OdYkc/-Xa668_Go-=qh"D588qD55!eY2t#q![:SrYB^^Qa
%3T)qfd>dC3?55A__m18G]dQ^R!/2g$"pBor1(sg<QHbW#\i^i9@scg-[(@ca0!("jp_F<+b5pTA>>+u-/Id^B+X%$G&"2S&kH0Y5
%ObN*2=?nW0+q7;@974]m`JtSpZGRJAZOc"fiH1%^,"I%`Zc<h;]n*L/k8]EF*2-(B,dWOCFGMMdXtJE<#;3)Sg@n+W5d#CJ^c[]o
%<!8a:]mW*`E:Hp1E9c62`^1(Y0ktId5R;t]5k^>8J_oc6$)GdXb\5ec`:^3`6q:p]Qo7KGX`"2WR[^AP[,DY`fFGh0N"0$HGKb_l
%/gR,LZbs[mG4-99fs6d<lbUH^NpU*U(@9Er47'DOeN:3Bel&S[HbH?^+nmlJ<bT@`<`ZL9\BP?L:%)35MR;G.XJE[?Q6J/)foc0:
%5nT8*i!q$-%^ZrSgA6e[fJbJ]H4;ik-if&p'(Idtgc1e6a$Z<AP+X\_A7Oc=oe-3?O:1uUcHeA%)Ol@S$j]:B?lZJ6A"<cW>B,!U
%8/lT%9l1egB[/ON;-MW+N\nJ'^9*@#`'MTee:Dpo1MT:'B@EXkj@MEljG"Do>/=FF?peG-F.cPb'HtV$EMEn]CW\sgX]j6_)gssl
%Xr+>\/5c1HaI\%.Jn1<]A)PCONgYk&JPE8ASLO94dC<(fM9SZE&t=Wd+`1.^l#nWe9/l@0Q#tK@^?NiLa<RQtJbIN/B^*,_Zr(=T
%km!S;_4HSIXc9st"^=(_O)I;>?B$PmPc_XeNVm3WK<86H2^>.Z2DgkE1O.?HU%+ruCdf`-Y_4?hDD&;M+EREF5A>:i2R31YO)jH#
%Q_#h=F"K(^mb_@"0'-!tkh<f;NU:OLUk)Zk&<jIO'<iq7F]Xe*!Yds;Zkd^/ECc:GAF.b)UP!4?bgk>!L++KYj4o_[!bTi;/8T,A
%)J*!(TbV-_pEU;\Z_pBL`m.mL[cT41'enuM1[<$$cXHbXIWMssc'77m;[?r<G[./N!!LI3^r\%$f8l.81fR)Rf8o9GD(IT^qW@K`
%'%T:73@j4T:9D?e*3F]/[0@NffD:h<d4%T/h0'JAl)fG>j_2(r7.T@IXa[WYNl39&[@iA*]QLX4a\k-.RJ%iYkXTZ/(570U$R:!'
%L4Kq0&L9\#cErIG'L8iZHWu\AElH#*jE&[OMh3`*Qs9q^JCZpN"7WZar76hUD,tXn?)AF#arFHJ@BH%d^_@r]R('-@IpbskJ?lUq
%SW-I@R]?%9ePrZ3UqfNiC'af*a?"L$'Z';,3'.i(qDMbL$RW1d%Ga`pC[^X2l=T\M+6101,0)&E$Du>L<,lU-We)N_(IDQ1S\D$[
%$bHLY:giW6[lUfK?gKJ*adt%[0ZB@(Yfe5s#Fpa:PhdcLEo(-&q9VeMn&s=JCfniPJ8S!=o?PP3l$VbTdp,(2Xc8aoB:m?Pf0(LE
%c=`cm7p7f\V=Ok,F8=tJeAX/kq:&_FF8:Vlh!rhgluW!baOJ1KdeTtkKt2SPQDocpe+r?Oq;uduMdrRSg#qq*9+g3]o@`<tBa^(Z
%<KEToB:mAFgFk6Q3hKg_["Sk-;IHEcll;2nT624-?#\\;9U].[)\s8h_*4]05pu#1bM?]5_X@5?Ikhs]blYi/W3UAmMae)iAGYLj
%$:,1;bPgbXW%q$;3F<Qob26`2l`!.9%p8'7`oOd1B[`Ef/h[8mqhu91,X,B;blV0g&[.29EW`#DYX4=oLHq1hhmgth1GPl2q-1=$
%'f:AQR\f$g:AA'LPI#?,P[E-LQb/pJeH-h])iJYk!:Gjk=QTT'ZKisJo/NT&d;1(Yh)M7e;+6r@6'Bh*`f+`iD=m2hQY:d,KH'7-
%$48H*8C0e@Dj[7Vr<BHJc)`%^*,O<MFf,idAM_Zb&58d@NnL_=UfT+@Xn#e6d8)jYM*B:@9b)\,S"0a?JN!Hn>hg1k7nEMJMj(D#
%!*m"1nlq-P\]dRM1<2l-.5X%j@2(a!O`A[]JJ>ahOX$d]:MJ$oFL1Q[$u<\"9\T-,c(W8)HXkRSnb`Z^S3eOe3G4V>:X,htIA`ST
%d$,;>TkM^MTE`#Z)>?M9eqUMQ7Kl^j0bZjA6cP-ZUtMiFN.<a;FE7\a+^Q_eI\KP9F+tC1k7LD1iN0?@JUtSuL6@iZ[^Tp[cVH&M
%/D&IK4mR/bj>P;%,O!B<<p+Bc#pu"@c4U#k!t'NSbE+P>d12*c,h=+>Ws28+-.ko#AU9eT)Qkhg<]c*<[Ie<Vf_'uZ3N'\e3smFp
%N"KePcYAlh/7Hk*hc[(46'))Y)mU[Sj$#@:VTG:kqk7V.c<4_)kq,Tp>U(WVK-4jJ>Wil)aP=(cf5Ia5]K84B8QmlD*gH%K=1j#R
%bPN3LX=3I-$ET2G.[7cHD"+?_P`23/-O5I,L?1%6UE:-eJN@ll]s/H=+aRYF2ssL2+2'CKU\)s'fOEtfXH23X\W>TL:g.[TF+2mE
%8*<F\S3/_T,R>jp<QE:I;%AHdTuG9tauI1Fhm7Cb5!`jq,T3*MPR96hq/@QKDhtn'b_I,rH@lh69qjS$YT4Hr&eoD)fL08aYOdPo
%6&7Q`BQ*KI_OE)uWNgeO9+K]uBFJT_it4o-?jjJ:)0<&A@ZJ+AA!iI,a-/OW%*d&Z`Tm6oE43@[na::-6J]<D;f.8nTMf?r17WT5
%H]QG7b@6+lONHIKi]#;?H+dC6\=lN&ESTFPZ'1n,BZe$ZX!S4['oI&;l'<Z%A`hZjCQlud_ZW,eS2ZleC7UdUNm^DBbVO-kQ':gZ
%>;@&@bSt[\XNSgM9,DfXR<a+m))4e?3AXGESQ;je,VsB,+8S*^0f&>oG2C-t]Lcbu;9[911@sj6$E;U1$:C^GO.<[;mab%Jl@`;Z
%PM1>.AT5(JPlfQh/*#K$_^,jcJT5K7XVDO&)fr8$2rpJ6L3GjA2Djh6!,,(F1dnkske+kQk4oJ,b:RnodquA(lOEG1ps!?3f!m;_
%NZVQqP*e$e<#_]"9kl3N2.B%A1<kt(Y:[4M].qhZcGsq5'iQ,fp5SV<&[l/7(Z<l``=9B'b;<(3W1e5,&[aq;Z_92QEGO,5\/#<]
%fEAQ_9[5_SR:[fVB"%4tA]l@Pa3VjQa[YD5NdRNrP)[\T\s=g3]1\<Hbf=!LWoh,3Li\S#lc7k8\=$<Zm*2>hA8`fX,^X%0GApNk
%bR_9S>=FYIFNUE.:R^78CY]a3X8P[PbJq>Y-3mhoN3FgZNCLUhpGXAZ=f\re-KWL_47.@DUc]%YS9.ZcKR?RnUq@l.dm?WcR?V=m
%5Cd2@NhedI2mrWQG4lXZ-RA#En;QV>Ni1c%H^X$gHZcBSF10d^8&>][D,U+F^be+F5fU&\RmJMlTh":IO8go0dlE(Sm*@r:X&1Pi
%dRF[DA6g.oA0_Q=Fror9Xr87sHh:"2>+PkEc2&CC`ZOPR]_FFgT1f/k0)"WB*b@t5<qugpG)*8*#B*apTH6.GGKutAkM_u,R726j
%QOSb8^F=GAF7O1E@R%.DP5MB(P)@RU2`'S&E81!-G$!m]Jqb;a\cfOYG4b1=U=\JC_GuYHYY)O>[nHG\c^3PVP5Uh6.[Ib#7ugp@
%<kUC"aaV7*Y^D/geW=s`d,HkgC!8s!rES]fYRVuV`RjN/;pbT.GH@#,Qu[rW@F8k2@I^W:I@dc=p:IY*p?Tc$HemS(]f,LDVn8jg
%>>;N,mO8Rtom3oQfrNc?g@`cp-Mo)*r7RuU<B%<j7d2"CP:'kBE8Tm3Q^^?d(5&@-K21%'alL>%F6WDBZ!="L;kL-bjh/"ASA@ft
%Ji]sMV_aVDf!e(NmdIP<DG=0"*f<_e**B0/3KlP<c<&/C30e?2`TC2`eO6:id:JkRUd)9(Gt6K)Y1GHcN9/Tg8RAT5G3-jp@Cm`^
%:/$Fk2XmTRF\AXVAFH2I?$Phn[JerJ[l<VU2MFhIl;Z(]a89Bu+>iMAL)8K&mFA'S'=!<m#nW/TGfMu$oR+",G`.O&%Vks*g`3o<
%I\M[I`":IDoiNpfo>EgK07aD`9e*Eo/3]rLdjCI7B*R.]rZKHW,kdYn.Ns"&:+3BnCe^F%=IE,t+'lC'm)2)9;irdF1U0X?;m8W$
%oi^a:*'(:MCn54!3.Q0=M1'!m[AH)7QIoi9eRr.+SNpYV=]V.t`la[*I:cW1MNXQ=@\7dJ@%rL+B$*]S'JZ#o5-ltHm^!coZ#=js
%58NE%/e&^BZ-UF?RUfm"=];2U`T&9<R:Z%OAZUiPfJaD<3@FO26/!04I:cW1iulSjZ&bPh262cHWD4kHccd_9oSl9YUEoQt)jiQ6
%kt*2pR:Z'9rA3u^5+>1b-CNM!#1B#fo>SW\qlFsb:H5V?_Y9Qg@\:V+rhL5)bWqW'3]Y=!?A2l]\=Y)#N?U#)Id5NOH6;\(jdB&u
%DA6csl_h\8D>$uO1mut8j;@P*5;sq0(q98XB+nV1k@em4U2%Yr9_)p4%B>r#%;S#Og!K5746hWV_jL'_@ErhD58AIDA"r+#H$RqX
%=ADltc'Y0.!Q1XDCo9"Y`#i]I%4OO70%5hkFI?NOQd`r$_A9?`Rrs`<Z.4`krkG]ks-p@/A&W0i7_/G836GZQs.A&]c-YR%U[<h[
%IJKL(\D)!&T<"WN/sfAbm:-;CkqE&]Jrhnbs,DI&+).`Zhu>Y'%MHF^=!(feJKd!*QL$!I7?0lSmj^bgODATk&$;rSg[@,!"E)J%
%pOeBo5.t)_g?ri4n_?[e%d64L&$6P+P-MZD[7$4Dl]`H7CqI7*bpKjT1"p^7p:`8NPU?*8ALOC3I9@ejJ;s,@e9irOd>n+&\&=n_
%-FqY6Zo4nc<p(LWX]G-U-L;-5c'^JS<kp_j@k&MKb.8f(:c@C=YVZ"aD*o9&$ti>I6ZS1K\i,G*A$@EBAi:%E8X\tX2QR1&X-5[&
%&@CRHqoll$J7G>eCnrgB_597PNTDS=<C);EBq%G_5AFBd#5l,J^IUm3/DRuUbj9Z-M(q9Q3C)uASO_QUPpE'6gp-kkSV.[o3nATK
%6qk'JLACPjX%BB+UK/^]Mud[,PS=JbQ4_W.oi5Mi[`-)m)FHGj:h<L+oAf=@%@@i3kW/GtPl+'pn)'XF^?7oPrL5%;n>nR>O+$KS
%.&QhHp\pSLlK$KFA$?Pbn)%5"0)`J5EtfDr:>k!D3Vfs4qrJX:lkJc4s+Z19jfRDmn,:_Do2'&rZLaCsLNkf$[%#0Kqqc#+O30DV
%BD^O^ptg'+[pqXONd\:c*)=E\:*A:-ZsjpNEj;AI2`+^f;_QTr6fVhVJl_6a[W@d`%rW&eh?cbkfc^I9[f#nE%eCq?NA:p>XKYpl
%;Q]:J=PcnNSOfTV[EV^o"6(aBWEquFGAiif='KlVCR![=@GG$Ipb*gkI+rNnP=/Sp1;5-'c"j'nC[6=N#dIV.M,\H?Xkg3.FDl]r
%7]f)M[s(,JhQ?;fk><g#FFiB2no!p?0#JqS&%?hnq:cF,^WF"FK2$KH]NaDsOO6kS_YXM4V+H=si<=fK7r-A/Ee0mab:kN/R"4r'
%:$OK-0IF:i9>:^HUqBpVRYQ68:\lCYC3L?-CaoD\nQ#c=%)N^rMLXZ_;>%+oF%Q/o>g>,fIRu6PgQ.T#Lj"F^Ecao)8tWg$f0(]a
%!rM6R0LMR6J,/!EU<k,BTC-I*e_9$ELX'>[?VU9.h<TIa3G@(r;pHc:/:(%-;gT=mZ)nhCPe^q$?MFC)lX'>[`B1J/Ut5/eJIA*l
%_4t"jS5!U%qBC8XoW$6"KACA6=&pc$M:R"HB"_iB%qqMf#Vc1rkgc+V&b5,$.fD*4Yk/OAY$(G?>4r<7!D$f\/\r2!Dat2$^%rfe
%P#k[$hU$S6A"@pb&!m`($[FRbqFBG-PgD^KWnc8/B+Qt%7H`!?r"S82_99k3Tf=4FAm7_=-3i!Z<Xm4$cG)EP1f8bB9,n@pm.k\B
%YbErgE#n+F\":e!8CmT,=lZ)616of.V.YfIk31C='G;86Kb$WH)n2og1b_C:8)C`Z:j$Zh_/3l'V(J]J*&"Cd:QKS+EQ][>NEDlP
%(03o&WiZ^;#\eGk_.5X>]qH,O.ZO`R<bOn>%uk:J&(o6D'J8=4M=HSe2D?PtY0?Y!)W]K*7X+XI(bIj5Su6S;@Ed@F-$!41*t,DE
%g2gt+Mr8fqq$AScPph[FV22&*D=kgXK-@/^Yt22rm!-pN9gkH*H1.,`3;VmNRe?loRFM%rYUTMl0\>hOrDjVroBsb5H+]mY)g;4(
%0I]f/4L#Q)=`h`ac,Mki!J@]>_>j'E!DSqW^Le9!hN?1;[lbO[=<jK`ZV+N[BM<W5"gQb6(uZGZTl'T&ZnYIOm#ATeIuJ.m2T(^O
%Ni]T-NN''&Q;7A,j<\!R@:kY]Hi`NF`%Fb^,*^G2dqG't6pVE\8$F'h\I!RmqU.f<k=k>KF48j6rN568Olhm&j:5l6/"gdq,c08j
%8E27t"d-d*,0eh^ZqEudom!V0D^\NsC%Dogfon$7OZ"9n07AnOP";('LeNiV;\Eg9&JYU8@S.h]5,+gimPmj=q1s+lfIdIjV'OLO
%,L0/!H<F^1-?I:LH'L!.OZ":YnYGPN''0E<L5Yc2_RYM.;Wi:-TgmB=a^a@:<iA&#^\>%NTs3AA\Z?>cbrW=R;O8,-8gF8chfDqo
%C"R=oQPC!AXSe[5$KpVJK,aQj6Ke:KBNR092'.eLWE,4nnBa9L9tBY1XPJ'\KngF*;lEL"U:fuWmSp6l00J$t^$X1c*[pmn&*Zlt
%)XG7-%A\iNC1VPHU&05`OY/aQ@:%s%6RRJ_^@9MK[R7`kFqk85?[-6[&TbAeAJ<c2M%[rX'F2([m;S*^ISY_,%k2"Zj'Hu/:-@p/
%'VerYk\`3Ca;5o_B?>DQU"O=qOY/c'B4H(Bij]dGg2"D_SFSc@KnoB2*?+jFOd#;Cp9u'*CBS-QGj'2&or&ZJl?5?#h0,_i-#qV"
%Ml^=0@#E\H%rGLTh9k?T_F'2LY=VuDBYTUGDWo`C&MH8RpZ;&5Smu#M35jO^gCEC_F)bJjGY#.`3IqPKmC.>dl#'Q>j2+1;oXIJh
%>aXAkBPM[MEoGuU;S_CJLK;NZ!A[5i]R(!VcPr:I];KT\GC"7m\F@l+[R9(Ii?U$<1g;EZb^@=rLX@b;[#QS#AgFu+lbZ"&RO;u7
%S?kgkEdQc=9:7^'Knm%i'#qTR:ecs,^$SY^B$:Vnh7C*@??g/;MTUnOC<a_OLZ[PN6JpE7rj3I_dN8NIeqJnQDYKZK8_jLr_sXs#
%`Pn[5AQrJcBQ*fNm!`o'iM!6l;K"W:.lp4-G\H!W*5t'pj/;1cpCpB\_F+4M@-Sb<-5R`78C\f>WfMJbTk15f]'W>N2)P;dLLs\3
%p'3F6FQ&pI,*GY&Gp.\8$P2X<qr,('n\RYOJUPnM-hW1K'Cn;W/j-MUm8/e?NI0WXED64JR5+UnnqDk1DME$j1lJ8kFQ&pAOtMHO
%VRu?E5"V*Fe&K#hd"!r?eCcS_l1Vt])r48%g!F#LBYQ;GMpCiG4P[?XmEfZVk=?C1g?T*A4`/`gn,^]9nCsFT_E$adrAG9kF;c@?
%N(HG4_(HquYhrf3d50S9?T)^m/s%6[f-O`N!2(d=DHXtg>"6@IJXG93\Y'=P)&u\EKm/UgqNhG`S,A6fr)W((7:*KU..0Lp]2qdP
%X8\r5.dgZsABOmoTlT+QDH9L7>Pr(sYe),l"'<MpFFdia7k_lH1SlX$IX4%_p,<2BbXj;a^mmOBf9t+\IYdh"]tJ'&e]Q;tqYcAh
%Ik\^sCirPu)$_.sACt:Q!TVFZN<ogWH-VcRgMb>>XgOtT]a.d_pY##YZ--m]eQlHh<mZIl(\6q/rlSF<kein!fj>OZrKI2fCVFD1
%ICX>MHbAo],C=Fnhj`;Wmn6H^rLLo'frM[\e(LeF05$?,D_L*)a59p)'Z])pTAM[.EUiq4DeHhdrOq98Wun%bo\J]B=,RHaD`q9n
%[cPa!$\rrPrq5pBeT7@CQT*5p^OQ-tWs9HA1CnCD/C$K8]R/W&]uu2Mr1GJ._Y2r0,etss]B;E"[`iZa!,qE"nbX-Gds'[+\kcr]
%+TR,I`(A1es&bnbs6/oo5*1WID>Mr!q9,*@064>%BHui^'p3](T=qfnF78;\3e-D0bLgXmC:<s-nRf4Pp@I,#Dq3mWXDK!-Wq+qM
%=^L1@3mVJnjRqg\QB/dDs*P-[ZQj.\SsJ=i\pEI2$^Oj5,=&WJFk=B"/]QS(boc_*kS*p/keaIB:JT4e^-71\h])@R'#$APp[mJ9
%q3P3oX8!OrF*q]/`pBR,XPK\j++Ct*EQ_CD54<r)^%qHnbP@-OkoZBNgH.LVVB.nXgn0"<;bm'n%Q!/cKT5cgYKec#CNVLarXHUp
%#EbNp?Pr\tK.e0m$j[P2/[R[=jiF18(\$`WpiV"!$,8)%7P<"os6IcbVXrTFr:OW<rVc%nP:^/71P9teaPP4d>\sCY&NN\*^R=C@
%04&PqG&:[_#LRb-=.;Ej0"(]JilB5Xbo_,8i?-e"hmteJ@*70Up=$LRbn$/ErTLB.`ShnPCC>!'=k1I]et!3imH368qWPQhqT.[A
%F!=u*fCG;JO1X`L\8">/.6kqX4,])+q4Ueo6JGf*-2`jcr-CS[r&4,l>Q"=cn*=!qITk/_S3=><gVfnojh2[PW'"\J>RF9_]<fGr
%\@'IZQO[BJrk8;,Z$C!L@s,4pYpK+1dZo$7>hkVhOB^RK5/CIGr>oOfq\>0p>XYF?lD*s;?EO6+hYa\UE:q[i*\=qsD!n.*na+)U
%pX_%bSj!o:HftZ-p8YgJDg$p6nlj?&dZMoE04B\Q:drm<^k0Y2^D?X//Gt,\rFtYugW$MU'8F*21YSS9X8-:Zlu"$J0"-DD;*OVS
%!AJltl&;/-$R,S">\"4mmF)HL.h<9p@.XQ=K79B7=8$7I)=i6W1ZXka-pID=\FoMrUcIk">B&3?ABWkCE+J^XDdKo^Wc7<e2gtJ[
%&2bfhZW]?dpP#gKF^CiQT=Kp?NF"^FJieRj^HgtHla?ZianI*([bi`CS>Z9!9CVe;'RCsmG5J.Wal&e!%R-&rP]GEZQEr0:TI8sg
%Q2)3_opHg4n5n5POYa:kO&d/JYd9k]Df.nXh\;QVr+gZXe\A/'aXY3g.3\dtGRHT8$F`u((NSih9I2dpm`pX-dWILoGAN6$haS$5
%;^3@k3-s_aIsg"XY>2:VQs[*uD)W5;Y%BWL]VMQQ'^g<Zmm.N1>o;qn_THtDF5pN1I&m+A1(+nj/.H%"Y$K^i76=_qRU<[E%^'*A
%melImpQj_*h77E9J%U1c5:B>E-h$HBk`NifZ5hbC\%;*?M*\>!Mc]9<91K49gUNN(E.0ED?[i%;fp:IoEPJrcDEm!d)_9g7Y7k6q
%o9cGR@G:Ca)[,F7+,i8/"[:JLGrNM4X/@!\gm!^kARF9iElDq_/?ZUmjVPPF[HTe2$KMjB3h+sX1+U4AX67aYbI?(_EkIBa>a"I9
%bhHoFH[9R&:>]ETbkU:s47=e?29d&/NsX]'JuO.$*FL*+^]-ZeHY[7/N=r+BnXaTV\E%M+)1fE;VK5hrf["D5=Y87e&!Rg9E3mG<
%q=8Ld8=T=^2st6qVa#%>`Q.Re>G!ja]^fHT"#0Amo7a%/4oW"gBR^NkpAOITN;B;EEt8/UqUq0CHN'nWd:-*5__0gah>daZI#fA?
%HYf>3*r73c(2Yclh(Aro[RG71Oa%8goD!$65[,;V1(AOmp^1_[I/W!\YB?/U/3P#9ZJ)!^qXWlPX\XH,KCXZo.*mTSr0I8s/9P2D
%IOY+W15K@eU1]>8_YOT4NGf?5jj!bQc"G&8oMe2dh'Sq3hB7.iVYAj,q<g2[>E044H(G@MQ"O`p5p)/#h+fD?X]Kglm+sS&FO>2B
%c7]rB1Ie6YhqdVXBj,9Sk5"Q4RN"9u=Kg&G+8d#3@pkG6(g>p._qu'JE9H^!f4:*LDCpj93M.3J@s2JGfo%SSEU?9]Q*=r:]c!7l
%T_E]f?C"5SpBNX%P.JIPI5Jl%oc>d+h;bDsGlDjP,\RS`C`^haf\<RTM[Y<!6>m/Oq<c`1-b1Il`5n\/IK!e/5B]fFrYW@dDV89=
%310U";rtB*Bsr<Yo%hTfT21N]jmSbuj"i89Y]nTCf(Q5ZKD)-gcNjBUpUiYeFr)7D85A@"#G4K[7PncTJrcfk1]$E9kL[DnSR:7o
%GCKLgF/uqQrYX=X^&:^tW4b,s422h[m^Dl9\'D2WG&G%gksspgj3o6iB(*d.p9.9<So+N(k"TJ8D[sN?7QW`cmjn"6na_u-5L;%<
%)uK"AD"@lc\*o1\IVg#u\TUc@gSbTI]-5J1=Dj&CYJ7qs&&hkY+.b[&^3Z[,XXgu.g\q_R2DjH,L1^@%g$kcVl4(B'riWb")r"FH
%Ws\u^@M"VHlF9Z?Y6S1aRU+[;^HUOl6Bo:&^?SYU&WKK8CmV&Dgfcl<<3q>YqPm#[.*gr4S??,/KQk-U%dWksr;5;kLKcF'^A/<[
%`@(\W`EL%-hId5n#>\-fpH-@YoD.RoPT*3hU#RAV6qkR`Ht(TbBj6@uduYMc,9^F*d(HC[.^\r49#$X1.>,3,>hd>TJ_o`H?g^[/
%n*o+4@Nb:^L[Ju(qt8)HJsBVOnHRk4mmeJ\Wq3F^ie--R3EZ*#9g&8rgFXf[H@P"AQe(U)Fh@PKHe]o4#><l;k\#(WCD2nPD/T0A
%cXu!Ngfn,P3%&'^T3k`P@lL<'3oTL2J"%qbgDo%6]2]YXk#WADRkI9I+Y*9`lXO4\D"_,!g%R_>EN?YqTugX^GA$YVG50'a&WZXp
%0o-bO?b%uMc/;]>o$$V-ZXq^k\CKW[Pt^3)AYd8jT)5hP<ZYNtg=(B=0A8,[>sMF-q<'!rr,X<"s#k&!`&-+.=N2FTr47D:);hY2
%`h!.qW3W`O?WLe/gl;eio0^.+]fGS7]/>4)/ltaZht(b7%X_d\T74:b(1s.Kmel+746e&m/MDu'E%P;#qa^<R1h=70B=GXWgK/Ih
%-Ck0`]QfoIO8lr-r;NdsnI`LYg#"TT[C?4KgZ#><BD8lr`'#WbaXeMuQKt^1^Q)h%6m^Ld=d,skSfKGKn96nUVVdtL(K]kgEX08/
%e"Wo#l!;s@_cR?AqSO9cn#t2ue\Vn@n<p!&CDY!LQ[BI)]`?n",[YH6S)'WnG'<&=$%hQdZfBWi?b(E"l-I>?SsrU!G<tD=ph'+A
%,i>rd7OWYqs#nT3"1]#i!grZFg84/>F1`qbW;P\F[r?=GSo3sZS?MnhZ+Ff^p,b()hsfQQGXD.siDs7/+.BtR:U7=E#R^4@ktYXJ
%kE9bRfXpXb@]p*>F<hsbTd0@OZ$.>9k4u.7^:IS,aDP>^EpIqg?Jr1t8A7R[h%Mem[bSrA4F&^b=g`).s1KhTW1;&Kif_F#Fasc6
%/+=\`/%j@Ogoh)0J__^/=5^\nV<+qum<9<0qWQ[KG51Ns<=rAHQ3Q#cCVuL&a67ht\?LC(O=G4hSNhS5/W[W&K#,cebfsM%Y;SS/
%h)RXG,a5@<YDXT^Xr7.IZ^Wc"#(VOHH#WTms1r4+Iqoc`5iP3*I!iU)IdcAmZX)p(PZqJO[^5_[mQ_K:G2qu#'q*#16P2c_'bMg2
%=&f1\)Gbe,i_2?6B5bER[pRoZC#:4\rm`nj<GCVkhnH#ZCLcnrFgLc3Mo/PUQJ]H&\)kp(Ilg3BY9gY=G@:Ra]LM^.(,#/Wf/HWK
%lW5hn7YM+V>eTaT`maUUB@Z#+HV5;j%i9BpHIrU,cYTD163jq<RR;srD=*otZ5Z;TfC<nU_X>2<]$NHfRm5VMa6Tp/8k-f#Z&2+9
%=H1*?i!MCeU[18iWY5DT\0c]R-$lPX]i!UdX0'XsHgB!9DXO$D?nYcqZ7U!Cjitffqu[)82HFGH50[CsECG%q`r?mign=].q>^OX
%T?`^:YUCK_jUURdIA-TtF2S'ik1Ej!*8IX&#&D&@KH>mrro2\1.spgspV2aB*G4KO-(9IipZMM]E7D4ld?P;Bk1/XsKZ(Di71`+e
%H@,)cEk>B8m**)n+oq0a$Z>h!k_f<2o9G>D=d^'nli'VjJ$;M^GS*E^<O]R>iAJklY(Z'ZDW>'J]/='ob4cL!OcgJliR+uI302.k
%Ge,$C^n"3+n?OT,c[,(LlNf[:D_.Bs1\-31K7B1UEP<k,GqREB<ZceJWSQk,gGDcC3SLl3dXN@T5$9;PjL?l:jS_M#BE.qDjnDuK
%fC7;QqDS6.M0,3jZbC/ir`KBPI7^6^gpn/@YiI9XhQ?1fTP#Hlmd8.t4at%T2g3J`K_3gMbRB(9Ze^=?i[7eA\^gFYqh[J"pd5u3
%C5;eHgZu>`>^sDpGC+JEG]io[n^AjM)I$Tcd_J\tHoq;d_F>bF-F@S="4l1h28<:l/K8bPnY@]T76&6hrh_m8`"&>#ju7\!^(/uW
%eUo&RrLe*,IJ_^AXZq/i\CB!$!uu7:dcUfN!$\V)`Zo_PYI-cn-HGcj,XYeY:/'idCoqV^'(^NmF+.]Ok&u5emZsB/QaW$<8PA/O
%;@<?@"^N,IXnfkhQ'63-IehP&;k&DPpE!4S,QH--F4_@@CWDS=4L\dK/4+I8gfUAg[6?)4?6&@i(b.r$m-?Uj8`Yfi6sKplYB8sb
%s/jrbo!m8W0!*96M*\AQC_"aU@]-;o((OH'IqnoH@CFg^OYRisR6,iq\l^H8Y-@d@E<0G'\H9t:r:-i"=S"k>bgC<O@rHEs@&Me!
%X,g=_AT)`nj_^;O!8Vg-BUiD>4hl#O+W#K?;uENe&*4+aYKO9/I+^7_ldL2*7Z,3(Q=o7b0=SlIIG4I!NR0m--O]*LB(>OF%aeUH
%$=[prrMF7=4.U!Dr;_RmNL[P!']b4C$(g6Wr)Uaq=lp)K=5BJ0NAUV!7*M,T#r',.hY>uNXlM2cn*6]SX%n+Io_*]<X1=I1"c!".
%:^N3Yr<VJ_CXqt+rWlJ<>cY"o#,9U\@lHf?TVU>JCABtXV')g@4u3CB$EQs!s!slNSoj:/*r`cXM.,C]\)eg+7AOVcnCVP1SMk*G
%lXFSbI(`@DL#'5+=a9\clE:OFI@o2FN.=lQ[S@s"R#QH;>@.6Q3eH<,ZbLFL(9b">GROK!/jeE$(D1_6G6miNe]THS@dE=k/?TRo
%`GHg.nFXY$>CX=@P[I1A2fCSB/:0I"Inu7Z%_qshTe4ZSLc#mO^FadN0BlI"&jM2.2r0eGgNg2/>+%dJqtj+-c/$^*@3uDgnF#,_
%QFX6tmhnhpdVL=6%jAf=%SD$or:Jre0%b;?*,DiQ_QObgT_Z#4_lp[Y/J)p"07MOJluKhhb3^*=[2R.&)8=!Zb/h-d/'T0e(L&>!
%h;j]!$JDs_moEYR\RU@s@0,HF\h_l0+_s5eCOMoLLXr60G*\f<kCe8TcSKBS?[Vb?K5T2iI7&lrH$&mQ[X@i'nE0UA],'*IPJ6/t
%=)d2,jO[El16m[j43)B`SRkMG6\@W!oo[Wa12ILDF8)),^@gDk"Ag3"?sc)j]b#4]p3)4,o;^hj5$crGIXV%i`HRq,4PIGqh1$8-
%b(aU?VhX)m%eY_^\QI$+5HXt]/Q;BOi-jDu0HIq'g4dG")`quUpD[;UV7a2V-;3(GO8EPlPO6'WXV<NE))mP5p?%CtN.l)D2ij9B
%!I42]""$#Y5<UegEP2r/YhlXj?Z074rmW2RLJ80AYG86f'N[/8XKL['$/[:"B?eX2dl.LI91YTd2i?MIQ%,raU!:Geao*:U`YQ@H
%qq<$kCQ&,?#*,8L!=OAt2n"!W=gP?o'L#/*!rW#fg@KtQ'sVuAT4KltDpGf>;A\We3;,;ogU,d^SGeq'p>Jaf2Ibk3E[uK0m":@7
%+4#>g"E+68F33h&`oLf;0oOB?RG8\X.to[krP)E0rMQT01KA)Ycgq#V*tOG$*5@!trmTB6WW.bm?=)GBk0^*9T/VfA%j)klhtN,V
%#="4Y5CK08346Eq@!u[cau9e@5/07N=pV!P3MP44$JLIqhUItIpq,DZGPgb*/$Co2cM"D1aSY"!=&(F$c#pTt)ttGj1>FuTs7F0d
%e$Eq=<dpLj35'R3hU?.XZEd>U'cr4BZQ"\?CHnuJhqEKPW+a*YQH*5kqsXNL[9'gYYHP,]D`kV>r&re>?2.r:>Zrl4db='8q$64=
%G!9eKJ+dXV2*W?A/j!hG)\-<]qN>an$5+KMj5hncSj"ti6QB.`27sasY5e.-:5-+\NFdA5X&t,Pp?HgMEI),+rh!h=YAW)"jiqQk
%$hEW"@Zs'!GC?8)cHkL^:%7rTq9u[:DgT.<?^UWnil9.I,@:i3SbLFb7MtqZriguBn$f22DEZZ:4nnX9EQa0hPb2%k#H?'O)?6id
%k+_NM`kSR2Om5#Z1B(QR9^f*u1B(QR*&<EK.c]F:`*q'i.c]F:_uP`D^#a0G@SJ?@Xc.a2';'"XSW-Ld5Hcm>"bbdo-@U^pOq7V[
%#GiFk.KpU%I^tXX!2CW`UVh1sVU>7L4q2@]4,7m7bRN"O$*=NWre&NnjVdOG<ZYUt*W1]Eqb)f^:qDHEYqY(7k#`,91;C-1m0NLi
%M_*Wro(j!a\=O-$qeYbdo$-9<dhn2U%@83V[:qY;&eKFVEf'H*/XuS\?Y!cEn3`DN2&7lDmd]\h^M4!)Hs+cRDI!12`UZ8N`.6<)
%/su$I+!;nKcOW^'HbV'(BlI*smc'M61sW,[LUD!]8&+l(D)\'SL`?3anoYP=:TjXcb4?bIpmS;/K,J2@YB#=q]!WPu+%>JNq<Q"c
%,4ujWq*jH9nJOHsP1=qDMl3_aEcu+p%st"1^o8OqpoC6/-RDL`^",s2bs--,,lKKTJ9qt#IfE"c%aVTPZ1.bha?A\;c`Lm:+gntR
%WV>1=K(GBd=')j"R#pA+H#=nJq:h=^c0>%r-:pFIEd)Z,\\\02:Aenn@lUE-Q;6s;24#*7q+K%mLt.Ig^n+^N9q(G;?V="<nSR12
%IW#?3![k+u'(H@L--S9H^*>YEh1XGho91KEc@6c#NSf*ZP8m/'#JX#3-:6P2&T,6))5[2TO.#f7P&bjG4%Z+r1E4B)*UGW>U\!0X
%f;reQ5:eD7W#@51a5P7Mq/8CeQgO/$O,n1"-UP99aCZu!\/DX?`,4S0.k^cjl0,J6f(CDSBX#h!4Vm0-bDDis9\hu.k-sg,2])DA
%TEMbR@ug"$PA!0riA[0ETsZTFR%N5U0RYr+jo*leWK2>a3\u5BGYO]t?h)Bm*Bm-L4a\OJk'H4%jgis45.O=1RlMMBL'7W,H2cO,
%!/.h?V7%%_l07Vbbq+dtqX!q]iaeUn]f,arqS?53_`SK+lcn:6>s(6ZrcnCc'D_=Lmejt,hp1p)[ka-iT,emA(]dG7*79K^[ar/.
%>3[E2JLH:HbKKV0jeiWr^6`0V^aWgkX[25=ZL4osUuN$24E&m^80Dish/R6'q,LJ\WUm!t6`B>kQgXrR4d#:iBthWVSUL@moLO#h
%R#L$2+kXfEmY5,[2fTNi$GjSmrU$o%3!;=382_+Ar,i:RPq/?M1=Qku;P.<e)hq`DTsn>l\SMbID=7t/Yf86\^0LVr&8YH\]Be4b
%1X<..&H9DRC:8:m/iOh;o9)>!f!Z3B*Ki4]A2e.mD3)sKU"\l%>N^kj;K<p>$XY^NH"r.GC\NH;>E?]hB,"ompCXE?Dg>KEX%pm.
%_d#msl!0U"riA,i2Wr;RQX>+jmXc$omdt\QNjd/<\ghVS?Sb/gjpSf+F*`NU0p9a5]%-,)@d3?Rk5J[$n*\;?=n?j\mBj7lO0>%,
%Mg*`k$'J8j<S>WV\Op\tb;TW6(iM?n/oNG=q!H4!BPfPoEmi4#^@9Y^Ei/.eau:3gSo$2brr#OgX4i'r)c&EmHEb!JQJ_?JJ@G4C
%+a]jQjnDguD2#'YVAN]c$8n^\;lTG2Ok%mO!*Vc%]%+@7GD"EAKCmcf#ADZQr+1h1>\_@K$Dg\#Fs&S2^RH,S#pnZ@FG1>`TGZ)b
%8PiKBDkC_VeF08hr2rk2_Q@"!r?k_kJ!:Soe9q13<eqahh.n3!cL%E*6BJ51RD15P1];_MEO][+FP7AEcJ%XSm`qh\FoAb=kuTMZ
%ar-baBF^Ut].EFD@7:\"g't\U;a!$-69j.:"_1%9"PlE\@iW59]S="LMb&0HFQ[T"]8`pr1%YG5aF8R52L."M2mQISK!Af.i1K&E
%h0PRt+Q/mP^KSHo!YFkInR"iN'7k[`NrKS$W!OX*TB![)DES"+puhFU4Q^/si1K&ERSJ/1&Fe$9?[9l;5eoSp`[YTlPBcH9"Cotj
%s%,?HA:h'KSj/.RcC[W](?ahXn^p&3`Zk!\+kQ\YTAI#oX[8TpdY#I+5JHWMI"1PQh>:![YQ&ep-d#-IJ!p4is0[,9<S$qpfi/I@
%m[I/TR9=lbnF+!LcTaV,SXnJgbIkU&HMi3OrPA7&T0L"Qrnl3od[o7JIC-=8F`FE;i6p,69J"qb&b=OVL3rYLh>L:Paei,/c]eC#
%qTf[GB(ZO\]d*P.RF:5(VQj[;]#q\`i*;-'afLdX>Pd.E#FAY"<T#5`p#IuJJG6>>s.B3"^YP!D4p^Pj;h"#_e?]tEeD!pm2c2$T
%BA(dD[Zk?+?'\DZ\9dr9/oOb@oho)Ipl1V1K[,+_:]3cd83Jgd42q3#qsbo.pIE5Rd(X94PTYqoqh-8b=oJ!ge!-g=IH'ZufO``X
%md];r0=O*^IN)Kcl1,>YIHTY2+5adS^W&23k0A1+r8ujk/[*'PQ^)b!4775iZ_cGbn&Z!80!OlCaQ,,P_</TVJ%G)LL0@NsC0GG1
%0f`8q+4,181m;!9I]Bp:(`3igU])SbB7Z1fJTX/RoLiaupo2uZ-!q#Rb(FP3/EOS[@c`sI4L\8[_Fml\&';+lWMjmkPgV-pH"j/@
%g+?=$.AdScTNk8^W2k6d(R:J1R9B*pFAkM3WkBAZB.]Fk:<AAFeV3`r,1p.,a>Dt]-M->^XbA7RG/@uXcO6/2>nW?`n)fVRWK?k=
%MjCGL5NSFeHsXonIBca_Kq7f*K9cHM8hH5WE]h5UjcW:B;lQ+B][;tIEM*]5e>9gL0Qh9pp#L$Xa`RpNX`B2p(F=p`a^X@,mdD_U
%I]7A)"1]4;.<7pN<`OOJ_Vera/6d"YW^:T#3#ResiH!uMV9Bc<,qQFa]I]M5m#i?e)IprW7bCtEes&h(9PUSjBB4cjgXr51CEThK
%]r]&3,SQKaa[4Kgqat9:=\L(+DN$+L\#r0CjPE=k)%IaMYqC`O%T=m3'<n3V.8R$">?f0!b9#89=J;$l?ftN9]-?F6(/FO&M'nXT
%*$2>A0TSCmp.\RCYD$MR8uG?j>iqBCboAC$,:<#+_NlBZF.%n*.O._FhT28q<shOmYr(5\isRl@[0)21YWWJLQff8qW`n9"q9%WS
%aSo5WXL1aYRu3/5$<a0.2HDd^Q_g"3C^T-9=iMFc="e-f-q'HEr<dg/H#P'f.aeV6Xt&*g\K)3=S-n663gZs#0PT2]@8&\>EX-lo
%4JJj/$g"71Yg)`R8X;kI<@1ucEiLmb7usK*nu#*/YaM$I+pXGAUXV&P-V]tMaZJ28>$fuaQ!B,4l=u-,bQu83Tb1JeYt5[+6Ku?p
%EWsdgP;egcOpapF(*_'aBBLC%+@Krpg<Am>7Ud\nN!;[j8g-\H6jLONN)[tdaJp6SOgf@UFjC5R231.f4S)L5>`cliCoNGN7I0Fo
%LbKS^,.mt#RY_mR:A/<k2Ha$2)-6tgc@pi([*DffOgA5%"+Me?J?W(>0O:)6Cl'k;\St:q7k_?A]3H^2`&PYYPVXP*aD)sJ&)67-
%/7\p]OQ@Z[jH"qYk;e\W1aQ2HMJT;-S6LVU$2tT-n3u<UT#&?R9cWD)*<)7o8B@"%j@P0+KHM3YnO.&'\UhQc7c_(C$VNMPR>7Si
%`,uPJTH*f%,d+elQPC-q.q:)4LXPc\RC'VQ4]TU,Q7'8p^*bo$TJ;I7^Y+XAQN)@`143alV&=)qImOpg%Jhju7e^OO)*J"q@Is](
%L>e=Mg[tIjlo)OA$,alk-XaKnOf[@2j2=*>1q+g/R!=`JLFa+LC`V)"CcGL.U<PIP)5A![.^\;=dG5ZMK;^J*WXVti11t$:n0)m_
%%b5#WYCShlN"t%\:K!cc"`:W@Y_C5-0u.PZ].WJKmS'Tl@SoG7'JNCt*@la%;j9=Z^CpOJ6Q@3AT?3ApfCEF74d",*m#$an?sb%&
%HLD:(ec^?KOd\FV-gdhk(lCQkS#VXX-+6icE<8E;9,8nZTI5O_LJu98kJarnpD8DD`+Z5HNG\=u`[@iG0sO-h3,qPYpioo\ij]]^
%j,@tV@W*UaG[e]!"-!uke(:suKB)-+0<LQ]XCYZWQ<mfMfk)HCiM*Uh@lp92MKtC=$$+AD`6b)/.ROlQ.b)0c42MBeJ/?."PmP9Q
%[dZrt+sj)tF]-A/e]rt`+C:]i+fuclXXHKua4R[(P;bCX,O9WgAPuShIIJ%d;N&YVV5_C5iIW"OhMc@\pPJ&tRX]'fPA^bJchEZt
%IG^8962[lPmeaHQpU7/V)rWEcf?7DjkeiWo[)`Uk65=bRO%m9k>e%jNQ1D]HM@3u<9uT%AVb1HPY@LhhV,H*_U6ZT5:pEaS:PoB'
%ed$pKnaT:%rigM\&$Ek1&p#<QQhAit-)V/tmn%#.C>,?TT(pqq:Um0MRo58^_S8f,_C:O+G,nR0GJ[-OH1PaZ56VTDE.g(+O?b-*
%pdH+b80B)_ga!?5,`nB-?5)#goEu=-6,Ib83jT-:,iuClRL(ge'';U!kXaAS#t$%JmYnDP'.-[pBI.IM)4PXj'!=^jQ,qS\5+"SI
%PA"H4b5b\Q]#)Q*\W%sN:iT=00Vp7EkGl=Ha[sg4Dq/uRn2]PZ3U\#PG8G]j5h\hdZKhZrDc^e#@4/<TjWGE/oh&)dc3VU9Lggch
%4pXs*G0$qP>nj$rq%J#tX"!MsI#Sg(Yh;,UPoSSZ^_=X1PS5Is(LT-5(_uhBQ:7oJ(QNNM!6^Ne/)\[XaDtLI/"+jdE-PIPA48#2
%>"eiAQ@SJ4)A<<YK0l5q)co%QJ/g%!^2g\\/52H4!))+dMd'=NoSKg3==`-0imf3(KQ/1(!K;pfOa"8Y/hfN/^F\#3W'IpK60#r$
%'u(5r,IRiO`5D8%F;g5NBJqge9"&kNOVqSEOG%8)!k_RTfqrjB$Z)bdim^QX'OP(u7&B61B2_r9\jH+j1minjYnFl>Ob#5)%[3:!
%,*XVo6B5Y(9P_0%nj$=rOZC:2MLcrUOCNWkI<fQM9uJEG2\H(D&mqH:Cn)Kp.GbdH"[d)$]9SAE_VWI]OaX6`Bgh70_T;:/S5q.F
%-\k[p#4+g!5g_6$->HlT-tcMt+[s."1"K;6N<g7-/K(07jF1=`7Zgal'%lj9@`r2^jgl?17dbNH$P?:2K4Ju(0WL3C">J.pM^kXG
%e-^/P]G9OBHo470iBjcD''Y\C^/V,&a1MWFGHV`%"l<#fTbX*(9$B`+)=Y).SLh)`m4Ol`p$o$_/:oi*OXfdUbE\D^e\_=16l(T'
%&cH>B&W6jt32C#>3H.'2hPq,amHT(Lr!oB-#+-$BE<9*7U!I^412.JR5(Qu^_u!XB@f8u.)o-Qe^cI#Agtt;GWSHAtJGn<]7Ne/P
%gIcudhqLoAi;T%Zo_p,E!\g#@f#%(Y,kf+IrWF"SoR9T*!U+15C&fBGYT"9fMC]"f,[ib?\Yo+NkOc,'A8#lh!aOX?L60dh.g"4b
%*Pp4\gQJ4>hV4?H9:3"3KV#Is5jiJd?uU%R!n+]q<<:(dgTJ?MhNij(:>-JVVlU9Q;t^CY.1:d[a#6DVgp/\#mVQT5H2"R#0Q=t]
%!3*`@0c#\g6p:Y07GL\'?3*1?'d>f`.8!C`#bY/l$+OmeGps;LnH=;8+n$S0\Jdd^`!<'dZV)]$3bF5dR.^Lm#<X.6@YpdM'o3XI
%00!qmp'88F0lK1mi>ASnC0<+\(9AnjQ!6_d%;/_M5a5.nn"!I)cAY-U:PAdR"pEa4in:'W[(#6,'k-AJ@Z=f:+Y]cKVrEfM<'YOq
%/sKX"Bj*eQXR^pEX6;3uh*XX!akq,<6-9N?'p""pB5s2m"W%5)\M,\';N)4+ho+"p>bT#.1m4@tJmY8*ZWre^1n?bOX&D!NG$r+Q
%<Dn*fBoW6X`D_G-HZPI2Sq+#;M,KiIc'@:j%_]heT_IS%9Hq;]+=DCBj91fX*F_4m`=]#UW,5ic\Mpup/beBdW9"`6-(-2Wd&_tP
%\:M0oRr,BJOCkcJ_Bbc+]L`u,@h=t>i`,UucW#876SdAhV-(@Z]E[X'$Fb*_-TT-X#K4'tMPm"-=in,TpSH^WfCsb^>(f&r&Mm%l
%Ab$"R[[U-MN%mn$Pns4$%QSrC,[&"]YbiC-KW!s!3bHJnJ4Pg(cr2CI;560+OfahP:95O"Xhqo>V$2@$jt[m3Q#XI:a?0dgX]?^'
%9C>@@n.[iW<.&#i_@jlqG*@P_?,I)n&4r**aYBLqJmDDf.bG`8+UfM3=:qhdNXi?r]8&;ZpeUHkZ'R^q+s8Vedlo:&''iHP<$!MQ
%H\e<CF;'^;ligLWZG6r*$3P:^Efu;RfRf#7Y<n-!b)C.;LkF*<&pm)<aj+!iP:/>kbY%58lO51N7#Ftg'T__m*[bQ#T$cL2K%N#d
%_@Z*h/G(,`)5750J2QIX<\mel'R9k16"ci9?ks)r,*Kuk.,?)'5T&+/kfS64;A`@octKkt=s2BhR2:te?;cDXQF9&['fNd]Ne%]@
%Vul#;g5+EP9=cftLr9c=.oFk:5!od[:[TDk^t=rAdqK/AkMG8F;9!oq]c9M=:oYH2+N@`UkA#k%2EfD$?a7m+''5M%qLOb`R0r@<
%`3Mnm18"VDG_e'c:_D=pM&5/ba:h2tXY!)c70O$p;@Ens9'g!s'RNsVd$>T:oLO\slcA/lmg&[I@9l6Kf"(3s"e-;57>Nft(*k,;
%#-9/s#[,*t"t$K!,tDb\")D#ln;?;t$H#Jqab!?.PT1-6aG_+S'Q.7f(PR,\6DMC&Kc0t+HI@'Cj#g05-AX)ZLpCk%5SoRj`2>L7
%p-=Naga\A=l!@=-m0?M$YM=\q3`jl>gnfi;+@\r]QHLlrNl48p:,Wn9)D;/W=s4WM%#en%"*Zp>l0=qX*C[\c70s*%#s9f_\Ki*+
%,_]kH_`S?Vm$'35QoD<E*mEV9;CEH:F_)]OaDA)naB9=M5amIP#QRZU)U6q^R[3-X63.=Lp_T>i\WQ(7P<)BDLj<.^Z5iG=U,8aj
%S;S"-KEI+ER(f5`RDKiTX=>`gWLOh<R(/D[ad_>7GfUkc;j?fcj[C6OM>-X_j>(*mS:am%2$ZqakRJ<[':ikUp)!.e"\b$\8?)DS
%\I+O*'L\NSX"IbQB/2-`^lKZI.,&ai)Fh(A.?r.fXbMPm8uh5c:,/F]j;;@,iE>d5!Y;:n`e!r>pO/kB-&0O@&[>T'=9C"tOeg=Z
%!@B*F@pYpdTsfXL#]V'Z7V`c4$JZ.162YJ;>R:_q'Z^fjLpAIKc\58qQ7AOO.P-5!C3Y_,#%8tDS1#,BA,pXZZ[5RgR%b.W;Hfu2
%$V.`=2'@'37=kcg;@oo\%4MDs3Nd)s9!?l5@GqrRhh=C"<?N"\.:o.`9>a#fNd>SaR_+7ZZ4-Oe+;A;.#c1M9'GN/`a47D-%:'&#
%aoZn-6%KDtDFrfSQ@XCL)TN8_&p3fW#'/^R99;IOY<^6,"jnW*,0TX1M38Ts#t,$\/*N+7nH(1H#[]V[*sLT6*f0s&%ZH='3MeSc
%"+]2mHF9tb_*\KEVT9IY^d.7UKpXHBquT+%qDXY%#nL91E(j\Rhf)g(%&G/-0M);_XFOV0Yl(fOU26/a8f:Oj'k![OoUM3ecjY]D
%JD*>1'.=>;-t3@J_+?,HSh5m7>uho>!sul%bn,%fSn%SNU<![lm@Y.gF'ur=Pl2qJk$\8,JUhA5[4(U]E\kiVqkSbA4FlH[\KM=g
%1pQk0s5fcnfuCB+PgB[:)-])UJ:V-mEYo.E+?tN]5a`B&XCSQ#:itios!g3-\,ot``mrFD"GEGf*Kj"pSHhbUB1U=R+YI%#101cd
%5d:gL^(?iIUYn.?`r^^2VC=%TE##1uR2Sum,m!*8Z.9@77H%7nGCZ#6"`]*EU`!&1=E57[3LNkRPK1S_KRV(/@\Hgq(rRI"71#6P
%#%%[A*^Lt]M2deAamn:GG]\%YF%q2fTsf(\-Xn3nqeh%m$W"<6K(U=/9#Mr6-,p/]m4:"/R?n=R,Psu$Z1'V:E%9A#p68KXg];<S
%^gP*un^ji&r@/Y$67H@+dtO\g>roR7*%'jTKU"h[5pU@T\?<X,Q!RhD_<Bpb"G7*B7!=BAUfT9E:qGT7,;g72YnV20W0jGakF2EV
%13?#W+4`2Jh*DQ:1c!#3n3G'BVtb`G=;D"$7uADoL^&?_:I`_5$9aPMUe[=,JRK(LP>gU@M,aWV/oamo!^ad4+Ag5>H)3Ps**;*A
%4GhEU+Oh,J=).N)6u&NuFW;\W`Z\Cn#%Ihc'1Piej.%oq;(7*#k(PjhTG1j/keKNG$]$jk]MpC!'P]R'6q)I!W9u2KDCf3OTL@(,
%l>(!S<KJE.DO=hX;EZAj!HGtAO\!3@SKu.Z`![;d1XSH2:(Blb'<eJP6g$]H:%4#PYq_u;jYFjOPi?(_QN^[s2RZH#,1CNe*@P.=
%Geb1cit`i.(mfkQ]5[3g+O`)g*-m3nBXrINo40:H39='5d)!GpLj"Qu#:h"<!M[WV"JnL$+=J]ji&"tPXNIJ.jhMKadZ[eM`<,m8
%!,VfAmU:rPUY)R45SKH.Ig[8>7"`-8]S8so&o<<F##'a%+t15@3)7[5"DL0o!3Ql9a\AV@0<g$Sr9_AdXX^B;9IV_WV\H2%b1<k!
%D$PYZ,S!\tRY3F,$\PHMGcqjT3#jZK,Du/!O95<KO\`1g#Tc"V*%/srQ$QHUCHP?5IjMGQFatZ%$#1L^'+mJUM%#_N1t1Bj$\c_,
%@>qGMn5M6a$Y#ZlV%Un<^c##)!=J3U-;E(\=$V<V5L<@``o'.Y-jTUa?je@dR$R4D]n.`cUe(uJeX,N#@N6/r8d):''W24jLaY3X
%E#c5+,"kb.!(7,<33O#pe+:mC"qCu7"qHm^^h!\/E@h:3%K-J<&W.REP#;U/=;ash)XaU4[@BLU4$j9J,#G:O:;54OKd!]9^BH\1
%bj$I,78`,O<AU1JEtjUoUXjPTU>jq;5W;]`)jgFK8qNgCFeT^M8pd*%Sk:P0jIaIQlD$W#H7JeUJ`\,.5(VlkmjA^\2S"P+J_Udd
%PEA"J4cJ`_m)d>_fUf0F?ZZh%hZr&V\=NsJMA^_LHshl(.%cfHoYL?6A1s`S`q@=I0XN4]-U[djI58/WieNXZ0g?Q0#PFSCmu@3Q
%BEJ"IRO>=(\N5HD#s!_>iT^OIfI"']5U#kj!G,q/*)Hk56io*K-PhNglA5^SBMU`eLA"%=AS>FE&4:f=Jhj\T/r4&II`UI>IU?n&
%,C?/;1:/DmLljh465eJj,K.Yf7gY<kfFoWsTm`%i%./ldb0Z_n+\)1D$Y=!I`)&qs`=+K.+)32Kqr*8HfFL!,OaXK%%./lm:@Iqq
%%l(:1Jg_jj@YblS$Up;2I;qX`m=cfp?p?2>7eT4`0sW0uLfP/e&4MQELFH\C5?(KLp;Ib$ZlcT0OZfs<);5m4`6`u.,"D8o(m32&
%'4\u-SgYh<p;7bZA5B!5,C<mZ(to@7P^u!f7Z?\d324'\-g$5Y4]+^$.d;XKb0Za$,=_CF*\k#<qM9\cnOFT<+cshj&I+(,9q[TJ
%UjCs\E%cP^O`9N2@Z`oZHD6N%Q29I%A$ZSpJS=n"Zd;3Z,2=kScCn"cHZEj=fH*Qej=2TTCU/V.HZNSsohci0XUL#]d.$L#Egq7X
%_CZ!("X9cs4A/V"j`t%:kpkc(gaK0nMCOtD;i?c16qo::S(q1(/Wo>+Cac(D\T$8(X4Pd.BYVMZ/^2Q3>9/f/RL0MFND:+:+(.+:
%;d#lEUEE$C8`SBukmjV2,LiYpC>9Nb!+c1.n!(>s8udG6U<cEd$RKPVZJOjb6XpE@WSO,M,cD9[\Rc!tl=F?BZ&+6)_4J--Q2k\l
%SY9+<.MA&Ak3%X!OHiep?<7dSi>kDq6$nBm"D0fl\h.!1)-`9A=,!0iU!T;=k\H$fG]8q#\Y&\\b+0[W$j;Lq2+ERD76u`a;G[`8
%iopsH5G0c.LuiTKf4%N$H"Wk#jg"scPES>k_9']Q&#'c460f@)L`Me=GV=3dP8lWsTAi_Y35q^\m`VO!SA(MNJqBT,MGf>'gtM&k
%e)o7?\](hP&+%9AfTr+6X..UsDe3ThcGe/%]SiHimS.]`cQm@4*I-'WU5P?Ih$Vf_$a*B5e(;"[I6t64:g7(e9J@fL\Inso>W"s+
%iF$MB@r#e@T_!M1W7T)<5WDLCkh1:G9/%b9A7'pVM.*+i1"dKhY&-iI5`RHd.U8HJZ4;/iBH[%U2@T#[E1tL]]l`VYd!P::OhT!t
%T(CqC>uW)gQ+Y4bhfQJm\:usq1`k-,,VE@te2NFh6Ed`OMH>)WW<eI[EKM14m7K508p9#_[c`NpGX^H&3)k'YJ7#d.=[N@cbD9#^
%$G[.SQr6Ql\j2H"_D_\bPdC@K!$*$"'`m/VSXTp^ZN6_M0FSNU*!'"@E.G@jW-\ZSa3P7B^FfNITP"Jk%2VP9/2YR=fZe$lLB'mS
%i1u+AYur-&i'>cmVRG^4iIhYr1DI\D:lt0.!?&a)F*;BoR(+%s;)4`C/rrFiP/gG:hOhtG\i66K[J&^([K9"h3p8#1#JE(2_bTI@
%na(Uhi;#:Ec1N*'Msj7+c1ua@T"L+Yma(i>]\`S4_0o*E>1sA%H&Tk,oY>@bo#;_V;io2?O(i-<)$A5T..Ye-Fo"jTN&\Q<_O=#X
%8q'$7bdSos#'eRg9GpW?2^'s!5kLJa?&;D[P%V`kg>IR7>RlN3H_'DiUL=Tp(kgPhF,35#-R_DiC5Wi8,LrK'N*#VFJWsHs"E_VJ
%:ofu"7V6?pc.%S+_q)lXKdJV$;VbIT`^Zjib*#INmsOu7+(1KtpjD];TAu@9p<W%XLJp^8h]?sU`Y(q4UTmP<`jB#BeNf1pd?!Uo
%8VL<-BF,l\N4pK@V5FBjRO:93%dUl1THhT;eNJ#5OcVIL&m\U7C*2FV!(Z)GhkfYX;oQrEHL@^]RRD'N>_4XPiXA.>7Nq,,AlGCn
%3pJB&5.8qZR'%:*Si\=-KMh2hUTqKdP$Kl<"pdgidjo]D-qj7='=B&Oc)C>(mRQ';@!t]fNHDdl\7<A^X[ns=Fu6A31mO"8-a&RK
%>]^Mb!1LGh3O*Kp;JKf"+]F/i)S"]bEX*F0Ee=*b5Z;)ij9At96L;NS^53eo6dTBuWo0I[)NrF+f0CA#.e$r.3/DY@+#.U]8!JUf
%*#AZN*![i5`Z4o'QoV^V(k/QnUDF32$$#:kb%K1W[Y^fm'AC(.dFZdU<hd^cmpqT+.[UkSIRpOT8VVjjK,A$U'"JIUEOZsDE&co;
%!Q#%AK91UPg-l"WBuZ=QD$PcG=6ild/#CU9YfIks_@U[,]!O<)l9IWp4%A_[`<=UP;j6$;;uP3@BF>KuUQ3>QZ:m3jN7qBr$3Lju
%I,0*O2*Qm%+@nTq0c%&Y[bYN#1$4iERYcJq-a[4H)-)Oo/bn_B`[K*$Sl(.&;-#bH!=-OJ"S`'`jT..p:2r5p1!50*ZR&AP?7U%`
%PLBTDho$j6pZVAWort2_PT"tG2'!nZe8^fIM)JatCGSl[dKjcpR8&no5%a3A'I%L%S7iW",+VsRAB]+o8V,Z4>*Ga[NE`e=#7@Mt
%8<o(\WQ&"\U7U9RZ``;A9?dk*Shk.;_KsFCm+TF8og`2s24B"ZR\>4Om6%+c9?p,X3-re`K(=M5CGqWiN[7=D[n$8_-eCL+?F.S?
%5j^M2$*s<GXBD'QIKX,MZl\>:T4!G5B[r9P!kI4$-HXFQa(nN]$CECt<CrF]S6uGhR,(Zh6<-apM+ps11QLLi_>nO[>X+=K0f[:`
%,r*`Bk(QuoShlk79Ocf270P2D]0opt<;LWe%<UTp9?dh)Ie0#(FD%*i&nO!D:!u*H^+-iq,+UdR2'f%V=jhH=WK$)NW-ARfQ`)Wr
%l]=l?UJ]6QW@<DrkED@5J8-(-73rH%[6u</>V0rY9j2"<9?dk*Shlk7i+!b9N>;PHfb1-5UZI.Vg6!pu\AYI6m5_@Al644Ep*8\B
%7uHbM24r6_+9a/p]K([dRBo']b)I"j(_n(qNt8Tlib3?(BE<7UcoM16`35p^e\,8p6[QP1eq!L?WUW(lQ-k0)'@h8'7G^W0r/-n)
%2(ape9l-Pe_Jrg%FVFh-Q"W8k2^]HsZdd\nmU6[5CMI/upRGC8?_PNq`bVEu3_Cfs\Cbi/*qLZ3^;V!>0dffpc"_iNdW$WlWj9T8
%NGEN(X*&p,'k$iqP2>tuVPXK:T1P$E2#c%4`iiKDIuP2$bI$;-mZVGu)6[4Y=s3R/fL3.2j&Rc^,0.hPC<`N"oFl(a))#91?6K!4
%fgI.Zj04oL7g@206n=7qh8]4b]lj"g>rc@J-8dH<Hd8_W(t)o3j4>pKC4`jOS"IV.;TAH2cMSdY;2NmW2(t&<cE-:#dUR1TF_Xm_
%&#G_nm>pQ4:U8_gXB&9K!kI4,->HpBejgeK4[:*7ZpR.7`8CdQVC!;D`2#Zd26BGr0T95DW%eHV/T+o-Fgr:G9Xbkr#U;:m:)NN4
%V5=E:^POg23dOJ:r5qH^qcLD=]KbfaE.SNjj+U.N$KQ[-R\YYR\93^U%q+3+/ILJq"t/),2.!iC]KkmFZ\^^tN*Eom)8achm8r>k
%7W4Q.^C[SSC0hQ3C$7RdT<;J/!<r6NDGq-kZ5D2$Q`2gtL)7f^)I=[j/t*NrrT4huEV,XO:ZU;E<trff\9U^%@-&Y\4XVL\@U:2O
%SCp:n@`GKTgg/r21F8$8:Pt6b#Lb'$[4=b,4Q8)pP#4\[P]Re>AfbX"B&'t-[(Su(%nPJ(+n\#ApO"3-)!L]hg1R55>E.OB-sMoB
%ZuJuXS9ULH:G#"/3PCp4Xpb/*AnW1#5[1h37at-VmPkeQ27["l(BV/1/*S($]bGd"oR*d5S?C7744K!^6_6]pSs/LiSiA$QGsS;"
%SCp;YLOLG8\da9?RGtqIEUTScBTJbJm9:l?'I>&!1bXr;c>7n*UgMDaI*<^JAf^0j\im5qIBcT=ds,lV+>khEkO(@:M->7e=hD2'
%_i]*o)=@,/GD,b_Ag_IigPA7)OMn6-01CqIrC0/4EAJQKDGf$Z,:,gmh;e4t-h[#MGhGuY;K@h4:"$_(ge!JDUPDW_G2&oB3int3
%#8cEAR[TLj3hXg3->=&VNn^;:-fDF$GEfUib"9#IMA\$(09CP+Cn`71j*33AN6`-J\:K+YAH1^S\f%hZC/Q2KRFXc5#T1$cd<?8.
%C5L7e`1LESq__DQs7)Eoie:%M$fmm8CVD"?@rC>Y0)F#8;5aK`ILfr\K,H'1e_J*P;%bYlT1o(@3VEF'a#N<A>*FH3[JZebqf-cY
%#rVg?AQrVET_=nB%dc'YnSu7@AeoC"6tpL;IJ`n!]%6hS7Q6@mV.KmO^Nj6u^R:'e2n3'%-osH6(6%CkgZ#[uL3O!l--j"u%)(S0
%&'`%(E,;PKIB/LN-!dXkS3ZI!.h(c'YOO5[Y2KQBRfLd>A@Y]]OUWqj('9`UL6fe^^7:sn-?N1?9Koiq5qGX'@&`.0(mr]TP_!Z9
%'6VV0""caM!@$JLe7Ib#12WjF1=>/la"IO(ce$R<]j<*Lp!6uZr'$g[ascOE+7Vm9BV_:hHJdr!i_,!bWZ"mn$"b$b.b!r@j*]Ck
%e&_./bT0JOWI:Y?LS`>8`ig<73u56\0LLJN,:-N'o\!n'_8Lqoi8t$?&;p1hYL)Q:dtdS$d-3Pqk!D_/iN5SAQs@/N]Th2eAf06C
%DEj6l84P*dN&G?h/B!]3p4u&$87E9*!0.L]:%?Vpbgm-jf/Bu<!7A'NHlsnma+5<J.@&n``^]3:Xm6&kBPKEQ_C=-]L+,At6o.OF
%LW''<\^)4'AC#JJL\?%pT5aWT>EI<.W+?-5c^t+gFOXn6!Vr^oo;#HQFmH(&:+8A#0R@23+SV?B6q#A#rAgK_=V7CN)8G:n)tYn5
%1CjX_F]RamO^Y32ilc;Agp_2Z+i!`>)2@jTgJ?C<oKbu>b^Ij#g-cn)=XmFHCf!"/I#+rBNC*,WE22X9&hB<9Q'2$g91S]DfcO@&
%*ZnX^83fWV8o]7+=;H1d=&K*Ij>'@,kZ5BVVnTLScsH;^]4QmhY\`'Wl51JJPo]8&EY*Po7(la_%PCVZ(Q?W(;SNd`??/"t2T'<.
%P\2$Y:TB0mLW7"3'+G8sSNESnLP]&f@lf>k\gtc@(t2b_'29J\XWO<-E#]fUN(\8XMqZKcB]0<kQLPQk'$uq13s)i>_u-$g+,i^R
%Dhi8(Tb4]U[-,)7)]^g=6XZ28\8/M^Y=N,'GMF;,J:52,2I^[,Z)Ard7fje;S5KDj7o8$o3Y+C4nAQh5'TIII*O*^keC-#;q_m.L
%NWWho$u\B;+t@M);50JQ>aK*W+k7EQ1C*h]hugHg9(@lOncQb#<<_t*NRc4L`]4DUTnRr4a:-ceTE[r07L::Dl+0F+%;j?Q^LEKc
%!A28UbmFr,r9-9*._N-m[2$m.Q7.SAE.j/3'-'K5Kg$L<J@HQp?]Y1MkjqJ7g^?/\(nGIpSS2c/&j2ua'Ktf=h-9ZI$YaPLK>G5)
%&-hkF6"p,K<sW5NIkcW(]`jN,Sj4"Kb5f50OUUY0N\IoN5a&s371t@K(/!'Q]u?-O*'FH=&oN#P-@+.+E!ebj@nKrjJ^dmlV/<$:
%e7-b4U<ZGl7`'H"O"GSN5I>1K6eC:*8)]UQk8O8KSo(b,8ja=%8fJZD*7tdL[^X<mBb4'Vbia,gI"`sE;GSK</'<<u1SiIP@AtT/
%E?iD4'&Z;m?(?>08pa3[qCDD%=HiuQ8s]:tS=ns;bsjpK(8WQVOMDT\`@_);gI^NnVnZ7kni=<1dl*>L)lN$LF,ic)`>=$+09o3p
%6#(iG`PKr_&uIGaqq"*O?WE'"]U27)SKJe1qKc]MKuoPFerol!B)E[o6jLa2h'h;:J];%)9f.tOf=8!4O"T*`0Cd$1kbG)5Ndn`(
%+3*2[NP>:Yl5)3ApQXmj[IMjc'.$bo9@;b&o0shk:"7;XXr30_5TG9K3)M&g.]8.rY*)4`M9d_C?Xf$Gm/*+@V`l@HIr%0n6DAZc
%NPt"cj%jD;.cM+ao=r`h+RqbepnQf);X"+6iJA);8)Hd3e?/JKiK$4k*e+/Rd/n0:L2cZQm%Y*IV]%VhCMIEI9sMcN8la:&@;#-t
%1Mi8'"oELGKFM-9>0f)LKuaFi'*S!ng*KsuokkD/+^Hg(9O$*kK6>Hn(#iC@F],?!H?Vm%nL[l:)m&_-+$!%EG.^3aV23u-K?O7B
%5)&/NMub$[6[;ghAj3rUXOUiMrO=?V:2t`g^H_hn_TI,,kY#7C+o)NXM"pc03qRF"n"#X8FB*c2/4P$,"l>,Q(/jc4oso&,P<Bo_
%pTm7h)]22ok)d^[!jJi@"*cJc-X44VD/bD#k91``*&R#iKs5Ca>+eaQNr`Wrr5jKaWrgD(&&_U?^R%J+I1me'DSioT>bdjm7_<**
%\kmYtd"4::r"eXGNN^NNrf0@<m"7Ge=)\uH:LSFhbBpY]e^\81X^p1\ENPD8*KZFYS2+B"&G_SE:]6;PBEJO'9Q'6cjI=&#,6._E
%Z.=t0Mg]44fd;.W.%.d)5EDB%DFignaZNNtJHGmQ`RZ@L:ralqG&pfMl*qq@os-^LQ)VVA,'+E?XiV:&Sk6"$kA5rR&;'VoU>b(S
%GXAUUWg*m*Gjn:C3!re_9d;Dn`&fO$XO_4ZADolD!Y4.O!K"2Q$!bS*Wr]O['Mj]Q+GGC:GGaA<;5M!/eNZ,RqN+bMXf^fN>Srh&
%S8.uDe`9ecq\CX!T8egp/XuZYEh]l&2i<:J:ZKHec],]G]AEBhF?@Q#$3BUMYNM-hN.=,JJ\pOf66VZ=D^qT(J.gi8"P/GYH;Cn*
%Hj@=qhMS!i&Q`B)4Y^"i;so@NC.2VCgpO,,m")fa"_o.GFi#?QT(qV>h&cE$YYBn,5=]-:Z54!4@4RIh=R9Rh?[C_:'/j:_LWN<@
%W4Fo?45&eAH=F5@5:c:tF;A4ol%dS[oF[I^)"!!IV#0,X'6WL'LXf/L8?F7G)`?+@IDcn,;0u`[P;Hb9NS@4XDn%HDgU'cT;tLj-
%/:6BcP;U_RM;_4\n?aR'45gE$H=FG`^BW$uc^jFW1d*SLM*A2l'A&eRmsRuJGI$Z`ou)'ppM'RP_M^=K4Ybg`*DV*@ntO$9:RlX7
%%g;RDH7/N-=C8]W"f)#-hkis;cS8dcm"tT(LC<t:^A*FL+67X_mk4<$J&f%@s!@Z&Tfj"G#s'R.7=ciP)q#B+*o?tVQWPqrp-aN\
%BHYY<&Y?4R;En-*U(04IO^T-]'-!OI7mT@e(l_aG,/f\QMs6-48'RiY(FPg2mu8#Wn#*C!\R>OkL0Eet(O&f,lRYg,h-H5F<d4-5
%l_!&%^Ad$Kn`""#X<#$%s+r#V6N>6i5;RusS[(dPY3#Bt`8*AMr\O00rTr&%-Tj9Zq<6of[rrk\CeS-)ie<`k6dkjPV,4e]Nm=M&
%n^!F!T)-d=>\"lsrnhqT,b%uo4?blTo]baU>gHba+!'csH@,F:+S_qt#N%`fs)1/aqr'<$\D6S'q!Eh6oKd0jSao^gVOkKBVV[o-
%^YQrfjF?'YqG5M?c6#4*NHtBA4b&FGf)4O9-@+@^#!PXA!ZTL4!^GMsIRYHeT-C?qqOGBF$lR-p)e[A<?$tpt5$p;PruhR$!e3(J
%1(A&q)?TW29=<K9`r]hkTbWa<@LUF*HT>$!Q:*X#S3kT^J6<Ht6ERUI`<,CY(_W"q@hIj(bRGIV#52%1R'8ig:r-jR?59EG[O$$_
%OpKGB5I85E@3ukr9`6)u7BHP40B9$J7)Xp;Q4[RV(t`(MdO^IdaAa;dQ&DmN5rhha/aIuZ01IQB1'&)9=Es15VF2%!#94)L=d6$b
%SZ2mPJd3!Y$cskH@DrDIGAL[BM$OI9/!6@0?3mqe,00hcK\KsDmLc+$!Ja0*L)8*)Z\`2*qYd2k)R65DFdsQ?6>0j:cVdGVONITY
%NhJmM$DeBZa(&\EF!V\T.4-G5)(SMe`QYSr1l7-g<%fF.D_&gu\;oc0ejS/EO3P)K7T_*Z;?GAMN5Lg9K>Y;%rt4#'(9l9tYC`+=
%p,8l/%i\=Wi^3H0iO/-RnRP"^RoU?9;c74,T3EL,giCs2QufG(1).&!#])fGN`?kG,au]W_N4rq%>YXu7?D1[P!h1Z,nV=3@iHnt
%;GdBZE(chh(&l$K`:G5\qe'.ikHN/q,]aW*Q`EVYOfO7)$B"=u)2r2ZW<7Mje4Ml//A)f#,b[Z.S/c?T@/(qUA_^NuUR2Agr_hF$
%]%=_AYMfD4)hkhJ1INOsO9rS_.WQbXfmt0_#_iKP`:dbqoeib$6-7V>_ar\ii]7B'&);#M;gAS1K=bj^RmRO5,fYQoUPGUNLC5WN
%ENGNo=@57s0BJ^tW_':(Y7k@=D[lqoXp\VpZ6cBSE"A#BOBCfXOu&V55p2HtN.nGTf$gsM$PW]D:KJ#8:b4`pU&aA,s0<cC!.J'V
%i`njDZ5r`0?):akCD3Md4/X>n-9)cAY-)-9/Pr'.5Z6dcf6*27H$B]uKO[[)^,3D,^m\f=d&k=O8f;m1(1(`Ve7%1N$"1TE+]6Mg
%cBK(De'qns^`=."Pk[2CPD,/:`l;,#DaY2u8eo6J?Hp@H.kkIfBk32TQA=o>8u4t%TJF_VC+Wm`0(a\_Wc0ne8s##",+uh]9+-Nu
%;(Vj7L`]1ILkkfB0,Ab&ek+cA"X*sm'X:LJbM)M23OaS,Lb$U8M0%dY^ouUM2`80)>YW`M66]Z"'(J,C!`5?i<b0.'@tbX\$OdDp
%S2DtlB[k4"bU@(?VPk"shPp_i.R>mSN>Z(3riO;--eN./9<t84XA&l0<pSDT;@UEDL%UMYi!1/LM-TH>AuTN@2:[AEYSXjFd"b<f
%:hIKO4SKpq3s=-N.sZ#L:a%jF!#DH;WqCILKk$%(CPA5-ZI8Ji_/l8=-T]R0>2WNPK92B#"T=sO=qPmb$=\9@D3\#:<"LO,Ii:-T
%G<T*T$49W,]5V<EggU7\WEt8`#G>ED4JOV\OOQ;mS!N/lE6H(]>UGM0@^)pbJI#Bq(-/f]YOudUXagrCVmDdiWj+Ma3F"0T5!YuZ
%JjI;,$#rG(((6E_!SV)h!?!jG3?r@JOtpu:bQ-u$Wdq\dj1n[%hFonh1c5Ug,EP=@Q5rl+7?3@%18%f177q#TXcP;n'9mj'7W=Wn
%,.(&E'n@^3F>HKDH*/E<ja='k]20(ZoG/Gs:9_ah6g#2LZ+;Or>Yq?HTY]pTToXmrI*D)jeuFc<qpLa0fV08m<<?QNeW:E&<F]jq
%^.e=8L2[5`FVtShn!-4Vb`S_+DY9DMfY]g-b#*tnJ5kLn(!6Na%qEHD_HqTtk*CNc2j,H_Xg#X\V@9ZS+:p,GdDS.mj9l)@5g".g
%R?.[hd&O:.Z3;b63E2koS-a!4CChaG%K]ig,QP:s"450GAe"Tf3YV'>@DaOA>OFpFC(l';!OJ`Ke:suU]EnAaiTWj)/8H.q%2BLG
%"EU^kX`R']IV+Or3La$.AeLXJLl?b5'T@#7-"17ZX(@RM9`m1PLlA=[^`l/TKd\];=5/ZO:69-53$>.lUCm3m9UX9s@kRp!8lps3
%UF%.:pJB,FRTMg^/+4DlmOB+YAYl=Fe@uh6?7fC88V#;jX!?ohK8+@JF15nMgVL2%_.q;3GY;`'#-3ga6dq1>'"/ml!L*gSh_B_l
%,OgH0M'+GD\ROY*X2??=b5&"LB5+n4qA*hR"6D.L4-W*O'[&$[>+t8VB,Wj2:f5(3UgJh9"A%M011uS%L:L%W%kWOC&fMWJGDMsW
%RM;0e;\!2VKWa!*K\uu)c38!E^8j]&KF<MOK/[5;<=91DM[%A?Z5N5r-m't'6[Q$X&UgDe4u4$\'GLRLY,Xq(3n0PdGG4?C=,2@M
%c<A`:npXSKi7aX3M52<+d]cr(&[XX[5;YR'.DYT#\!<Xb7>_6:TEGT,PtFT:$cm4,d#6IQO!CTX9VS3N9(i.E:]UA+qG!9e$I>j<
%J(Vae!KJ(mg!iQIk,do]:c*g<7)B/6.HiWjZmq.q;M8Nd^VJsI,4R[8&)<+;++iQDW"_,uW9[ie1bKHi_C.7&I8iR('j5&A,BF1U
%0R,i[dhdVKD<)nXi]7qs5te,fdW>_WR*.a%3dAmT6WCL6s0K!\Pffp=rUANpZ&EqEi@9II%/[[G%N!bR$a)*<32mjfSlEA!.B)o.
%*ucL`&Ml%g_8Cfa2;mDYD&^>gfm,8TebB`Y7U_sIBFO'ojt0,':*erN52^u7Q\K@c5dfkf,<%<3on)C$iIYI3#)NjW3$C%kn'n<-
%)M^IR,H7PY%s4`QOpr&uclaH$0+Q?I6%9M=NReM9LOHBe95TLigPd6?<>\9Q)\QnqF0uqi\+#>!M/XUQ]rXD-#(!n5`l^P+TmobW
%W<1,=Z@KUqlP(t`WH+ae_:B^tp+$[)`S1mp2r\IQ'jrjFQN;eP_[D'54CshH9f_le2X&`r*0"/s6r+7WZt;%P?D[`/Rj0k;UZNM.
%$u'e0V)/K6"#C^g6Huo91Ef9jEn%KE6$54-RCr]-JqoS5(e`cg,a%]W$$7W6=BEqTJ^K@p/[U_3$[/U,+<m.@0QrqI'20sqX4:g;
%ERZbT5cWdhQLInt]LCgV_#9@&XUC6p;h`ur0Q<;Z&+;CFGS(WT.$X%qN$2Xa=+dFc?_&$q,8<\L2R`^_&l5r4>LrnlaJT_*;q"kp
%4Oq(5N]L.1Xj+*Q7AW,>qhRA#/@WbN9M8"u+?`kKNuEOn6^O</;$qFMT9$Q_g'tWKH3,"@_Nl>bf0q865J=>h$^#AmMJs`f2J@gL
%gnpn5*GeL5<iVu"0?:B;Y76j8)lHl%*//,0_g[ag$,)i4Z[b2M8FfBO\K2k%1lH'12J*c;i9i)o$Bejo67O`oc#"*"17GJ!l87L;
%X,s<_\k3E;A2E;+_<3\>##lqN;14.0JqZO*`;EAjD9N7Dga5Mo`2Y?j[B-p/+s(cQh+A[gbBB=sJ363-Ok%\TTFS@u9iX))!UYSn
%,M$8b\<q+:<"6Nc'+>HSd</8'9R6c><#?XYJS^d8K`]L#`lgUuatIM^YU6"H27bSp`(UHe/MK!^PZqn].MNQSL:)KOP]MtP/pJBM
%#?6h['9GWaUESd;e7PUnTS=8H"m'*&ODTe5CY/VV!nq^HjRYFa"g*_!6\*lu,7$#j3`Z[7!$a;O_BN0V:^LWu@E&CY&_oP5QU5s5
%PlYh,>#4hF:F\J,]f<;8Zij\ZccQGE-N&N#E*7-FRb0.1MO@cU$]BNNiZ$.a.(J4n&j*)tnnCoXW&:1NZR\BmLonWcn2,f\dYi#)
%%NVQ+*!0Lrj;`\RGd[AK`et1F<.<m/`mtNk!:VDS_._gJTU&^meps#,::+PDHpH(8L7U3^m8dY9-$%n[=Hh5'/E'JA3^6cG?t(<\
%DX4lb7SC+"$XsM.$"<'1C)=%mZCp0>arX$b[G.#DN4%YG@;hQ$7(H;/\H/TFRNShl;94>P';NJpab5$HCg.s2g/>Q%i=NL[\1YU3
%-Q$!n8DusWI8m;6(lJ(u9``-/"E.-X'9IOmn%g_i=0=;<3Ge?lM<'nPM?^\e,Hmb#)lDbWQjt6Q@5[3KiZ(\CP[lJd<^WYq#ue6M
%ZpPL$5_;e7V?#)['sFg`(5O`="Sfst<Sb2<%q#U(<3-cnBe[#I`'iXu.LR)=Xr$*AqZ)baVM6#Gq^2(M.Z+dL/.5a1-kP$e3(b':
%1+XmR#Wn\1Z=`'bpdtjrU1e]UMd0ir0=95HX)1a'826&3_uVrcXNq0rSQ4T'0Q9#-Ic(Z&/S\7?L5d+-[V3NX`8KbEK;Vo(9e?Y%
%Y)+Ma/dC`?2/^.>7F4'/%RtlF'#V0?H:"Z/%g82+EY39o8mcO>k'Vt[B&T^(H`0qqW+_;8.#'MPXd)rk'B59#VutRB4opdpB%>O"
%,h816$c3-oMpr_sb]PS_@>otud%En_\jAgKkZ.l-?N["4;@3"u2RBU)b;0+Qo';7"Xp>\%KDl=_Ct!2:Uu73+\-r+T37tOu@>tMB
%Bgn:#HmbZP#lCWoK<rb(Fr_4eQ,6AF6NOt/J71<cP$k6(^MhB8.F?U=foar<Vu7NJ70Gj+2/c\U6+8?)%tmBS2>kS-/>Eu?<V6_5
%Y_J!A2(16PFD6=;;@QmaZ;u(iZ7\g^Gnp7Sb%S(6=^.CT*QkC?E!"[3;Ak]t/jhBI7?M^Y&Io@6#(mjGM%th`@i/NFR85-1k,rRg
%9\*lLeu7i2UHiDi0OGlHgn9IV#dJ+k&qQ9Y/m'@J#ZPXul6V)E7b7nk(><ag$pZ_4#,Xmm%EBC,3Z'tgH.;BjX0E&,'1dRoF@*j_
%R#T:O?>F#%0o*s!P;I3f#*gc6^2dBGnr(j+'hMRPMMQm3HcAIVn>=#X6HYY$R]TCCiX<\d3J!q.;qiI8e*5*aR])l54trXKA<$A+
%q_CQ6MDC]/>!M!X5s,CbU!C#q"B8D0l+)IH6\_%BdL"5Gb]]DT(9_mg'p5)L2rQWu.S",#J>:2PoJnA..V=o,g/'o&CHMqd_Bt_E
%'EP0>+AA8XXNduK*@fNA85bZb-`a>.Op:jHoAS&N`e]Ks8=>7W$<(04,iaKahdfbI-MH_ZA\g8L>$?YjRZ"E0]9X?T0<8N<3S(!H
%iM;A)dRD8_'bVjnRLA&\7Rr`1;i:`WQSk(<%=fGQ;nL%Kk#WLh;]&naV"8<8<`%1:=4JWk-Z!rkWCuC'HBL+H"*H+T0Q4Hf:6\UY
%O<Z'7lr,gY!2rfb=JZ:0;5l81:`R%NIjS^mR#kR-X:3,Cg*F':_U'G\Cb:ed)RE0c>3]TT6)GfZ)&lZ3c@na2f[Q0V]!>i(bD1pb
%Kl>PA<8\-!TnrA^fn7rlHFIA,AEq"\on33oR]6DnbZG@cbhHasJ6Xc92!9\s#4,(B$^"CW(6Dt%;E/3h#G)8SJjC$qb>*2MGDA`+
%^nmrqL(%#p:g:Fn[??1\Jt$'O&/`Ni:,22m</*AEp,Ae)ag&3b]s;,`o'8SYAb@0i*i.5_6fuq9A/_Si&`>3o.TB7#+T7(@AfrtV
%'$=kK`ZWg7+V>&p`eO9m?inXh+"f)Zb;8Z(/A'CC8JN.++<K!"XMd1);q1n@`=AjeW/t[,=?-m,>`Mfb5'SJd6gS=hhZpm7FuPFY
%a=R[F6,/FZVM\5S)KdLAp/qU_.8U8]RiepGXBZ=t@WkMc;jrEU4B!F(Zr?*G.6O")DBRC#K->0?.KUlb2;SV0#KL(t;m](]EESM$
%c@tc??#Vo>["2aE2$M9"aI&lK1cD.%C">?ITHV:s#1_f;`lSW!Rg"4s16jUS?``@`8p3oA7ff4hHCNHT>eGUOJ>bJm%"Z:#2Cp*]
%X,[0VLXLi#33[/qa.gkl4s6mmLkf\M6d),>@bMq/@8UVD(#uu0:TWsj&i2g'R^e?$NKtW[>[G$IE8B"G7+#V_QQK>dJ8pKT"JKQS
%Z[$$`nQj<BL5/Cl\Sc4i"P)&@5X=t,%6BN#Y?egb3sfRgL>7TLLGEeR#Eamrq$"s2m]1>eFl]Y6jqj/)Y#T1'A5eC+?u"4dif"8J
%]0fRd(^ik@H6bj&Jd0)niK:a2k%9^K%I,@!:aA@PQ!)/mZ<YqX7PP4mTF._0I)h0J%Ri%+E!T&M+G8ZY);*d:Pd0%lnBc"i`"lOJ
%QURRQkIDE28<42dANXK@^)NeZ>:CPK^j"VKb(bu[Dae?\kbkTUbUG#;F=?A':bh.%l:*R#3X!P/DkGi9#cXKp9lgB;q@gepnff&,
%J5:^$A6!JJkPtd$J-$gu,>d-fq2..<MFeSCe'T-hNbq]t"[N8?pL.Fe2kXT,>m7@t6RN%6D+O"%_.nE/TEo.aZ'CJSaJ]=U2<t]f
%<@Id4Bk[b-bVh1U7;#Eu;Dm0]Sa40KZ&U#YNJ&Qmc(h$'`P'E_n2U:dKRQJi_EjC]`E)H[XXkI'9ImbA$5NV>',j.Ai(aB=:8@`[
%"<=f=M8:tKH5lti/XE9g%;QB"T<$_;CSq]5%MA>mfksMD1R0j2:eqsr+4"/n=i*qI\qJNjimm,mX10m?N^g",g,jc]WsOA3'gl5>
%%AOG*Ql)imSZ=dfQ:hZP`8i`dC/)2RP1[s(QLehk-T5_-=e$D*#md;907HMt5a+[R:/JpO$\F'j1%@%5\;Mpp:ta>de$J$4&I9q?
%+]5TD#$(5_R1=:t;OPWd%AIZrn?P"i+inOYcPRos8^q"_6QAlk&<0CbMSioU.bIhH1&smuH%_60g4R>2E7\>F.P4_<R;56i&8R\L
%#WX>CgG[X`o7gM8`a"/(UhR@AF0-9?k:Lb79`q[$d^-t$*YQn5!%T81j`F:N.NLLE0]**X[B]g4GF!qWA$_NQ1?4&i@Yt%3Hkm,K
%p;b!U(7%^<PO!lBB8+>J+Y#1##+V*%N9gp+<Nt28d's4[Vl<nf/8;=;2b"67S/uXY$OS7l_r5.9O:d+uj:Et0.RVTSG30/mc"RSe
%QbGm0C9319NjXa3[P($@5bl5!9'fXk+(etU&1RB$MXs,`jCl=P,.(40+dpo,VGoJ9C#dKb'G*1e5KrI+'*3RmR!O`I$]kFWPcHZg
%TH@&I7l].,.ZD#h;b!S`dP4pi+i)SO<gp0VMFRCQ+%<@5hEH/jiBqnrTbh"r"%.Xs4[?rkD:gl2)J)3:1hdpX2@R$(O?O/H!E"4[
%Cs)$1UVLmH2:2n#_h^j$crrd>l'lM&$n5a981^;>X6U_uGBjkJD,`L['\U;rGL-Q7WQEXfpcg`N_'9l&K7e/O6C:#TH8c*Y[>fYP
%&=3$D-=AYi0*q$oQ)]8:<gqGX:ijTDRDH#5O=Yr_j+R1>X>gmkK//Z8KBhaa1_I\2.7F)kn2VUP^kK1UAWd4p]i$@)f`$t$X?:C+
%][clIO9XisMqXQuaOC\)XAi\a5%07:e_3BkR<+I^=]cGD2kCM*1E`5(.hFJ(!4k(c,ZZapZQT@4%^g$;AsIPb27W]Xg*lO-;m6:k
%SB)%'"ij(99a6k`c+6frIb!#Y/rUeVGee0$/*+nhMXS0M6A2h9@Ra"a%"0+(+Z>$J$=.t"Fit\5KUhDP7UNU`%%rmq%:-(a37QSj
%]0EKpb2`T5/-A)paVI@&lKekW[RI.6ijYg*]6_s-<GfS]OFKQd12;m@>%WEV6@=;3L\=!=Qps^\`""dt&B0oDVC7gAN#/?acF71f
%PH/D]jGmrmLtDJGT2>4#CceG_n3`bn.#p`<85)l:*\Od5;OGTN@#J]lP;/CBAf/i%nh4c*;k*7c7d*:C1i"Jf%.udtepUB:ZLO3W
%lR5e3B!$`Z_J:H]A%#n[18iZC7:?r@3i:_3l,.PGRerXii>Tc!W/t[)?)b6J3YG[@KL/W4%0X'+/^Se>H@.'5^bQak,dBPT+dJhl
%+UO!J+rjhQkJ9#GMT.T:='J_-PUjcgEIDXXkbNekGKgs-PrZ&kjg>CDr%pWCeY%mql:,ef(u%m#3jQD(Sa5u+'59AKBL"&kfP!$'
%Ci1i.YF;81A?k)*=9-<b_'i$[%$o6%>&ih1U4f)96TUc<L#KC5R*uJU!IBZ`eN@g#](9L$X[VX&6?Go3#jkYpjOpmM"@J$tcD+gu
%(kh_H'mlpd?o*RE>s)\$UOVK2B0fY(\-"'WXnEBt*one3[Rb0([^5IK0UhuP*^W("jO6E9I7P>d[K;M"8Cn^@$I\$4\H;[t[.[JR
%0ragr@0mJ,@$l'I&]mhrWj#"cn49NeM&Ij$^(4@L'eB<HPjEh&Cn"N:C2gO$LfKGBp,MQ$3DB\;#;@-fcDCV[BK8QHYK@o#V])dP
%mLAQFk(#/Z&G!+U9i]pMe"KEcn!$k4/'>p58@2VZA[Mg?PYM*]LqdU6#sZ4q&0*,Jkm.%BCjbH9G:bTe'"(l2#Ko\^,j6q"/5<$'
%%tJ[@%!J^!56XPQ`kX6J-r\BCbH=UF_enuFJbpcHkbtE^g.TorUl]JLp2`(/LEp\<8:L#*M2=7d#BIPlf.g2PbHOK+l%>M)XJQKe
%I.E4,WK-rWW^)/effHAd$1cdc%4>0aL-]C13"N8p0o6&W02e74a>$!Wj&Cd8(*rlG4TR4ZI4/'-Nq2\4UE5AL0H>0]:bZaLn2WU*
%H4#`n.-Q?0$)sBH0_s&"@Q,S*;@4-@-k0lg7,_P%>0RX3Q5Y)\Y(e:YeY.#BhRE?o8F0g$""lWW$cJ#4h]Kkj&8OZP)oKW_V5fWp
%XS*/eB]V>:E4+J/6Os/qAgSObab;if#55:8=V4usQQ[Z5Kn(M+Ajm]_``7NhB-b+]K1&u\Lt@W@;ud4D`YrfXfSGK5.PFhH8:JXO
%/S_HU&P8_cc%7`4UX[,M*#\mFGqm[iXH?m3Y0kF[n'PUfLjorp"Bee9,4pjjE2:3rD10I$^_q/eLd@(Q@t\!K"4`&2#QcijSn3F-
%6Kkk7&nkfnWZ*46\!8ntW<NZjD8a*M@?:II^?Vk%O?as\gGfND0/Ha6\,CsiC#C@HBF%]s!Q626_FlqI#]gL%#fD(a5F<\JcsYSo
%JZHgA%qR59oChu&,1+hc4,'n<:oYB?"A@QE<o&,A@Vh?aKZp0)8e/9><<elJOPP9+!W3JH$)CH^GiY;Og&oH\l6jIq:kgjoCH%4K
%]<^[R_<co(BM$pPWH6V!Kqtl!4!aoG?"\%G#pW(p*ZJAHJ/3;`(D&#lQ-df]!#udF?CT.BS2jp]5ZPDs+ZD2f,^<ma?sJDc@q727
%]an.GQFeJdTrccu$OW>nRU):9WX#pN"-NZC4i1N*BfARhBTZK?$QZ6:\BA<8;Nn`n2.&5c*Lc$m&4;IJPJ$sZ*Mb2AHNE@k72<sQ
%#2'@ie)Y*0'K(5g$.M[)Y\#Q8h/jgA1OshpZ9`C6faFX6oN(Maf$bBXUN_g45aOBJ\,(HQ0(f7heD(4`-g`e>c<\3km820j/sN&P
%Be+CYBsK'.4%&>cWurL]0#6JP76%X_3L+JY+4a%iJ7oI1&Xq2Q@'c[9Ln^b!Zq/*aKaohRlk!*11(s(YD*-*>?,6)Ihmq$Ja1[es
%JK#@3eQSp[cjHUb!)KIE+G8N.pmJ!3nAE2hgC@*t^tgmV#n<?7!/@M+EN>K8X;r6Jc^W,^`!;'S`6;IO&m+HeEIoZ\<]VX\gr`ke
%5$[3$0rLEI8:oGAfH>6deIO8X$Oed,QtDQfp/+d(V`G+;OL]nC8"0`i*'iHo#hfSs!/4LbRXQh:*%4>)P[Y,qE$dpfS]h8Glu0+S
%Ku2Np5Chbr,b0j'>_iii1Ch7#Yg";1JK="\/k"&M'LQUS2i.pd0W]jl8eD'^&jXB9iW;$U#%#[W$/-#++KW[h^_tJ(!*p**((fgf
%7A+DP!mYsd2RT*7'SGe#2%i4YMh^;S6/DYYVp$(sS5@L-%C?cb&?uTKEg+"0%Ur<<6R0$1JjBkP85D3-?MH?IJXZ++L^ZTSF+`"E
%WO5B*XtXVF>\&T!%J=S^95SYZbZX$'\(D*X"B?!s/:"3^\K'@!3u0$@.1CYnraIb+-)s,aK!=,>Zk/IR<5g#bFeDRDJ7LeFO>VQ^
%U,c-1r1NN]9mo;WW\!dHdVoEVg+0!6iDU(+18gL=B:p,=([9+^Tdipj^"Btdi`OYT0nN#WaWCAeEU(p"J[2#M!rOr1)!]JV!CV7[
%i5a3[W=I_jW+e->&)F'#,SVf0!EXLI[3A-b],L>nkTEUhWG/=d^d5ARI&M!8$'m=$9@8Pa05TGfq8)7,]2T\Y]U`L4p_6-QeUt^Q
%_Bo@J(]Xn4_+QX;eAaimS$>A9RC-=%V%-7FffFYM[?etB&Yr+8H,6mU+D^2)Kgk,<LfEMUA;QWf=f<0K=/HaReW>@cdDYk>KpjA%
%/h@pTcr_;Z/sM<XVeRg36YnkdhEr6+D-XpX*^\23-1EK)4!+^F20^Y+P3@`0']a`7/8CQ)?g9&.1TR*$=-%TL7j]q53?]`(ISZtV
%h.TSE'Ek-M3h'SW&nKY!b8c-X2*O>J/muFS:UqSYo:]eK$f,Z`g!W]@4&d"[^Tjhnm9UGEda[t2f]@W2029\'V3*.l[O9W;5Gi&)
%gMmO&6)s$Qc")jAJi(RHp(W9]+6qFp7u*&CmF0SY*T14;N%RhA^Wu<YBds1780f(@=d%LL_r-O/lP-NiGG1+ROfK.If*"#t(M/6%
%!Y':]98-elF/>TJR"/P4g3PG/;A>!_;d1on4(tuI9l99FHY.!WE;A4+*2jsClS,V@khr..hb5D*Y.808H_\\CGQ`UsRWmGV](\qH
%A=D4Y&p-aobaL@'D'-&,20bsJA!'suWb_GKFme21VXCcXp%f,PE!K8:Ja,*CWr9:J[;uQlC>k>o(.T_&EFbaD*NBNbF(A-)*dX;#
%>LXGWPp$nsNnU'LRt=W"M!^0?"JEb2gRQla=.7k&a4C-rpb?*/h6ufk2_T#rbj5T6RH)%RJIZ]mUj)%)PlNrneiWNlI?L><6Z4P`
%H^ZN58^3i.s3::be9]<6TEdV+l9"X(=P'^lZ+08L]D"mSr!pF;RRsdAII<1E](6n/+1Y0>r$U)D]oZqs!.%6PFQp\1#'rl^FQf9P
%UfBa:hKdMU>3O<p*0XD4?$^jKe*8*e5%>?`W@1#-W<tHg:FQ[u;sL)Emk.^?AT[,f0s:.ND.&qa`;t9WFb$&]*_MLD7u'9KT7dPc
%P<4/_<[4U28?*=[KMO%]0"o0;8Ysk/GNYMp/8]EO;j5A#6go&6;SdJ>*Ni-eRH3Xl0&r^MpM(KpS[`gM0hC=VR#t_g%Qsm@KY@Pe
%2IXYM>uI5`$<F#H7?++e2s$)]\pGI/6oMF7N`iK__/APsW]/BIeS!eKjfYaudCT5MrMOj<1M^d,#7!JRmXP68)V<7Eg3rF;qQ:jj
%V[bm4IJNg$e(^j?s1J>O3-Flhm:!L&qB'iC:U_^D\EeG6s&7P@kW+L&kPf+rnu(rjIWtSVq"=NFBU&Pbg["n&E9d+o:K[Y70Cl$?
%GK5Krj9^UIgn4TS$3gqD9M]$1Z[(h#ru\D6V9J~>
%AI9_PrivateDataEnd
